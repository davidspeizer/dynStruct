# Code auto-generated by MinxCC

testbin.istr0 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 68 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 103 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testbin.istr1 {
	mov4 r1, 21 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 68 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 77 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 44 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testbin.istr2 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testbin.istr3 {
	mov4 r1, 19 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 103 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testbin.istr4 {
	mov4 r1, 9 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 68 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 46 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 46 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 46 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




main {
	# emit "call" operands: r3 (k: 4 t: 14), Initialize (k: 9 t: 19)
	call r3, Initialize, () ;
	# emit "=" operands: r4 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r4, 0 ;
	# emit "=" operands: r5 (k: 4 t: 4), 500 (k: 3 t: 4)
	mov4 r5, 500 ;
	# emit "jmp" operands:  (k: 143046920 t: -32)
	goto .BB1
.BB0:
	# emit "call" operands: r3 (k: 4 t: 14), Insert (k: 9 t: 19)
	call r3, Insert, (r5, r3) ;
	# emit "++" operands: r4 (k: 4 t: 4)
	add4 r4, 1 ;
	# emit "+" operands: t4 (k: 5 t: 4), r5 (k: 4 t: 4), 71 (k: 3 t: 4)
	mov4 r6, r5 ;
	add4 r6, 71 ;
	# emit "%" operands: t5 (k: 5 t: 4), t4 (k: 5 t: 4), 1000 (k: 3 t: 4)
	mov4 r8, r6 ;
	div4 r8, 1000 ;
	mul4 r8, 1000 ;
	mov4 r7, r6 ;
	sub4 r7, r8 ;
	# emit "=" operands: r5 (k: 4 t: 4), t5 (k: 5 t: 4)
	mov4 r5, r7 ;
.BB1:
	# emit "<" operands:  (k: 143046584 t: -104), r4 (k: 4 t: 4), 1000 (k: 3 t: 4)
	mov4 r9, r4 ;
	sub4 r9, 1000 ;
	# xor
	mov4 r10, r4 ;
	mov4 r12, r4 ;
	or4 r10, 1000 ;
	and4 r12, 1000 ;
	sub4 r10, r12 ;
	# xor
	mov4 r11, r9 ;
	mov4 r13, r9 ;
	or4 r11, r4 ;
	and4 r13, r4 ;
	sub4 r11, r13 ;
	and4 r10, r11 ;
	# xor
	mov4 r11, r9 ;
	mov4 r14, r9 ;
	or4 r11, r10 ;
	and4 r14, r10 ;
	sub4 r11, r14 ;
	sr4 r11, 31 ;
	if4 (r11) goto .BB0 ;
	# emit "&" operands: t6 (k: 5 t: 14), testbin.istr0 (k: 7 t: 18)
	call r15, testbin.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r16, prints, (r15) ;
	# emit "=" operands: r5 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "jmp" operands:  (k: 143049160 t: 8)
	goto .BB3
.BB2:
	# emit "call" operands: t8 (k: 5 t: 6), DeleteMin (k: 9 t: 19)
	call r17, DeleteMin, (r3) ;
	# emit "=" operands: t9 (k: 5 t: 6), r5 (k: 4 t: 4)
	mov4 r18, r5 ;
	# emit "++" operands: r5 (k: 4 t: 4)
	add4 r5, 1 ;
	# emit "==" operands:  (k: 143049160 t: 8), t8 (k: 5 t: 6), t9 (k: 5 t: 6)
	eq4 r19, r17, r18 ;
	if4 (r19) goto .BB3 ;
	# emit "&" operands: t11 (k: 5 t: 14), testbin.istr1 (k: 7 t: 18)
	call r20, testbin.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r21, prints, (r20) ;
	# emit "call", print32 (k: 9 t: 19)
	call r22, print32, (r5) ;
	# emit "&" operands: t14 (k: 5 t: 14), testbin.istr2 (k: 7 t: 18)
	call r23, testbin.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r24, prints, (r23) ;
.BB3:
	# emit "call" operands: t16 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r25, IsEmpty, (r3) ;
	# emit "" operands:  (k: 143047136 t: -64), t16 (k: 5 t: 4)
	mov4 r26, r25 ;
	sub4 r26, 1 ;
	# ~x
	mov4 r27, r25 ;
	mul4 r27, -1 ;
	add4 r27, -1 ;
	and4 r26, r27 ;
	sr4 r26, 31 ;
	if4 (r26) goto .BB2 ;
	# emit "==", r5 (k: 4 t: 4), 1000 (k: 3 t: 4)
	mov4 r29, 1000 ;
	eq4 r28, r5, r29 ;
	if4 (r28) goto .BB4 ;
	# emit "&" operands: t17 (k: 5 t: 14), testbin.istr3 (k: 7 t: 18)
	call r30, testbin.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r31, prints, (r30) ;
.BB4:
	# emit "&" operands: t19 (k: 5 t: 14), testbin.istr4 (k: 7 t: 18)
	call r32, testbin.istr4, () ;
	# emit "call", prints (k: 9 t: 19)
	call r33, prints, (r32) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33)>

# Code auto-generated by MinxCC

binomial.istr0 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

binomial.istr1 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

binomial.istr2 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

binomial.istr3 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

binomial.istr4 {
	mov4 r1, 21 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 98 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 113 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

binomial.istr5 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

binomial.istr6 {
	mov4 r1, 21 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 98 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 113 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

binomial.istr7 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

binomial.istr8 {
	mov4 r1, 28 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 77 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 103 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 119 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 100 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 120 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 100 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

binomial.istr9 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




Initialize {
	# emit "call" operands: r1 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r1, 8 ;
	# emit "+" operands: t1 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "call" operands: t3 (k: 5 t: 14), malloc (k: 9 t: 19)
	alloc r3, 56 ;
	# emit "*=" operands: t1 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 [r1 + 4], r3 ;
	# emit "!=" operands:  (k: 150252848 t: -128), r1 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r1) goto .BB0 ;
	# emit "&" operands: t5 (k: 5 t: 14), binomial.istr0 (k: 7 t: 18)
	call r4, binomial.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r5, prints, (r4) ;
	# emit "&" operands: t7 (k: 5 t: 14), binomial.istr1 (k: 7 t: 18)
	call r6, binomial.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r7, prints, (r6) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r9, 1 ;
	call r8, mincexit, (r9) ;
.BB0:
	# emit "*=" operands: r1 (k: 4 t: 14), 0 (k: 3 t: 4)
	mov4 r10, 0 ;
	mov4 [r1], r10 ;
	# emit "=" operands: r2 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r2, 0 ;
	# emit "jmp" operands:  (k: 150258416 t: -56)
	goto .BB2
.BB1:
	# emit "<<" operands: t12 (k: 5 t: 4), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t13 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t14 (k: 5 t: 14), t13 (k: 5 t: 14)
	mov4 r11, [r1 + 4] ;
	# emit "+" operands: t15 (k: 5 t: 14), t14 (k: 5 t: 14), t12 (k: 5 t: 4)
	mov4 r12, r11 ;
	add4 r12, r2 * 4 ;
	# emit "*=" operands: t15 (k: 5 t: 14), 0 (k: 3 t: 14)
	mov4 r13, 0 ;
	mov4 [r12], r13 ;
	# emit "++" operands: r2 (k: 4 t: 4)
	add4 r2, 1 ;
.BB2:
	# emit "<" operands:  (k: 150252776 t: -128), r2 (k: 4 t: 4), 14 (k: 3 t: 4)
	mov4 r14, r2 ;
	sub4 r14, 14 ;
	# xor
	mov4 r15, r2 ;
	mov4 r17, r2 ;
	or4 r15, 14 ;
	and4 r17, 14 ;
	sub4 r15, r17 ;
	# xor
	mov4 r16, r14 ;
	mov4 r18, r14 ;
	or4 r16, r2 ;
	and4 r18, r2 ;
	sub4 r16, r18 ;
	and4 r15, r16 ;
	# xor
	mov4 r16, r14 ;
	mov4 r19, r14 ;
	or4 r16, r15 ;
	and4 r19, r15 ;
	sub4 r16, r19 ;
	sr4 r16, 31 ;
	if4 (r16) goto .BB1 ;
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	ret
} <(), r0, (r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19)>

DestroyTree {
	# emit "==", r1 (k: 4 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r1) goto .BB48 ;
	mov4 r2, 1 ;
	goto .BB49
.BB48:
	mov4 r2, 0 ;
.BB49:
	if4 (r2) goto .BB3 ;
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r3, [r1 + 4] ;
	# emit "call", DestroyTree (k: 9 t: 19)
	call r4, DestroyTree, (r3) ;
	# emit "+" operands: t2 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t3 (k: 5 t: 14), t2 (k: 5 t: 14)
	mov4 r5, [r1 + 8] ;
	# emit "call", DestroyTree (k: 9 t: 19)
	call r6, DestroyTree, (r5) ;
.BB3:
	ret
} <(r1), r0, (r2, r3, r4, r5, r6)>

Destroy {
	# emit "=" operands: r2 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r2, 0 ;
	# emit "jmp"
	goto .BB5
.BB4:
	# emit "<<" operands: t0 (k: 5 t: 4), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t1 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t2 (k: 5 t: 14), t1 (k: 5 t: 14)
	mov4 r3, [r1 + 4] ;
	# emit "+" operands: t3 (k: 5 t: 14), t2 (k: 5 t: 14), t0 (k: 5 t: 4)
	mov4 r4, r3 ;
	add4 r4, r2 * 4 ;
	# emit "*" operands: t4 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 r5, [r4] ;
	# emit "call", DestroyTree (k: 9 t: 19)
	call r6, DestroyTree, (r5) ;
	# emit "++" operands: r2 (k: 4 t: 4)
	add4 r2, 1 ;
.BB5:
	# emit "<" operands:  (k: 150261560 t: 88), r2 (k: 4 t: 4), 14 (k: 3 t: 4)
	mov4 r7, r2 ;
	sub4 r7, 14 ;
	# xor
	mov4 r8, r2 ;
	mov4 r10, r2 ;
	or4 r8, 14 ;
	and4 r10, 14 ;
	sub4 r8, r10 ;
	# xor
	mov4 r9, r7 ;
	mov4 r11, r7 ;
	or4 r9, r2 ;
	and4 r11, r2 ;
	sub4 r9, r11 ;
	and4 r8, r9 ;
	# xor
	mov4 r9, r7 ;
	mov4 r12, r7 ;
	or4 r9, r8 ;
	and4 r12, r8 ;
	sub4 r9, r12 ;
	sr4 r9, 31 ;
	if4 (r9) goto .BB4 ;
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12)>

MakeEmpty {
	# emit "call", Destroy (k: 9 t: 19)
	call r3, Destroy, (r1) ;
	# emit "=" operands: r2 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r2, 0 ;
	# emit "jmp" operands:  (k: 150263648 t: 56)
	goto .BB7
.BB6:
	# emit "<<" operands: t0 (k: 5 t: 4), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t1 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t2 (k: 5 t: 14), t1 (k: 5 t: 14)
	mov4 r4, [r1 + 4] ;
	# emit "+" operands: t3 (k: 5 t: 14), t2 (k: 5 t: 14), t0 (k: 5 t: 4)
	mov4 r5, r4 ;
	add4 r5, r2 * 4 ;
	# emit "*=" operands: t3 (k: 5 t: 14), 0 (k: 3 t: 14)
	mov4 r6, 0 ;
	mov4 [r5], r6 ;
	# emit "++" operands: r2 (k: 4 t: 4)
	add4 r2, 1 ;
.BB7:
	# emit "<" operands:  (k: 150263432 t: -16), r2 (k: 4 t: 4), 14 (k: 3 t: 4)
	mov4 r7, r2 ;
	sub4 r7, 14 ;
	# xor
	mov4 r8, r2 ;
	mov4 r10, r2 ;
	or4 r8, 14 ;
	and4 r10, 14 ;
	sub4 r8, r10 ;
	# xor
	mov4 r9, r7 ;
	mov4 r11, r7 ;
	or4 r9, r2 ;
	and4 r11, r2 ;
	sub4 r9, r11 ;
	and4 r8, r9 ;
	# xor
	mov4 r9, r7 ;
	mov4 r12, r7 ;
	or4 r9, r8 ;
	and4 r12, r8 ;
	sub4 r9, r12 ;
	sr4 r9, 31 ;
	if4 (r9) goto .BB6 ;
	# emit "*=" operands: r1 (k: 4 t: 14), 0 (k: 3 t: 4)
	mov4 r13, 0 ;
	mov4 [r1], r13 ;
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13)>

Insert {
	# emit "call" operands: r3 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r3, 12 ;
	# emit "!=", r3 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r3) goto .BB8 ;
	# emit "&" operands: t1 (k: 5 t: 14), binomial.istr2 (k: 7 t: 18)
	call r5, binomial.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r6, prints, (r5) ;
	# emit "&" operands: t3 (k: 5 t: 14), binomial.istr3 (k: 7 t: 18)
	call r7, binomial.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r8, prints, (r7) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r10, 1 ;
	call r9, mincexit, (r10) ;
.BB8:
	# emit "+" operands: t6 (k: 5 t: 14), r3 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "+" operands: t8 (k: 5 t: 14), r3 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*=" operands: t8 (k: 5 t: 14), 0 (k: 3 t: 14)
	mov4 r11, 0 ;
	mov4 [r3 + 8], r11 ;
	# emit "*" operands: t10 (k: 5 t: 14), t8 (k: 5 t: 14)
	mov4 r12, [r3 + 8] ;
	# emit "*=" operands: t6 (k: 5 t: 14), t10 (k: 5 t: 14)
	mov4 [r3 + 4], r12 ;
	# emit "*=" operands: r3 (k: 4 t: 14), r1 (k: 4 t: 6)
	mov4 [r3], r1 ;
	# emit "call" operands: r4 (k: 4 t: 14), Initialize (k: 9 t: 19)
	call r4, Initialize, () ;
	# emit "*=" operands: r4 (k: 4 t: 14), 1 (k: 3 t: 4)
	mov4 r13, 1 ;
	mov4 [r4], r13 ;
	# emit "+" operands: t17 (k: 5 t: 14), r4 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t18 (k: 5 t: 14), t17 (k: 5 t: 14)
	mov4 r14, [r4 + 4] ;
	# emit "*=" operands: t18 (k: 5 t: 14), r3 (k: 4 t: 14)
	mov4 [r14], r3 ;
	# emit "call" operands: t21 (k: 5 t: 14), Merge (k: 9 t: 19)
	call r15, Merge, (r2, r4) ;
	# emit "ret" operands: t21 (k: 5 t: 14)
	mov4 r0, r15 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15)>

DeleteMin {
	# emit "call" operands: t0 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r9, IsEmpty, (r1) ;
	# emit "" operands:  (k: 150270088 t: -8), t0 (k: 5 t: 4)
	mov4 r10, r9 ;
	sub4 r10, 1 ;
	# ~x
	mov4 r11, r9 ;
	mul4 r11, -1 ;
	add4 r11, -1 ;
	and4 r10, r11 ;
	sr4 r10, 31 ;
	if4 (r10) goto .BB9 ;
	# emit "&" operands: t1 (k: 5 t: 14), binomial.istr4 (k: 7 t: 18)
	call r12, binomial.istr4, () ;
	# emit "call", prints (k: 9 t: 19)
	call r13, prints, (r12) ;
	# emit "&" operands: t3 (k: 5 t: 14), binomial.istr5 (k: 7 t: 18)
	call r14, binomial.istr5, () ;
	# emit "call", prints (k: 9 t: 19)
	call r15, prints, (r14) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r17, 1 ;
	call r16, mincexit, (r17) ;
	# emit "ret" operands: -30000 (k: 3 t: 4)
	mov4 r0, -30000 ;
	# emit "jmp"
	goto .BB15
.BB9:
	# emit "=" operands: r8 (k: 4 t: 6), 30000 (k: 3 t: 4)
	mov4 r8, 30000 ;
	# emit "=" operands: r2 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r2, 0 ;
	# emit "jmp" operands:  (k: 150271960 t: 64)
	goto .BB12
.BB10:
	# emit "<<" operands: t6 (k: 5 t: 4), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t7 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t8 (k: 5 t: 14), t7 (k: 5 t: 14)
	mov4 r18, [r1 + 4] ;
	# emit "+" operands: t9 (k: 5 t: 14), t8 (k: 5 t: 14), t6 (k: 5 t: 4)
	mov4 r19, r18 ;
	add4 r19, r2 * 4 ;
	# emit "*" operands: t10 (k: 5 t: 14), t9 (k: 5 t: 14)
	mov4 r20, [r19] ;
	# emit "" operands:  (k: 150272032 t: -8), t10 (k: 5 t: 14)
	# outputjz
	if4 (r20) goto .BB50 ;
	mov4 r21, 1 ;
	goto .BB51
.BB50:
	mov4 r21, 0 ;
.BB51:
	if4 (r21) goto .BB11 ;
	# emit "<<" operands: t11 (k: 5 t: 4), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t12 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t13 (k: 5 t: 14), t12 (k: 5 t: 14)
	mov4 r22, [r1 + 4] ;
	# emit "+" operands: t14 (k: 5 t: 14), t13 (k: 5 t: 14), t11 (k: 5 t: 4)
	mov4 r23, r22 ;
	add4 r23, r2 * 4 ;
	# emit "*" operands: t15 (k: 5 t: 14), t14 (k: 5 t: 14)
	mov4 r24, [r23] ;
	# emit "*" operands: t16 (k: 5 t: 6), t15 (k: 5 t: 14)
	mov4 r25, [r24] ;
	# emit ">=" operands:  (k: 150272032 t: -8), t16 (k: 5 t: 6), r8 (k: 4 t: 6)
	mov4 r26, r25 ;
	sub4 r26, r8 ;
	# ~x
	mul4 r26, -1 ;
	add4 r26, -1 ;
	# xor
	mov4 r27, r8 ;
	mov4 r28, r8 ;
	or4 r27, r25 ;
	and4 r28, r25 ;
	sub4 r27, r28 ;
	or4 r27, r26 ;
	# ~x
	mov4 r26, r25 ;
	mul4 r26, -1 ;
	add4 r26, -1 ;
	or4 r26, r8 ;
	and4 r26, r27 ;
	sr4 r26, 31 ;
	if4 (r26) goto .BB11 ;
	# emit "<<" operands: t17 (k: 5 t: 4), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t18 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t19 (k: 5 t: 14), t18 (k: 5 t: 14)
	mov4 r29, [r1 + 4] ;
	# emit "+" operands: t20 (k: 5 t: 14), t19 (k: 5 t: 14), t17 (k: 5 t: 4)
	mov4 r30, r29 ;
	add4 r30, r2 * 4 ;
	# emit "*" operands: t21 (k: 5 t: 14), t20 (k: 5 t: 14)
	mov4 r31, [r30] ;
	# emit "*" operands: t22 (k: 5 t: 6), t21 (k: 5 t: 14)
	mov4 r32, [r31] ;
	# emit "=" operands: r8 (k: 4 t: 6), t22 (k: 5 t: 6)
	mov4 r8, r32 ;
	# emit "=" operands: r4 (k: 4 t: 4), r2 (k: 4 t: 4)
	mov4 r4, r2 ;
.BB11:
	# emit "++" operands: r2 (k: 4 t: 4)
	add4 r2, 1 ;
.BB12:
	# emit "<" operands:  (k: 150270016 t: -104), r2 (k: 4 t: 4), 14 (k: 3 t: 4)
	mov4 r33, r2 ;
	sub4 r33, 14 ;
	# xor
	mov4 r34, r2 ;
	mov4 r36, r2 ;
	or4 r34, 14 ;
	and4 r36, 14 ;
	sub4 r34, r36 ;
	# xor
	mov4 r35, r33 ;
	mov4 r37, r33 ;
	or4 r35, r2 ;
	and4 r37, r2 ;
	sub4 r35, r37 ;
	and4 r34, r35 ;
	# xor
	mov4 r35, r33 ;
	mov4 r38, r33 ;
	or4 r35, r34 ;
	and4 r38, r34 ;
	sub4 r35, r38 ;
	sr4 r35, 31 ;
	if4 (r35) goto .BB10 ;
	# emit "<<" operands: t25 (k: 5 t: 4), r4 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t26 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t27 (k: 5 t: 14), t26 (k: 5 t: 14)
	mov4 r39, [r1 + 4] ;
	# emit "+" operands: t28 (k: 5 t: 14), t27 (k: 5 t: 14), t25 (k: 5 t: 4)
	mov4 r40, r39 ;
	add4 r40, r4 * 4 ;
	# emit "*" operands: t29 (k: 5 t: 14), t28 (k: 5 t: 14)
	mov4 r41, [r40] ;
	# emit "=" operands: r6 (k: 4 t: 14), t29 (k: 5 t: 14)
	mov4 r6, r41 ;
	# emit "=" operands: r7 (k: 4 t: 14), r6 (k: 4 t: 14)
	mov4 r7, r6 ;
	# emit "+" operands: t30 (k: 5 t: 14), r6 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t31 (k: 5 t: 14), t30 (k: 5 t: 14)
	mov4 r42, [r6 + 4] ;
	# emit "=" operands: r6 (k: 4 t: 14), t31 (k: 5 t: 14)
	mov4 r6, r42 ;
	# emit "call" operands: r5 (k: 4 t: 14), Initialize (k: 9 t: 19)
	call r5, Initialize, () ;
	# emit "<<" operands: t34 (k: 5 t: 4), 1 (k: 3 t: 4), r4 (k: 4 t: 4)
	mov4 r43, 1 ;
	mov4 r44, r43 ;
	sl4 r44, r4 ;
	# emit "+" operands: t35 (k: 5 t: 4), t34 (k: 5 t: 4), -1 (k: 3 t: 4)
	mov4 r45, r44 ;
	add4 r45, -1 ;
	# emit "*=" operands: r5 (k: 4 t: 14), t35 (k: 5 t: 4)
	mov4 [r5], r45 ;
	# emit "+" operands: t37 (k: 5 t: 4), r4 (k: 4 t: 4), -1 (k: 3 t: 4)
	mov4 r46, r4 ;
	add4 r46, -1 ;
	# emit "=" operands: r3 (k: 4 t: 4), t37 (k: 5 t: 4)
	mov4 r3, r46 ;
	# emit "jmp" operands:  (k: 150276904 t: 0)
	goto .BB14
.BB13:
	# emit "<<" operands: t38 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t39 (k: 5 t: 14), r5 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t40 (k: 5 t: 14), t39 (k: 5 t: 14)
	mov4 r47, [r5 + 4] ;
	# emit "+" operands: t41 (k: 5 t: 14), t40 (k: 5 t: 14), t38 (k: 5 t: 4)
	mov4 r48, r47 ;
	add4 r48, r3 * 4 ;
	# emit "*=" operands: t41 (k: 5 t: 14), r6 (k: 4 t: 14)
	mov4 [r48], r6 ;
	# emit "+" operands: t44 (k: 5 t: 14), r6 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t45 (k: 5 t: 14), t44 (k: 5 t: 14)
	mov4 r49, [r6 + 8] ;
	# emit "=" operands: r6 (k: 4 t: 14), t45 (k: 5 t: 14)
	mov4 r6, r49 ;
	# emit "*" operands: t46 (k: 5 t: 14), t39 (k: 5 t: 14)
	mov4 r50, [r5 + 4] ;
	# emit "+" operands: t47 (k: 5 t: 14), t46 (k: 5 t: 14), t38 (k: 5 t: 4)
	mov4 r51, r50 ;
	add4 r51, r3 * 4 ;
	# emit "*" operands: t48 (k: 5 t: 14), t47 (k: 5 t: 14)
	mov4 r52, [r51] ;
	# emit "+" operands: t49 (k: 5 t: 14), t48 (k: 5 t: 14), 8 (k: 3 t: 4)
	# emit "*=" operands: t49 (k: 5 t: 14), 0 (k: 3 t: 14)
	mov4 r53, 0 ;
	mov4 [r52 + 8], r53 ;
	# emit "+" operands: t53 (k: 5 t: 4), r3 (k: 4 t: 4), -1 (k: 3 t: 4)
	mov4 r54, r3 ;
	add4 r54, -1 ;
	# emit "=" operands: r3 (k: 4 t: 4), t53 (k: 5 t: 4)
	mov4 r3, r54 ;
.BB14:
	# emit ">=" operands:  (k: 150271808 t: -72), r3 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r55, r3 ;
	sub4 r55, 0 ;
	# ~x
	mul4 r55, -1 ;
	add4 r55, -1 ;
	# xor
	mov4 r56, 0 ;
	mov4 r57, 0 ;
	or4 r56, r3 ;
	and4 r57, r3 ;
	sub4 r56, r57 ;
	or4 r56, r55 ;
	# ~x
	mov4 r55, r3 ;
	mul4 r55, -1 ;
	add4 r55, -1 ;
	or4 r55, 0 ;
	and4 r55, r56 ;
	sr4 r55, 31 ;
	if4 (r55) goto .BB13 ;
	# emit "<<" operands: t54 (k: 5 t: 4), r4 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t55 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t56 (k: 5 t: 14), t55 (k: 5 t: 14)
	mov4 r58, [r1 + 4] ;
	# emit "+" operands: t57 (k: 5 t: 14), t56 (k: 5 t: 14), t54 (k: 5 t: 4)
	mov4 r59, r58 ;
	add4 r59, r4 * 4 ;
	# emit "*=" operands: t57 (k: 5 t: 14), 0 (k: 3 t: 14)
	mov4 r60, 0 ;
	mov4 [r59], r60 ;
	# emit "*" operands: t60 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r61, [r1] ;
	# emit "*" operands: t61 (k: 5 t: 4), r5 (k: 4 t: 14)
	mov4 r62, [r5] ;
	# emit "+" operands: t62 (k: 5 t: 4), t61 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r63, r62 ;
	add4 r63, 1 ;
	# emit "-" operands: t63 (k: 5 t: 4), t60 (k: 5 t: 4), t62 (k: 5 t: 4)
	mov4 r64, r61 ;
	sub4 r64, r63 ;
	# emit "*=" operands: r1 (k: 4 t: 14), t63 (k: 5 t: 4)
	mov4 [r1], r64 ;
	# emit "call", Merge (k: 9 t: 19)
	call r65, Merge, (r1, r5) ;
	# emit "ret" operands: r8 (k: 4 t: 6)
	mov4 r0, r8 ;
.BB15:
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65)>

FindMin {
	# emit "call" operands: t0 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r4, IsEmpty, (r1) ;
	# emit "" operands:  (k: 150282232 t: -56), t0 (k: 5 t: 4)
	mov4 r5, r4 ;
	sub4 r5, 1 ;
	# ~x
	mov4 r6, r4 ;
	mul4 r6, -1 ;
	add4 r6, -1 ;
	and4 r5, r6 ;
	sr4 r5, 31 ;
	if4 (r5) goto .BB16 ;
	# emit "&" operands: t1 (k: 5 t: 14), binomial.istr6 (k: 7 t: 18)
	call r7, binomial.istr6, () ;
	# emit "call", prints (k: 9 t: 19)
	call r8, prints, (r7) ;
	# emit "&" operands: t3 (k: 5 t: 14), binomial.istr7 (k: 7 t: 18)
	call r9, binomial.istr7, () ;
	# emit "call", prints (k: 9 t: 19)
	call r10, prints, (r9) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r12, 1 ;
	call r11, mincexit, (r12) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
	# emit "jmp"
	goto .BB20
.BB16:
	# emit "=" operands: r3 (k: 4 t: 6), 30000 (k: 3 t: 4)
	mov4 r3, 30000 ;
	# emit "=" operands: r2 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r2, 0 ;
	# emit "jmp" operands:  (k: 150283944 t: 16)
	goto .BB19
.BB17:
	# emit "<<" operands: t6 (k: 5 t: 4), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t7 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t8 (k: 5 t: 14), t7 (k: 5 t: 14)
	mov4 r13, [r1 + 4] ;
	# emit "+" operands: t9 (k: 5 t: 14), t8 (k: 5 t: 14), t6 (k: 5 t: 4)
	mov4 r14, r13 ;
	add4 r14, r2 * 4 ;
	# emit "*" operands: t10 (k: 5 t: 14), t9 (k: 5 t: 14)
	mov4 r15, [r14] ;
	# emit "" operands:  (k: 150284016 t: -56), t10 (k: 5 t: 14)
	# outputjz
	if4 (r15) goto .BB52 ;
	mov4 r16, 1 ;
	goto .BB53
.BB52:
	mov4 r16, 0 ;
.BB53:
	if4 (r16) goto .BB18 ;
	# emit "<<" operands: t11 (k: 5 t: 4), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t12 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t13 (k: 5 t: 14), t12 (k: 5 t: 14)
	mov4 r17, [r1 + 4] ;
	# emit "+" operands: t14 (k: 5 t: 14), t13 (k: 5 t: 14), t11 (k: 5 t: 4)
	mov4 r18, r17 ;
	add4 r18, r2 * 4 ;
	# emit "*" operands: t15 (k: 5 t: 14), t14 (k: 5 t: 14)
	mov4 r19, [r18] ;
	# emit "*" operands: t16 (k: 5 t: 6), t15 (k: 5 t: 14)
	mov4 r20, [r19] ;
	# emit ">=" operands:  (k: 150284016 t: -56), t16 (k: 5 t: 6), r3 (k: 4 t: 6)
	mov4 r21, r20 ;
	sub4 r21, r3 ;
	# ~x
	mul4 r21, -1 ;
	add4 r21, -1 ;
	# xor
	mov4 r22, r3 ;
	mov4 r23, r3 ;
	or4 r22, r20 ;
	and4 r23, r20 ;
	sub4 r22, r23 ;
	or4 r22, r21 ;
	# ~x
	mov4 r21, r20 ;
	mul4 r21, -1 ;
	add4 r21, -1 ;
	or4 r21, r3 ;
	and4 r21, r22 ;
	sr4 r21, 31 ;
	if4 (r21) goto .BB18 ;
	# emit "<<" operands: t17 (k: 5 t: 4), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t18 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t19 (k: 5 t: 14), t18 (k: 5 t: 14)
	mov4 r24, [r1 + 4] ;
	# emit "+" operands: t20 (k: 5 t: 14), t19 (k: 5 t: 14), t17 (k: 5 t: 4)
	mov4 r25, r24 ;
	add4 r25, r2 * 4 ;
	# emit "*" operands: t21 (k: 5 t: 14), t20 (k: 5 t: 14)
	mov4 r26, [r25] ;
	# emit "*" operands: t22 (k: 5 t: 6), t21 (k: 5 t: 14)
	mov4 r27, [r26] ;
	# emit "=" operands: r3 (k: 4 t: 6), t22 (k: 5 t: 6)
	mov4 r3, r27 ;
.BB18:
	# emit "++" operands: r2 (k: 4 t: 4)
	add4 r2, 1 ;
.BB19:
	# emit "<" operands:  (k: 150282160 t: 104), r2 (k: 4 t: 4), 14 (k: 3 t: 4)
	mov4 r28, r2 ;
	sub4 r28, 14 ;
	# xor
	mov4 r29, r2 ;
	mov4 r31, r2 ;
	or4 r29, 14 ;
	and4 r31, 14 ;
	sub4 r29, r31 ;
	# xor
	mov4 r30, r28 ;
	mov4 r32, r28 ;
	or4 r30, r2 ;
	and4 r32, r2 ;
	sub4 r30, r32 ;
	and4 r29, r30 ;
	# xor
	mov4 r30, r28 ;
	mov4 r33, r28 ;
	or4 r30, r29 ;
	and4 r33, r29 ;
	sub4 r30, r33 ;
	sr4 r30, 31 ;
	if4 (r30) goto .BB17 ;
	# emit "ret" operands: r3 (k: 4 t: 6)
	mov4 r0, r3 ;
.BB20:
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33)>

IsEmpty {
	# emit "*" operands: t1 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r2, [r1] ;
	# emit "==" operands:  (k: 150287888 t: -128), t1 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r3, r2 ;
	sub4 r3, 1 ;
	# ~x
	mov4 r4, r2 ;
	mul4 r4, -1 ;
	add4 r4, -1 ;
	and4 r3, r4 ;
	sr4 r3, 31 ;
	if4 (r3) goto .BB21 ;
	# emit "=" operands: t0 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "jmp"
	goto .BB22
.BB21:
	# emit "=" operands: t0 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r5, 1 ;
.BB22:
	# emit "ret" operands: t0 (k: 5 t: 4)
	mov4 r0, r5 ;
	ret
} <(r1), r0, (r2, r3, r4, r5)>

IsFull {
	# emit "*" operands: t1 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r2, [r1] ;
	# emit "==" operands:  (k: 150288976 t: -64), t1 (k: 5 t: 4), 16383 (k: 3 t: 4)
	mov4 r4, 16383 ;
	eq4 r3, r2, r4 ;
	if4 (r3) goto .BB23 ;
	# emit "=" operands: t0 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "jmp"
	goto .BB24
.BB23:
	# emit "=" operands: t0 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r5, 1 ;
.BB24:
	# emit "ret" operands: t0 (k: 5 t: 4)
	mov4 r0, r5 ;
	ret
} <(r1), r0, (r2, r3, r4, r5)>

CombineTrees {
	# emit "*" operands: t0 (k: 5 t: 6), r1 (k: 4 t: 14)
	mov4 r3, [r1] ;
	# emit "*" operands: t1 (k: 5 t: 6), r2 (k: 4 t: 14)
	mov4 r4, [r2] ;
	# emit "<=" operands:  (k: 150289976 t: -88), t0 (k: 5 t: 6), t1 (k: 5 t: 6)
	mov4 r5, r4 ;
	sub4 r5, r3 ;
	# ~x
	mul4 r5, -1 ;
	add4 r5, -1 ;
	# xor
	mov4 r6, r3 ;
	mov4 r7, r3 ;
	or4 r6, r4 ;
	and4 r7, r4 ;
	sub4 r6, r7 ;
	or4 r6, r5 ;
	# ~x
	mov4 r5, r4 ;
	mul4 r5, -1 ;
	add4 r5, -1 ;
	or4 r5, r3 ;
	and4 r5, r6 ;
	sr4 r5, 31 ;
	if4 (r5) goto .BB25 ;
	# emit "call" operands: t2 (k: 5 t: 14), CombineTrees (k: 9 t: 19)
	call r8, CombineTrees, (r2, r1) ;
	# emit "ret" operands: t2 (k: 5 t: 14)
	mov4 r0, r8 ;
	# emit "jmp"
	goto .BB26
.BB25:
	# emit "+" operands: t3 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "+" operands: t5 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t6 (k: 5 t: 14), t5 (k: 5 t: 14)
	mov4 r9, [r1 + 4] ;
	# emit "*=" operands: t3 (k: 5 t: 14), t6 (k: 5 t: 14)
	mov4 [r2 + 8], r9 ;
	# emit "*=" operands: t5 (k: 5 t: 14), r2 (k: 4 t: 14)
	mov4 [r1 + 4], r2 ;
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
.BB26:
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9)>

Merge {
	# emit "=" operands: r5 (k: 4 t: 14), 0 (k: 3 t: 14)
	mov4 r5, 0 ;
	# emit "*" operands: t0 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r9, [r1] ;
	# emit "*" operands: t1 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r10, [r2] ;
	# emit "+" operands: t2 (k: 5 t: 4), t0 (k: 5 t: 4), t1 (k: 5 t: 4)
	mov4 r11, r9 ;
	add4 r11, r10 ;
	# emit "<=" operands:  (k: 150292304 t: 56), t2 (k: 5 t: 4), 16383 (k: 3 t: 4)
	mov4 r12, 16383 ;
	sub4 r12, r11 ;
	# ~x
	mul4 r12, -1 ;
	add4 r12, -1 ;
	# xor
	mov4 r13, r11 ;
	mov4 r14, r11 ;
	or4 r13, 16383 ;
	and4 r14, 16383 ;
	sub4 r13, r14 ;
	or4 r13, r12 ;
	# ~x
	mov4 r12, 16383 ;
	mul4 r12, -1 ;
	add4 r12, -1 ;
	or4 r12, r11 ;
	and4 r12, r13 ;
	sr4 r12, 31 ;
	if4 (r12) goto .BB27 ;
	# emit "&" operands: t3 (k: 5 t: 14), binomial.istr8 (k: 7 t: 18)
	call r15, binomial.istr8, () ;
	# emit "call", prints (k: 9 t: 19)
	call r16, prints, (r15) ;
	# emit "&" operands: t5 (k: 5 t: 14), binomial.istr9 (k: 7 t: 18)
	call r17, binomial.istr9, () ;
	# emit "call", prints (k: 9 t: 19)
	call r18, prints, (r17) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r20, 1 ;
	call r19, mincexit, (r20) ;
.BB27:
	# emit "*" operands: t8 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r21, [r1] ;
	# emit "*" operands: t9 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r22, [r2] ;
	# emit "+" operands: t10 (k: 5 t: 4), t8 (k: 5 t: 4), t9 (k: 5 t: 4)
	mov4 r23, r21 ;
	add4 r23, r22 ;
	# emit "*=" operands: r1 (k: 4 t: 14), t10 (k: 5 t: 4)
	mov4 [r1], r23 ;
	# emit "=" operands: r6 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r6, 0 ;
	# emit "=" operands: r7 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r7, 1 ;
	# emit "jmp" operands:  (k: 150307096 t: -128)
	goto .BB47
.BB28:
	# emit "<<" operands: t12 (k: 5 t: 4), r6 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t13 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t14 (k: 5 t: 14), t13 (k: 5 t: 14)
	mov4 r24, [r1 + 4] ;
	# emit "+" operands: t15 (k: 5 t: 14), t14 (k: 5 t: 14), t12 (k: 5 t: 4)
	mov4 r25, r24 ;
	add4 r25, r6 * 4 ;
	# emit "*" operands: t16 (k: 5 t: 14), t15 (k: 5 t: 14)
	mov4 r26, [r25] ;
	# emit "=" operands: r3 (k: 4 t: 14), t16 (k: 5 t: 14)
	mov4 r3, r26 ;
	# emit "+" operands: t17 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t18 (k: 5 t: 14), t17 (k: 5 t: 14)
	mov4 r27, [r2 + 4] ;
	# emit "+" operands: t19 (k: 5 t: 14), t18 (k: 5 t: 14), t12 (k: 5 t: 4)
	mov4 r28, r27 ;
	add4 r28, r6 * 4 ;
	# emit "*" operands: t20 (k: 5 t: 14), t19 (k: 5 t: 14)
	mov4 r29, [r28] ;
	# emit "=" operands: r4 (k: 4 t: 14), t20 (k: 5 t: 14)
	mov4 r4, r29 ;
	# emit "" operands:  (k: 150296376 t: -88), r3 (k: 4 t: 14)
	# outputjz
	if4 (r3) goto .BB54 ;
	mov4 r30, 1 ;
	goto .BB55
.BB54:
	mov4 r30, 0 ;
.BB55:
	if4 (r30) goto .BB29 ;
	# emit "=" operands: t22 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r31, 0 ;
	# emit "jmp" operands:  (k: 150296304 t: 24)
	goto .BB30
.BB29:
	# emit "=" operands: t22 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r31, 1 ;
.BB30:
	# emit "" operands:  (k: 150296088 t: -120), t22 (k: 5 t: 4)
	mov4 r32, r31 ;
	sub4 r32, 1 ;
	# ~x
	mov4 r33, r31 ;
	mul4 r33, -1 ;
	add4 r33, -1 ;
	and4 r32, r33 ;
	sr4 r32, 31 ;
	if4 (r32) goto .BB31 ;
	# emit "=" operands: t21 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r34, 0 ;
	# emit "jmp" operands:  (k: 150296016 t: 88)
	goto .BB32
.BB31:
	# emit "=" operands: t21 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r34, 1 ;
.BB32:
	# emit "" operands:  (k: 150297432 t: -56), r4 (k: 4 t: 14)
	# outputjz
	if4 (r4) goto .BB56 ;
	mov4 r35, 1 ;
	goto .BB57
.BB56:
	mov4 r35, 0 ;
.BB57:
	if4 (r35) goto .BB33 ;
	# emit "=" operands: t24 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r36, 0 ;
	# emit "jmp" operands:  (k: 150297360 t: 56)
	goto .BB34
.BB33:
	# emit "=" operands: t24 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r36, 1 ;
.BB34:
	# emit "" operands:  (k: 150297144 t: -88), t24 (k: 5 t: 4)
	mov4 r37, r36 ;
	sub4 r37, 1 ;
	# ~x
	mov4 r38, r36 ;
	mul4 r38, -1 ;
	add4 r38, -1 ;
	and4 r37, r38 ;
	sr4 r37, 31 ;
	if4 (r37) goto .BB35 ;
	# emit "=" operands: t23 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r39, 0 ;
	# emit "jmp" operands:  (k: 150297072 t: 120)
	goto .BB36
.BB35:
	# emit "=" operands: t23 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r39, 1 ;
.BB36:
	# emit "*" operands: t25 (k: 5 t: 4), 2 (k: 3 t: 4), t23 (k: 5 t: 4)
	mov4 r40, 2 ;
	mov4 r41, r40 ;
	mul4 r41, r39 ;
	# emit "+" operands: t26 (k: 5 t: 4), t21 (k: 5 t: 4), t25 (k: 5 t: 4)
	mov4 r42, r34 ;
	add4 r42, r41 ;
	# emit "" operands:  (k: 150298744 t: -24), r5 (k: 4 t: 14)
	# outputjz
	if4 (r5) goto .BB58 ;
	mov4 r43, 1 ;
	goto .BB59
.BB58:
	mov4 r43, 0 ;
.BB59:
	if4 (r43) goto .BB37 ;
	# emit "=" operands: t28 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r44, 0 ;
	# emit "jmp" operands:  (k: 150298672 t: 88)
	goto .BB38
.BB37:
	# emit "=" operands: t28 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r44, 1 ;
.BB38:
	# emit "" operands:  (k: 150298456 t: -56), t28 (k: 5 t: 4)
	mov4 r45, r44 ;
	sub4 r45, 1 ;
	# ~x
	mov4 r46, r44 ;
	mul4 r46, -1 ;
	add4 r46, -1 ;
	and4 r45, r46 ;
	sr4 r45, 31 ;
	if4 (r45) goto .BB39 ;
	# emit "=" operands: t27 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r47, 0 ;
	# emit "jmp" operands:  (k: 150298384 t: 8)
	goto .BB40
.BB39:
	# emit "=" operands: t27 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r47, 1 ;
.BB40:
	# emit "*" operands: t29 (k: 5 t: 4), 4 (k: 3 t: 4), t27 (k: 5 t: 4)
	mov4 r48, 4 ;
	mov4 r49, r48 ;
	mul4 r49, r47 ;
	# emit "+" operands: t30 (k: 5 t: 4), t26 (k: 5 t: 4), t29 (k: 5 t: 4)
	mov4 r50, r42 ;
	add4 r50, r49 ;
	# emit "=" operands: r8 (k: 4 t: 4), t30 (k: 5 t: 4)
	mov4 r8, r50 ;
	# emit "!=" operands:  (k: 150299656 t: 0), r8 (k: 4 t: 4), 2 (k: 3 t: 4)
	mov4 r52, 2 ;
	eq4 r51, r8, r52 ;
	# outputjz
	if4 (r51) goto .BB60 ;
	mov4 r53, 1 ;
	goto .BB61
.BB60:
	mov4 r53, 0 ;
.BB61:
	if4 (r53) goto .BB41 ;
	# emit "<<" operands: t31 (k: 5 t: 4), r6 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t32 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t33 (k: 5 t: 14), t32 (k: 5 t: 14)
	mov4 r54, [r1 + 4] ;
	# emit "+" operands: t34 (k: 5 t: 14), t33 (k: 5 t: 14), t31 (k: 5 t: 4)
	mov4 r55, r54 ;
	add4 r55, r6 * 4 ;
	# emit "*=" operands: t34 (k: 5 t: 14), r4 (k: 4 t: 14)
	mov4 [r55], r4 ;
	# emit "+" operands: t37 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t38 (k: 5 t: 14), t37 (k: 5 t: 14)
	mov4 r56, [r2 + 4] ;
	# emit "+" operands: t39 (k: 5 t: 14), t38 (k: 5 t: 14), t31 (k: 5 t: 4)
	mov4 r57, r56 ;
	add4 r57, r6 * 4 ;
	# emit "*=" operands: t39 (k: 5 t: 14), 0 (k: 3 t: 14)
	mov4 r58, 0 ;
	mov4 [r57], r58 ;
.BB41:
	# emit "!=" operands:  (k: 150301440 t: 48), r8 (k: 4 t: 4), 4 (k: 3 t: 4)
	mov4 r60, 4 ;
	eq4 r59, r8, r60 ;
	# outputjz
	if4 (r59) goto .BB62 ;
	mov4 r61, 1 ;
	goto .BB63
.BB62:
	mov4 r61, 0 ;
.BB63:
	if4 (r61) goto .BB42 ;
	# emit "<<" operands: t42 (k: 5 t: 4), r6 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t43 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t44 (k: 5 t: 14), t43 (k: 5 t: 14)
	mov4 r62, [r1 + 4] ;
	# emit "+" operands: t45 (k: 5 t: 14), t44 (k: 5 t: 14), t42 (k: 5 t: 4)
	mov4 r63, r62 ;
	add4 r63, r6 * 4 ;
	# emit "*=" operands: t45 (k: 5 t: 14), r5 (k: 4 t: 14)
	mov4 [r63], r5 ;
	# emit "=" operands: r5 (k: 4 t: 14), 0 (k: 3 t: 14)
	mov4 r5, 0 ;
.BB42:
	# emit "!=" operands:  (k: 150302512 t: 48), r8 (k: 4 t: 4), 3 (k: 3 t: 4)
	mov4 r65, 3 ;
	eq4 r64, r8, r65 ;
	# outputjz
	if4 (r64) goto .BB64 ;
	mov4 r66, 1 ;
	goto .BB65
.BB64:
	mov4 r66, 0 ;
.BB65:
	if4 (r66) goto .BB43 ;
	# emit "call" operands: r5 (k: 4 t: 14), CombineTrees (k: 9 t: 19)
	call r5, CombineTrees, (r3, r4) ;
	# emit "<<" operands: t49 (k: 5 t: 4), r6 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t50 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t51 (k: 5 t: 14), t50 (k: 5 t: 14)
	mov4 r67, [r1 + 4] ;
	# emit "+" operands: t52 (k: 5 t: 14), t51 (k: 5 t: 14), t49 (k: 5 t: 4)
	mov4 r68, r67 ;
	add4 r68, r6 * 4 ;
	# emit "+" operands: t54 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t55 (k: 5 t: 14), t54 (k: 5 t: 14)
	mov4 r69, [r2 + 4] ;
	# emit "+" operands: t56 (k: 5 t: 14), t55 (k: 5 t: 14), t49 (k: 5 t: 4)
	mov4 r70, r69 ;
	add4 r70, r6 * 4 ;
	# emit "*=" operands: t56 (k: 5 t: 14), 0 (k: 3 t: 14)
	mov4 r71, 0 ;
	mov4 [r70], r71 ;
	# emit "*" operands: t58 (k: 5 t: 14), t56 (k: 5 t: 14)
	mov4 r72, [r70] ;
	# emit "*=" operands: t52 (k: 5 t: 14), t58 (k: 5 t: 14)
	mov4 [r68], r72 ;
.BB43:
	# emit "!=" operands:  (k: 150304560 t: 72), r8 (k: 4 t: 4), 5 (k: 3 t: 4)
	mov4 r74, 5 ;
	eq4 r73, r8, r74 ;
	# outputjz
	if4 (r73) goto .BB66 ;
	mov4 r75, 1 ;
	goto .BB67
.BB66:
	mov4 r75, 0 ;
.BB67:
	if4 (r75) goto .BB44 ;
	# emit "call" operands: r5 (k: 4 t: 14), CombineTrees (k: 9 t: 19)
	call r5, CombineTrees, (r3, r5) ;
	# emit "<<" operands: t61 (k: 5 t: 4), r6 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t62 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t63 (k: 5 t: 14), t62 (k: 5 t: 14)
	mov4 r76, [r1 + 4] ;
	# emit "+" operands: t64 (k: 5 t: 14), t63 (k: 5 t: 14), t61 (k: 5 t: 4)
	mov4 r77, r76 ;
	add4 r77, r6 * 4 ;
	# emit "*=" operands: t64 (k: 5 t: 14), 0 (k: 3 t: 14)
	mov4 r78, 0 ;
	mov4 [r77], r78 ;
.BB44:
	# emit "!=" operands:  (k: 150305864 t: 96), r8 (k: 4 t: 4), 6 (k: 3 t: 4)
	mov4 r80, 6 ;
	eq4 r79, r8, r80 ;
	# outputjz
	if4 (r79) goto .BB68 ;
	mov4 r81, 1 ;
	goto .BB69
.BB68:
	mov4 r81, 0 ;
.BB69:
	if4 (r81) goto .BB45 ;
	# emit "call" operands: r5 (k: 4 t: 14), CombineTrees (k: 9 t: 19)
	call r5, CombineTrees, (r4, r5) ;
	# emit "<<" operands: t68 (k: 5 t: 4), r6 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t69 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t70 (k: 5 t: 14), t69 (k: 5 t: 14)
	mov4 r82, [r2 + 4] ;
	# emit "+" operands: t71 (k: 5 t: 14), t70 (k: 5 t: 14), t68 (k: 5 t: 4)
	mov4 r83, r82 ;
	add4 r83, r6 * 4 ;
	# emit "*=" operands: t71 (k: 5 t: 14), 0 (k: 3 t: 14)
	mov4 r84, 0 ;
	mov4 [r83], r84 ;
.BB45:
	# emit "!=" operands:  (k: 150307168 t: 56), r8 (k: 4 t: 4), 7 (k: 3 t: 4)
	mov4 r86, 7 ;
	eq4 r85, r8, r86 ;
	# outputjz
	if4 (r85) goto .BB70 ;
	mov4 r87, 1 ;
	goto .BB71
.BB70:
	mov4 r87, 0 ;
.BB71:
	if4 (r87) goto .BB46 ;
	# emit "<<" operands: t74 (k: 5 t: 4), r6 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t75 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t76 (k: 5 t: 14), t75 (k: 5 t: 14)
	mov4 r88, [r1 + 4] ;
	# emit "+" operands: t77 (k: 5 t: 14), t76 (k: 5 t: 14), t74 (k: 5 t: 4)
	mov4 r89, r88 ;
	add4 r89, r6 * 4 ;
	# emit "*=" operands: t77 (k: 5 t: 14), r5 (k: 4 t: 14)
	mov4 [r89], r5 ;
	# emit "call" operands: r5 (k: 4 t: 14), CombineTrees (k: 9 t: 19)
	call r5, CombineTrees, (r3, r4) ;
	# emit "+" operands: t81 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t82 (k: 5 t: 14), t81 (k: 5 t: 14)
	mov4 r90, [r2 + 4] ;
	# emit "+" operands: t83 (k: 5 t: 14), t82 (k: 5 t: 14), t74 (k: 5 t: 4)
	mov4 r91, r90 ;
	add4 r91, r6 * 4 ;
	# emit "*=" operands: t83 (k: 5 t: 14), 0 (k: 3 t: 14)
	mov4 r92, 0 ;
	mov4 [r91], r92 ;
.BB46:
	# emit "++" operands: r6 (k: 4 t: 4)
	add4 r6, 1 ;
	# emit "<<" operands: t88 (k: 5 t: 4), r7 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r93, r7 ;
	sl4 r93, 1 ;
	# emit "=" operands: r7 (k: 4 t: 4), t88 (k: 5 t: 4)
	mov4 r7, r93 ;
.BB47:
	# emit "*" operands: t89 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r94, [r1] ;
	# emit "<=" operands:  (k: 150292232 t: 56), r7 (k: 4 t: 4), t89 (k: 5 t: 4)
	mov4 r95, r94 ;
	sub4 r95, r7 ;
	# ~x
	mul4 r95, -1 ;
	add4 r95, -1 ;
	# xor
	mov4 r96, r7 ;
	mov4 r97, r7 ;
	or4 r96, r94 ;
	and4 r97, r94 ;
	sub4 r96, r97 ;
	or4 r96, r95 ;
	# ~x
	mov4 r95, r94 ;
	mul4 r95, -1 ;
	add4 r95, -1 ;
	or4 r95, r7 ;
	and4 r95, r96 ;
	sr4 r95, 31 ;
	if4 (r95) goto .BB28 ;
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r79, r80, r81, r82, r83, r84, r85, r86, r87, r88, r89, r90, r91, r92, r93, r94, r95, r96, r97)>

