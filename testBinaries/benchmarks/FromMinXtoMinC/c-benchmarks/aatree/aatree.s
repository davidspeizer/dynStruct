# Code auto-generated by MinxCC

aatree.istr0 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

aatree.istr1 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

aatree.istr2 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

aatree.istr3 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




Initialize {
	# emit "=" operands: r1 (k: 4 t: 14), 0 (k: 3 t: 14)
	mov4 r1, 0 ;
	# emit "!=", r1 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r1) goto .BB1 ;
	# emit "call" operands: r1 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r1, 16 ;
	# emit "!=" operands:  (k: 144413600 t: -120), r1 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r1) goto .BB0 ;
	# emit "&" operands: t1 (k: 5 t: 14), aatree.istr0 (k: 7 t: 18)
	call r2, aatree.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r3, prints, (r2) ;
	# emit "&" operands: t3 (k: 5 t: 14), aatree.istr1 (k: 7 t: 18)
	call r4, aatree.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r5, prints, (r4) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r7, 1 ;
	call r6, mincexit, (r7) ;
.BB0:
	# emit "+" operands: t6 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "+" operands: t8 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*=" operands: t8 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 [r1 + 8], r1 ;
	# emit "*" operands: t10 (k: 5 t: 14), t8 (k: 5 t: 14)
	mov4 r8, [r1 + 8] ;
	# emit "*=" operands: t6 (k: 5 t: 14), t10 (k: 5 t: 14)
	mov4 [r1 + 4], r8 ;
	# emit "+" operands: t12 (k: 5 t: 14), r1 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*=" operands: t12 (k: 5 t: 14), 0 (k: 3 t: 4)
	mov4 r9, 0 ;
	mov4 [r1 + 12], r9 ;
.BB1:
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	ret
} <(), r0, (r1, r2, r3, r4, r5, r6, r7, r8, r9)>

MakeEmpty {
	# emit "==", r1 (k: 4 t: 14), r2 (k: 4 t: 14)
	eq4 r3, r1, r2 ;
	if4 (r3) goto .BB2 ;
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r4, [r1 + 4] ;
	# emit "call", MakeEmpty (k: 9 t: 19)
	call r5, MakeEmpty, (r4, r2) ;
	# emit "+" operands: t3 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t4 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 r6, [r1 + 8] ;
	# emit "call", MakeEmpty (k: 9 t: 19)
	call r7, MakeEmpty, (r6, r2) ;
.BB2:
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7)>

Find {
	# emit "!=" operands:  (k: 144418112 t: -72), r2 (k: 4 t: 14), r3 (k: 4 t: 14)
	eq4 r4, r2, r3 ;
	# outputjz
	if4 (r4) goto .BB25 ;
	mov4 r5, 1 ;
	goto .BB26
.BB25:
	mov4 r5, 0 ;
.BB26:
	if4 (r5) goto .BB3 ;
	# emit "ret" operands: r3 (k: 4 t: 14)
	mov4 r0, r3 ;
	# emit "jmp"
	goto .BB6
.BB3:
	# emit "*" operands: t0 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r6, [r2] ;
	# emit ">=" operands:  (k: 144419360 t: -32), r1 (k: 4 t: 4), t0 (k: 5 t: 4)
	mov4 r7, r1 ;
	sub4 r7, r6 ;
	# ~x
	mul4 r7, -1 ;
	add4 r7, -1 ;
	# xor
	mov4 r8, r6 ;
	mov4 r9, r6 ;
	or4 r8, r1 ;
	and4 r9, r1 ;
	sub4 r8, r9 ;
	or4 r8, r7 ;
	# ~x
	mov4 r7, r1 ;
	mul4 r7, -1 ;
	add4 r7, -1 ;
	or4 r7, r6 ;
	and4 r7, r8 ;
	sr4 r7, 31 ;
	if4 (r7) goto .BB4 ;
	# emit "+" operands: t1 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t2 (k: 5 t: 14), t1 (k: 5 t: 14)
	mov4 r10, [r2 + 4] ;
	# emit "call" operands: t3 (k: 5 t: 14), Find (k: 9 t: 19)
	call r11, Find, (r1, r10, r3) ;
	# emit "ret" operands: t3 (k: 5 t: 14)
	mov4 r0, r11 ;
	# emit "jmp"
	goto .BB6
.BB4:
	# emit "*" operands: t4 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r12, [r2] ;
	# emit "<=" operands:  (k: 144420456 t: -80), r1 (k: 4 t: 4), t4 (k: 5 t: 4)
	mov4 r13, r12 ;
	sub4 r13, r1 ;
	# ~x
	mul4 r13, -1 ;
	add4 r13, -1 ;
	# xor
	mov4 r14, r1 ;
	mov4 r15, r1 ;
	or4 r14, r12 ;
	and4 r15, r12 ;
	sub4 r14, r15 ;
	or4 r14, r13 ;
	# ~x
	mov4 r13, r12 ;
	mul4 r13, -1 ;
	add4 r13, -1 ;
	or4 r13, r1 ;
	and4 r13, r14 ;
	sr4 r13, 31 ;
	if4 (r13) goto .BB5 ;
	# emit "+" operands: t5 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t6 (k: 5 t: 14), t5 (k: 5 t: 14)
	mov4 r16, [r2 + 8] ;
	# emit "call" operands: t7 (k: 5 t: 14), Find (k: 9 t: 19)
	call r17, Find, (r1, r16, r3) ;
	# emit "ret" operands: t7 (k: 5 t: 14)
	mov4 r0, r17 ;
	# emit "jmp"
	goto .BB6
.BB5:
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
.BB6:
	ret
} <(r1, r2, r3), r0, (r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17)>

FindMin {
	# emit "!=" operands:  (k: 144421552 t: 112), r1 (k: 4 t: 14), r2 (k: 4 t: 14)
	eq4 r3, r1, r2 ;
	# outputjz
	if4 (r3) goto .BB27 ;
	mov4 r4, 1 ;
	goto .BB28
.BB27:
	mov4 r4, 0 ;
.BB28:
	if4 (r4) goto .BB7 ;
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	# emit "jmp"
	goto .BB9
.BB7:
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r5, [r1 + 4] ;
	# emit "!=" operands:  (k: 144422296 t: 0), t1 (k: 5 t: 14), r2 (k: 4 t: 14)
	eq4 r6, r5, r2 ;
	# outputjz
	if4 (r6) goto .BB29 ;
	mov4 r7, 1 ;
	goto .BB30
.BB29:
	mov4 r7, 0 ;
.BB30:
	if4 (r7) goto .BB8 ;
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	# emit "jmp"
	goto .BB9
.BB8:
	# emit "+" operands: t2 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t3 (k: 5 t: 14), t2 (k: 5 t: 14)
	mov4 r8, [r1 + 4] ;
	# emit "call" operands: t4 (k: 5 t: 14), FindMin (k: 9 t: 19)
	call r9, FindMin, (r8, r2) ;
	# emit "ret" operands: t4 (k: 5 t: 14)
	mov4 r0, r9 ;
.BB9:
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9)>

FindMax {
	# emit "==", r1 (k: 4 t: 14), r2 (k: 4 t: 14)
	eq4 r3, r1, r2 ;
	if4 (r3) goto .BB12 ;
	# emit "jmp" operands:  (k: 144423624 t: -8)
	goto .BB11
.BB10:
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r4, [r1 + 8] ;
	# emit "=" operands: r1 (k: 4 t: 14), t1 (k: 5 t: 14)
	mov4 r1, r4 ;
.BB11:
	# emit "+" operands: t2 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t3 (k: 5 t: 14), t2 (k: 5 t: 14)
	mov4 r5, [r1 + 8] ;
	# emit "!=" operands:  (k: 144423488 t: 16), t3 (k: 5 t: 14), r2 (k: 4 t: 14)
	eq4 r6, r5, r2 ;
	# outputjz
	if4 (r6) goto .BB31 ;
	mov4 r7, 1 ;
	goto .BB32
.BB31:
	mov4 r7, 0 ;
.BB32:
	if4 (r7) goto .BB10 ;
.BB12:
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7)>

SingleRotateWithLeft {
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r3, [r1 + 4] ;
	# emit "=" operands: r2 (k: 4 t: 14), t1 (k: 5 t: 14)
	mov4 r2, r3 ;
	# emit "+" operands: t3 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t4 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 r4, [r2 + 8] ;
	# emit "*=" operands: t0 (k: 5 t: 14), t4 (k: 5 t: 14)
	mov4 [r1 + 4], r4 ;
	# emit "*=" operands: t3 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 [r2 + 8], r1 ;
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1), r0, (r2, r3, r4)>

SingleRotateWithRight {
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r3, [r1 + 8] ;
	# emit "=" operands: r2 (k: 4 t: 14), t1 (k: 5 t: 14)
	mov4 r2, r3 ;
	# emit "+" operands: t3 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t4 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 r4, [r2 + 4] ;
	# emit "*=" operands: t0 (k: 5 t: 14), t4 (k: 5 t: 14)
	mov4 [r1 + 8], r4 ;
	# emit "*=" operands: t3 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 [r2 + 4], r1 ;
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1), r0, (r2, r3, r4)>

Skew {
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r2, [r1 + 4] ;
	# emit "+" operands: t2 (k: 5 t: 14), t1 (k: 5 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t3 (k: 5 t: 4), t2 (k: 5 t: 14)
	mov4 r3, [r2 + 12] ;
	# emit "+" operands: t4 (k: 5 t: 14), r1 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t5 (k: 5 t: 4), t4 (k: 5 t: 14)
	mov4 r4, [r1 + 12] ;
	# emit "!=", t3 (k: 5 t: 4), t5 (k: 5 t: 4)
	eq4 r5, r3, r4 ;
	# outputjz
	if4 (r5) goto .BB33 ;
	mov4 r6, 1 ;
	goto .BB34
.BB33:
	mov4 r6, 0 ;
.BB34:
	if4 (r6) goto .BB13 ;
	# emit "call" operands: r1 (k: 4 t: 14), SingleRotateWithLeft (k: 9 t: 19)
	call r1, SingleRotateWithLeft, (r1) ;
.BB13:
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	ret
} <(r1), r0, (r2, r3, r4, r5, r6)>

Split {
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r2, [r1 + 8] ;
	# emit "+" operands: t2 (k: 5 t: 14), t1 (k: 5 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t3 (k: 5 t: 14), t2 (k: 5 t: 14)
	mov4 r3, [r2 + 8] ;
	# emit "+" operands: t4 (k: 5 t: 14), t3 (k: 5 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t5 (k: 5 t: 4), t4 (k: 5 t: 14)
	mov4 r4, [r3 + 12] ;
	# emit "+" operands: t6 (k: 5 t: 14), r1 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t7 (k: 5 t: 4), t6 (k: 5 t: 14)
	mov4 r5, [r1 + 12] ;
	# emit "!=", t5 (k: 5 t: 4), t7 (k: 5 t: 4)
	eq4 r6, r4, r5 ;
	# outputjz
	if4 (r6) goto .BB35 ;
	mov4 r7, 1 ;
	goto .BB36
.BB35:
	mov4 r7, 0 ;
.BB36:
	if4 (r7) goto .BB14 ;
	# emit "call" operands: r1 (k: 4 t: 14), SingleRotateWithRight (k: 9 t: 19)
	call r1, SingleRotateWithRight, (r1) ;
	# emit "+" operands: t9 (k: 5 t: 14), r1 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t10 (k: 5 t: 4), t9 (k: 5 t: 14)
	mov4 r8, [r1 + 12] ;
	# emit "+" operands: t11 (k: 5 t: 4), t10 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r9, r8 ;
	add4 r9, 1 ;
	# emit "*=" operands: t9 (k: 5 t: 14), t11 (k: 5 t: 4)
	mov4 [r1 + 12], r9 ;
.BB14:
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9)>

Insert {
	# emit "!=" operands:  (k: 144436784 t: -112), r2 (k: 4 t: 14), r3 (k: 4 t: 14)
	eq4 r4, r2, r3 ;
	# outputjz
	if4 (r4) goto .BB37 ;
	mov4 r5, 1 ;
	goto .BB38
.BB37:
	mov4 r5, 0 ;
.BB38:
	if4 (r5) goto .BB16 ;
	# emit "call" operands: r2 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r2, 16 ;
	# emit "!=" operands:  (k: 144436712 t: -96), r2 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r2) goto .BB15 ;
	# emit "&" operands: t1 (k: 5 t: 14), aatree.istr2 (k: 7 t: 18)
	call r6, aatree.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r7, prints, (r6) ;
	# emit "&" operands: t3 (k: 5 t: 14), aatree.istr3 (k: 7 t: 18)
	call r8, aatree.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r9, prints, (r8) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r11, 1 ;
	call r10, mincexit, (r11) ;
	# emit "jmp"
	goto .BB18
.BB15:
	# emit "*=" operands: r2 (k: 4 t: 14), r1 (k: 4 t: 4)
	mov4 [r2], r1 ;
	# emit "+" operands: t8 (k: 5 t: 14), r2 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*=" operands: t8 (k: 5 t: 14), 1 (k: 3 t: 4)
	mov4 r12, 1 ;
	mov4 [r2 + 12], r12 ;
	# emit "+" operands: t11 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "+" operands: t13 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*=" operands: t13 (k: 5 t: 14), r3 (k: 4 t: 14)
	mov4 [r2 + 8], r3 ;
	# emit "*" operands: t15 (k: 5 t: 14), t13 (k: 5 t: 14)
	mov4 r13, [r2 + 8] ;
	# emit "*=" operands: t11 (k: 5 t: 14), t15 (k: 5 t: 14)
	mov4 [r2 + 4], r13 ;
	# emit "jmp"
	goto .BB18
.BB16:
	# emit "*" operands: t17 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r14, [r2] ;
	# emit ">=" operands:  (k: 144439440 t: -96), r1 (k: 4 t: 4), t17 (k: 5 t: 4)
	mov4 r15, r1 ;
	sub4 r15, r14 ;
	# ~x
	mul4 r15, -1 ;
	add4 r15, -1 ;
	# xor
	mov4 r16, r14 ;
	mov4 r17, r14 ;
	or4 r16, r1 ;
	and4 r17, r1 ;
	sub4 r16, r17 ;
	or4 r16, r15 ;
	# ~x
	mov4 r15, r1 ;
	mul4 r15, -1 ;
	add4 r15, -1 ;
	or4 r15, r14 ;
	and4 r15, r16 ;
	sr4 r15, 31 ;
	if4 (r15) goto .BB17 ;
	# emit "+" operands: t18 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t20 (k: 5 t: 14), t18 (k: 5 t: 14)
	mov4 r18, [r2 + 4] ;
	# emit "call" operands: t21 (k: 5 t: 14), Insert (k: 9 t: 19)
	call r19, Insert, (r1, r18, r3) ;
	# emit "*=" operands: t18 (k: 5 t: 14), t21 (k: 5 t: 14)
	mov4 [r2 + 4], r19 ;
	# emit "jmp"
	goto .BB18
.BB17:
	# emit "*" operands: t23 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r20, [r2] ;
	# emit "<=", r1 (k: 4 t: 4), t23 (k: 5 t: 4)
	mov4 r21, r20 ;
	sub4 r21, r1 ;
	# ~x
	mul4 r21, -1 ;
	add4 r21, -1 ;
	# xor
	mov4 r22, r1 ;
	mov4 r23, r1 ;
	or4 r22, r20 ;
	and4 r23, r20 ;
	sub4 r22, r23 ;
	or4 r22, r21 ;
	# ~x
	mov4 r21, r20 ;
	mul4 r21, -1 ;
	add4 r21, -1 ;
	or4 r21, r1 ;
	and4 r21, r22 ;
	sr4 r21, 31 ;
	if4 (r21) goto .BB18 ;
	# emit "+" operands: t24 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t26 (k: 5 t: 14), t24 (k: 5 t: 14)
	mov4 r24, [r2 + 8] ;
	# emit "call" operands: t27 (k: 5 t: 14), Insert (k: 9 t: 19)
	call r25, Insert, (r1, r24, r3) ;
	# emit "*=" operands: t24 (k: 5 t: 14), t27 (k: 5 t: 14)
	mov4 [r2 + 8], r25 ;
.BB18:
	# emit "call" operands: r2 (k: 4 t: 14), Skew (k: 9 t: 19)
	call r2, Skew, (r2) ;
	# emit "call" operands: r2 (k: 4 t: 14), Split (k: 9 t: 19)
	call r2, Split, (r2) ;
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1, r2, r3), r0, (r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25)>

RemoveHelper {
	# emit "==", r2 (k: 4 t: 14), r3 (k: 4 t: 14)
	eq4 r6, r2, r3 ;
	if4 (r6) goto .BB24 ;
	# emit "=" operands: r5 (k: 4 t: 14), r2 (k: 4 t: 14)
	mov4 r5, r2 ;
	# emit "*" operands: t0 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r7, [r2] ;
	# emit ">=" operands:  (k: 144443088 t: -120), r1 (k: 4 t: 4), t0 (k: 5 t: 4)
	mov4 r8, r1 ;
	sub4 r8, r7 ;
	# ~x
	mul4 r8, -1 ;
	add4 r8, -1 ;
	# xor
	mov4 r9, r7 ;
	mov4 r10, r7 ;
	or4 r9, r1 ;
	and4 r10, r1 ;
	sub4 r9, r10 ;
	or4 r9, r8 ;
	# ~x
	mov4 r8, r1 ;
	mul4 r8, -1 ;
	add4 r8, -1 ;
	or4 r8, r7 ;
	and4 r8, r9 ;
	sr4 r8, 31 ;
	if4 (r8) goto .BB19 ;
	# emit "+" operands: t1 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t3 (k: 5 t: 14), t1 (k: 5 t: 14)
	mov4 r11, [r2 + 4] ;
	# emit "call" operands: t4 (k: 5 t: 14), RemoveHelper (k: 9 t: 19)
	call r12, RemoveHelper, (r1, r11, r3, r4, r5) ;
	# emit "*=" operands: t1 (k: 5 t: 14), t4 (k: 5 t: 14)
	mov4 [r2 + 4], r12 ;
	# emit "jmp" operands:  (k: 144443160 t: 16)
	goto .BB20
.BB19:
	# emit "=" operands: r4 (k: 4 t: 14), r2 (k: 4 t: 14)
	mov4 r4, r2 ;
	# emit "+" operands: t6 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t8 (k: 5 t: 14), t6 (k: 5 t: 14)
	mov4 r13, [r2 + 8] ;
	# emit "call" operands: t9 (k: 5 t: 14), RemoveHelper (k: 9 t: 19)
	call r14, RemoveHelper, (r1, r13, r3, r4, r5) ;
	# emit "*=" operands: t6 (k: 5 t: 14), t9 (k: 5 t: 14)
	mov4 [r2 + 8], r14 ;
.BB20:
	# emit "!=" operands:  (k: 144445480 t: -112), r2 (k: 4 t: 14), r5 (k: 4 t: 14)
	eq4 r15, r2, r5 ;
	# outputjz
	if4 (r15) goto .BB39 ;
	mov4 r16, 1 ;
	goto .BB40
.BB39:
	mov4 r16, 0 ;
.BB40:
	if4 (r16) goto .BB21 ;
	# emit "==", r4 (k: 4 t: 14), r3 (k: 4 t: 14)
	eq4 r17, r4, r3 ;
	if4 (r17) goto .BB24 ;
	# emit "*" operands: t11 (k: 5 t: 4), r4 (k: 4 t: 14)
	mov4 r18, [r4] ;
	# emit "!=", r1 (k: 4 t: 4), t11 (k: 5 t: 4)
	eq4 r19, r1, r18 ;
	# outputjz
	if4 (r19) goto .BB41 ;
	mov4 r20, 1 ;
	goto .BB42
.BB41:
	mov4 r20, 0 ;
.BB42:
	if4 (r20) goto .BB24 ;
	# emit "*" operands: t13 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r21, [r2] ;
	# emit "*=" operands: r4 (k: 4 t: 14), t13 (k: 5 t: 4)
	mov4 [r4], r21 ;
	# emit "=" operands: r4 (k: 4 t: 14), r3 (k: 4 t: 14)
	mov4 r4, r3 ;
	# emit "+" operands: t15 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t16 (k: 5 t: 14), t15 (k: 5 t: 14)
	mov4 r22, [r2 + 8] ;
	# emit "=" operands: r2 (k: 4 t: 14), t16 (k: 5 t: 14)
	mov4 r2, r22 ;
	# emit "jmp"
	goto .BB24
.BB21:
	# emit "+" operands: t17 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t18 (k: 5 t: 14), t17 (k: 5 t: 14)
	mov4 r23, [r2 + 4] ;
	# emit "+" operands: t19 (k: 5 t: 14), t18 (k: 5 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t20 (k: 5 t: 4), t19 (k: 5 t: 14)
	mov4 r24, [r23 + 12] ;
	# emit "+" operands: t21 (k: 5 t: 14), r2 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t22 (k: 5 t: 4), t21 (k: 5 t: 14)
	mov4 r25, [r2 + 12] ;
	# emit "+" operands: t23 (k: 5 t: 4), t22 (k: 5 t: 4), -1 (k: 3 t: 4)
	mov4 r26, r25 ;
	add4 r26, -1 ;
	# emit "<" operands:  (k: 144446864 t: -8), t20 (k: 5 t: 4), t23 (k: 5 t: 4)
	mov4 r27, r24 ;
	sub4 r27, r26 ;
	# xor
	mov4 r28, r24 ;
	mov4 r30, r24 ;
	or4 r28, r26 ;
	and4 r30, r26 ;
	sub4 r28, r30 ;
	# xor
	mov4 r29, r27 ;
	mov4 r31, r27 ;
	or4 r29, r24 ;
	and4 r31, r24 ;
	sub4 r29, r31 ;
	and4 r28, r29 ;
	# xor
	mov4 r29, r27 ;
	mov4 r32, r27 ;
	or4 r29, r28 ;
	and4 r32, r28 ;
	sub4 r29, r32 ;
	sr4 r29, 31 ;
	if4 (r29) goto .BB22 ;
	# emit "+" operands: t24 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t25 (k: 5 t: 14), t24 (k: 5 t: 14)
	mov4 r33, [r2 + 8] ;
	# emit "+" operands: t26 (k: 5 t: 14), t25 (k: 5 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t27 (k: 5 t: 4), t26 (k: 5 t: 14)
	mov4 r34, [r33 + 12] ;
	# emit "+" operands: t28 (k: 5 t: 14), r2 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t29 (k: 5 t: 4), t28 (k: 5 t: 14)
	mov4 r35, [r2 + 12] ;
	# emit "+" operands: t30 (k: 5 t: 4), t29 (k: 5 t: 4), -1 (k: 3 t: 4)
	mov4 r36, r35 ;
	add4 r36, -1 ;
	# emit ">=", t27 (k: 5 t: 4), t30 (k: 5 t: 4)
	mov4 r37, r34 ;
	sub4 r37, r36 ;
	# ~x
	mul4 r37, -1 ;
	add4 r37, -1 ;
	# xor
	mov4 r38, r36 ;
	mov4 r39, r36 ;
	or4 r38, r34 ;
	and4 r39, r34 ;
	sub4 r38, r39 ;
	or4 r38, r37 ;
	# ~x
	mov4 r37, r34 ;
	mul4 r37, -1 ;
	add4 r37, -1 ;
	or4 r37, r36 ;
	and4 r37, r38 ;
	sr4 r37, 31 ;
	if4 (r37) goto .BB24 ;
.BB22:
	# emit "+" operands: t31 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t32 (k: 5 t: 14), t31 (k: 5 t: 14)
	mov4 r40, [r2 + 8] ;
	# emit "+" operands: t33 (k: 5 t: 14), t32 (k: 5 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t34 (k: 5 t: 4), t33 (k: 5 t: 14)
	mov4 r41, [r40 + 12] ;
	# emit "+" operands: t35 (k: 5 t: 14), r2 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t36 (k: 5 t: 4), t35 (k: 5 t: 14)
	mov4 r42, [r2 + 12] ;
	# emit "+" operands: t37 (k: 5 t: 4), t36 (k: 5 t: 4), -1 (k: 3 t: 4)
	mov4 r43, r42 ;
	add4 r43, -1 ;
	# emit "*=" operands: t35 (k: 5 t: 14), t37 (k: 5 t: 4)
	mov4 [r2 + 12], r43 ;
	# emit "*" operands: t38 (k: 5 t: 4), t35 (k: 5 t: 14)
	mov4 r44, [r2 + 12] ;
	# emit "<=" operands:  (k: 144449016 t: -104), t34 (k: 5 t: 4), t38 (k: 5 t: 4)
	mov4 r45, r44 ;
	sub4 r45, r41 ;
	# ~x
	mul4 r45, -1 ;
	add4 r45, -1 ;
	# xor
	mov4 r46, r41 ;
	mov4 r47, r41 ;
	or4 r46, r44 ;
	and4 r47, r44 ;
	sub4 r46, r47 ;
	or4 r46, r45 ;
	# ~x
	mov4 r45, r44 ;
	mul4 r45, -1 ;
	add4 r45, -1 ;
	or4 r45, r41 ;
	and4 r45, r46 ;
	sr4 r45, 31 ;
	if4 (r45) goto .BB23 ;
	# emit "+" operands: t39 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t40 (k: 5 t: 14), t39 (k: 5 t: 14)
	mov4 r48, [r2 + 8] ;
	# emit "+" operands: t41 (k: 5 t: 14), t40 (k: 5 t: 14), 12 (k: 3 t: 4)
	# emit "+" operands: t43 (k: 5 t: 14), r2 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t44 (k: 5 t: 4), t43 (k: 5 t: 14)
	mov4 r49, [r2 + 12] ;
	# emit "*=" operands: t41 (k: 5 t: 14), t44 (k: 5 t: 4)
	mov4 [r48 + 12], r49 ;
.BB23:
	# emit "call" operands: r2 (k: 4 t: 14), Skew (k: 9 t: 19)
	call r2, Skew, (r2) ;
	# emit "+" operands: t47 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t49 (k: 5 t: 14), t47 (k: 5 t: 14)
	mov4 r50, [r2 + 8] ;
	# emit "call" operands: t50 (k: 5 t: 14), Skew (k: 9 t: 19)
	call r51, Skew, (r50) ;
	# emit "*=" operands: t47 (k: 5 t: 14), t50 (k: 5 t: 14)
	mov4 [r2 + 8], r51 ;
	# emit "*" operands: t52 (k: 5 t: 14), t47 (k: 5 t: 14)
	mov4 r52, [r2 + 8] ;
	# emit "+" operands: t53 (k: 5 t: 14), t52 (k: 5 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t55 (k: 5 t: 14), t47 (k: 5 t: 14)
	mov4 r53, [r2 + 8] ;
	# emit "+" operands: t56 (k: 5 t: 14), t55 (k: 5 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t57 (k: 5 t: 14), t56 (k: 5 t: 14)
	mov4 r54, [r53 + 8] ;
	# emit "call" operands: t58 (k: 5 t: 14), Skew (k: 9 t: 19)
	call r55, Skew, (r54) ;
	# emit "*=" operands: t53 (k: 5 t: 14), t58 (k: 5 t: 14)
	mov4 [r52 + 8], r55 ;
	# emit "call" operands: r2 (k: 4 t: 14), Split (k: 9 t: 19)
	call r2, Split, (r2) ;
	# emit "+" operands: t61 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t63 (k: 5 t: 14), t61 (k: 5 t: 14)
	mov4 r56, [r2 + 8] ;
	# emit "call" operands: t64 (k: 5 t: 14), Split (k: 9 t: 19)
	call r57, Split, (r56) ;
	# emit "*=" operands: t61 (k: 5 t: 14), t64 (k: 5 t: 14)
	mov4 [r2 + 8], r57 ;
.BB24:
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1, r2, r3, r4, r5), r0, (r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57)>

Remove {
	# emit "call" operands: t0 (k: 5 t: 14), RemoveHelper (k: 9 t: 19)
	call r6, RemoveHelper, (r1, r2, r3, r4, r5) ;
	# emit "ret" operands: t0 (k: 5 t: 14)
	mov4 r0, r6 ;
	ret
} <(r1, r2, r3), r0, (r4, r5, r6)>

Retrieve {
	# emit "*" operands: t0 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r2, [r1] ;
	# emit "ret" operands: t0 (k: 5 t: 4)
	mov4 r0, r2 ;
	ret
} <(r1), r0, (r2)>

