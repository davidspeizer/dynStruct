# Code auto-generated by MinxCC

testavl.istr0 {
	mov4 r1, 10 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testavl.istr1 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testavl.istr2 {
	mov4 r1, 8 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 77 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testavl.istr3 {
	mov4 r1, 10 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 44 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 77 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 120 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testavl.istr4 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




main {
	# emit "=" operands: r6 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r6, 0 ;
	# emit "call" operands: r3 (k: 4 t: 14), MakeEmpty (k: 9 t: 19)
	mov4 r7, 0 ;
	call r3, MakeEmpty, (r7) ;
	# emit "=" operands: r5 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "jmp" operands:  (k: 156747656 t: 96)
	goto .BB1
.BB0:
	# emit "call" operands: r3 (k: 4 t: 14), Insert (k: 9 t: 19)
	call r3, Insert, (r6, r3) ;
	# emit "++" operands: r5 (k: 4 t: 4)
	add4 r5, 1 ;
	# emit "+" operands: t4 (k: 5 t: 4), r6 (k: 4 t: 4), 7 (k: 3 t: 4)
	mov4 r8, r6 ;
	add4 r8, 7 ;
	# emit "%" operands: t5 (k: 5 t: 4), t4 (k: 5 t: 4), 50 (k: 3 t: 4)
	mov4 r10, r8 ;
	div4 r10, 50 ;
	mul4 r10, 50 ;
	mov4 r9, r8 ;
	sub4 r9, r10 ;
	# emit "=" operands: r6 (k: 4 t: 4), t5 (k: 5 t: 4)
	mov4 r6, r9 ;
.BB1:
	# emit "<" operands:  (k: 156747168 t: 24), r5 (k: 4 t: 4), 50 (k: 3 t: 4)
	mov4 r11, r5 ;
	sub4 r11, 50 ;
	# xor
	mov4 r12, r5 ;
	mov4 r14, r5 ;
	or4 r12, 50 ;
	and4 r14, 50 ;
	sub4 r12, r14 ;
	# xor
	mov4 r13, r11 ;
	mov4 r15, r11 ;
	or4 r13, r5 ;
	and4 r15, r5 ;
	sub4 r13, r15 ;
	and4 r12, r13 ;
	# xor
	mov4 r13, r11 ;
	mov4 r16, r11 ;
	or4 r13, r12 ;
	and4 r16, r12 ;
	sub4 r13, r16 ;
	sr4 r13, 31 ;
	if4 (r13) goto .BB0 ;
	# emit "=" operands: r5 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "jmp" operands:  (k: 156749456 t: -8)
	goto .BB5
.BB2:
	# emit "call" operands: r4 (k: 4 t: 14), Find (k: 9 t: 19)
	call r4, Find, (r5, r3) ;
	# emit "==" operands:  (k: 156749600 t: -112), r4 (k: 4 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r4) goto .BB6 ;
	mov4 r17, 1 ;
	goto .BB7
.BB6:
	mov4 r17, 0 ;
.BB7:
	if4 (r17) goto .BB3 ;
	# emit "call" operands: t7 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r18, Retrieve, (r4) ;
	# emit "==" operands:  (k: 156749528 t: -80), t7 (k: 5 t: 4), r5 (k: 4 t: 4)
	eq4 r19, r18, r5 ;
	if4 (r19) goto .BB4 ;
.BB3:
	# emit "&" operands: t8 (k: 5 t: 14), testavl.istr0 (k: 7 t: 18)
	call r20, testavl.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r21, prints, (r20) ;
	# emit "call", print32 (k: 9 t: 19)
	call r22, print32, (r5) ;
	# emit "&" operands: t11 (k: 5 t: 14), testavl.istr1 (k: 7 t: 18)
	call r23, testavl.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r24, prints, (r23) ;
.BB4:
	# emit "++" operands: r5 (k: 4 t: 4)
	add4 r5, 1 ;
.BB5:
	# emit "<" operands:  (k: 156747872 t: 32), r5 (k: 4 t: 4), 50 (k: 3 t: 4)
	mov4 r25, r5 ;
	sub4 r25, 50 ;
	# xor
	mov4 r26, r5 ;
	mov4 r28, r5 ;
	or4 r26, 50 ;
	and4 r28, 50 ;
	sub4 r26, r28 ;
	# xor
	mov4 r27, r25 ;
	mov4 r29, r25 ;
	or4 r27, r5 ;
	and4 r29, r5 ;
	sub4 r27, r29 ;
	and4 r26, r27 ;
	# xor
	mov4 r27, r25 ;
	mov4 r30, r25 ;
	or4 r27, r26 ;
	and4 r30, r26 ;
	sub4 r27, r30 ;
	sr4 r27, 31 ;
	if4 (r27) goto .BB2 ;
	# emit "&" operands: t15 (k: 5 t: 14), testavl.istr2 (k: 7 t: 18)
	call r31, testavl.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r32, prints, (r31) ;
	# emit "call" operands: t17 (k: 5 t: 14), FindMin (k: 9 t: 19)
	call r33, FindMin, (r3) ;
	# emit "call" operands: t18 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r34, Retrieve, (r33) ;
	# emit "call", print32 (k: 9 t: 19)
	call r35, print32, (r34) ;
	# emit "&" operands: t20 (k: 5 t: 14), testavl.istr3 (k: 7 t: 18)
	call r36, testavl.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r37, prints, (r36) ;
	# emit "call" operands: t22 (k: 5 t: 14), FindMax (k: 9 t: 19)
	call r38, FindMax, (r3) ;
	# emit "call" operands: t23 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r39, Retrieve, (r38) ;
	# emit "call", print32 (k: 9 t: 19)
	call r40, print32, (r39) ;
	# emit "&" operands: t25 (k: 5 t: 14), testavl.istr4 (k: 7 t: 18)
	call r41, testavl.istr4, () ;
	# emit "call", prints (k: 9 t: 19)
	call r42, prints, (r41) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42)>

# Code auto-generated by MinxCC

avltree.istr0 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

avltree.istr1 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

avltree.istr2 {
	mov4 r1, 32 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 83 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 59 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 68 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 100 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 59 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

avltree.istr3 {
	mov4 r1, 10 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




MakeEmpty {
	# emit "==", r1 (k: 4 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r1) goto .BB22 ;
	mov4 r2, 1 ;
	goto .BB23
.BB22:
	mov4 r2, 0 ;
.BB23:
	if4 (r2) goto .BB0 ;
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r3, [r1 + 4] ;
	# emit "call", MakeEmpty (k: 9 t: 19)
	call r4, MakeEmpty, (r3) ;
	# emit "+" operands: t3 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t4 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 r5, [r1 + 8] ;
	# emit "call", MakeEmpty (k: 9 t: 19)
	call r6, MakeEmpty, (r5) ;
.BB0:
	# emit "ret" operands: 0 (k: 3 t: 14)
	mov4 r0, 0 ;
	ret
} <(r1), r0, (r2, r3, r4, r5, r6)>

Find {
	# emit "!=" operands:  (k: 158007312 t: -120), r2 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r2) goto .BB1 ;
	# emit "ret" operands: 0 (k: 3 t: 14)
	mov4 r0, 0 ;
	# emit "jmp"
	goto .BB4
.BB1:
	# emit "*" operands: t0 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r3, [r2] ;
	# emit ">=" operands:  (k: 158008608 t: -32), r1 (k: 4 t: 4), t0 (k: 5 t: 4)
	mov4 r4, r1 ;
	sub4 r4, r3 ;
	# ~x
	mul4 r4, -1 ;
	add4 r4, -1 ;
	# xor
	mov4 r5, r3 ;
	mov4 r6, r3 ;
	or4 r5, r1 ;
	and4 r6, r1 ;
	sub4 r5, r6 ;
	or4 r5, r4 ;
	# ~x
	mov4 r4, r1 ;
	mul4 r4, -1 ;
	add4 r4, -1 ;
	or4 r4, r3 ;
	and4 r4, r5 ;
	sr4 r4, 31 ;
	if4 (r4) goto .BB2 ;
	# emit "+" operands: t1 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t2 (k: 5 t: 14), t1 (k: 5 t: 14)
	mov4 r7, [r2 + 4] ;
	# emit "call" operands: t3 (k: 5 t: 14), Find (k: 9 t: 19)
	call r8, Find, (r1, r7) ;
	# emit "ret" operands: t3 (k: 5 t: 14)
	mov4 r0, r8 ;
	# emit "jmp"
	goto .BB4
.BB2:
	# emit "*" operands: t4 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r9, [r2] ;
	# emit "<=" operands:  (k: 158009664 t: -128), r1 (k: 4 t: 4), t4 (k: 5 t: 4)
	mov4 r10, r9 ;
	sub4 r10, r1 ;
	# ~x
	mul4 r10, -1 ;
	add4 r10, -1 ;
	# xor
	mov4 r11, r1 ;
	mov4 r12, r1 ;
	or4 r11, r9 ;
	and4 r12, r9 ;
	sub4 r11, r12 ;
	or4 r11, r10 ;
	# ~x
	mov4 r10, r9 ;
	mul4 r10, -1 ;
	add4 r10, -1 ;
	or4 r10, r1 ;
	and4 r10, r11 ;
	sr4 r10, 31 ;
	if4 (r10) goto .BB3 ;
	# emit "+" operands: t5 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t6 (k: 5 t: 14), t5 (k: 5 t: 14)
	mov4 r13, [r2 + 8] ;
	# emit "call" operands: t7 (k: 5 t: 14), Find (k: 9 t: 19)
	call r14, Find, (r1, r13) ;
	# emit "ret" operands: t7 (k: 5 t: 14)
	mov4 r0, r14 ;
	# emit "jmp"
	goto .BB4
.BB3:
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
.BB4:
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14)>

FindMin {
	# emit "!=" operands:  (k: 158010784 t: 96), r1 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r1) goto .BB5 ;
	# emit "ret" operands: 0 (k: 3 t: 14)
	mov4 r0, 0 ;
	# emit "jmp"
	goto .BB7
.BB5:
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r2, [r1 + 4] ;
	# emit "!=" operands:  (k: 158011528 t: -16), t1 (k: 5 t: 14), 0 (k: 3 t: 14)
	if4 (r2) goto .BB6 ;
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	# emit "jmp"
	goto .BB7
.BB6:
	# emit "+" operands: t2 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t3 (k: 5 t: 14), t2 (k: 5 t: 14)
	mov4 r3, [r1 + 4] ;
	# emit "call" operands: t4 (k: 5 t: 14), FindMin (k: 9 t: 19)
	call r4, FindMin, (r3) ;
	# emit "ret" operands: t4 (k: 5 t: 14)
	mov4 r0, r4 ;
.BB7:
	ret
} <(r1), r0, (r2, r3, r4)>

FindMax {
	# emit "==", r1 (k: 4 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r1) goto .BB24 ;
	mov4 r2, 1 ;
	goto .BB25
.BB24:
	mov4 r2, 0 ;
.BB25:
	if4 (r2) goto .BB10 ;
	# emit "jmp" operands:  (k: 158012848 t: -32)
	goto .BB9
.BB8:
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r3, [r1 + 8] ;
	# emit "=" operands: r1 (k: 4 t: 14), t1 (k: 5 t: 14)
	mov4 r1, r3 ;
.BB9:
	# emit "+" operands: t2 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t3 (k: 5 t: 14), t2 (k: 5 t: 14)
	mov4 r4, [r1 + 8] ;
	# emit "!=" operands:  (k: 158012712 t: -8), t3 (k: 5 t: 14), 0 (k: 3 t: 14)
	if4 (r4) goto .BB8 ;
.BB10:
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	ret
} <(r1), r0, (r2, r3, r4)>

Height {
	# emit "!=" operands:  (k: 158014728 t: 32), r1 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r1) goto .BB11 ;
	# emit "ret" operands: -1 (k: 3 t: 4)
	mov4 r0, -1 ;
	# emit "jmp"
	goto .BB12
.BB11:
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 4), t0 (k: 5 t: 14)
	mov4 r2, [r1 + 12] ;
	# emit "ret" operands: t1 (k: 5 t: 4)
	mov4 r0, r2 ;
.BB12:
	ret
} <(r1), r0, (r2)>

Max {
	# emit ">" operands:  (k: 158015768 t: 96), r1 (k: 4 t: 4), r2 (k: 4 t: 4)
	mov4 r3, r2 ;
	sub4 r3, r1 ;
	# xor
	mov4 r4, r2 ;
	mov4 r6, r2 ;
	or4 r4, r1 ;
	and4 r6, r1 ;
	sub4 r4, r6 ;
	# xor
	mov4 r5, r3 ;
	mov4 r7, r3 ;
	or4 r5, r2 ;
	and4 r7, r2 ;
	sub4 r5, r7 ;
	and4 r4, r5 ;
	# xor
	mov4 r5, r3 ;
	mov4 r8, r3 ;
	or4 r5, r4 ;
	and4 r8, r4 ;
	sub4 r5, r8 ;
	sr4 r5, 31 ;
	if4 (r5) goto .BB13 ;
	# emit "=" operands: t0 (k: 5 t: 4), r2 (k: 4 t: 4)
	mov4 r9, r2 ;
	# emit "jmp"
	goto .BB14
.BB13:
	# emit "=" operands: t0 (k: 5 t: 4), r1 (k: 4 t: 4)
	mov4 r9, r1 ;
.BB14:
	# emit "ret" operands: t0 (k: 5 t: 4)
	mov4 r0, r9 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9)>

SingleRotateWithLeft {
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r3, [r1 + 4] ;
	# emit "=" operands: r2 (k: 4 t: 14), t1 (k: 5 t: 14)
	mov4 r2, r3 ;
	# emit "+" operands: t3 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t4 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 r4, [r2 + 8] ;
	# emit "*=" operands: t0 (k: 5 t: 14), t4 (k: 5 t: 14)
	mov4 [r1 + 4], r4 ;
	# emit "*=" operands: t3 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 [r2 + 8], r1 ;
	# emit "+" operands: t8 (k: 5 t: 14), r1 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t10 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r5, [r1 + 4] ;
	# emit "call" operands: t11 (k: 5 t: 4), Height (k: 9 t: 19)
	call r6, Height, (r5) ;
	# emit "+" operands: t12 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t13 (k: 5 t: 14), t12 (k: 5 t: 14)
	mov4 r7, [r1 + 8] ;
	# emit "call" operands: t14 (k: 5 t: 4), Height (k: 9 t: 19)
	call r8, Height, (r7) ;
	# emit "call" operands: t15 (k: 5 t: 4), Max (k: 9 t: 19)
	call r9, Max, (r6, r8) ;
	# emit "+" operands: t16 (k: 5 t: 4), t15 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r10, r9 ;
	add4 r10, 1 ;
	# emit "*=" operands: t8 (k: 5 t: 14), t16 (k: 5 t: 4)
	mov4 [r1 + 12], r10 ;
	# emit "+" operands: t18 (k: 5 t: 14), r2 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "+" operands: t20 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t21 (k: 5 t: 14), t20 (k: 5 t: 14)
	mov4 r11, [r2 + 4] ;
	# emit "call" operands: t22 (k: 5 t: 4), Height (k: 9 t: 19)
	call r12, Height, (r11) ;
	# emit "*" operands: t23 (k: 5 t: 4), t8 (k: 5 t: 14)
	mov4 r13, [r1 + 12] ;
	# emit "call" operands: t24 (k: 5 t: 4), Max (k: 9 t: 19)
	call r14, Max, (r12, r13) ;
	# emit "+" operands: t25 (k: 5 t: 4), t24 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r15, r14 ;
	add4 r15, 1 ;
	# emit "*=" operands: t18 (k: 5 t: 14), t25 (k: 5 t: 4)
	mov4 [r2 + 12], r15 ;
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15)>

SingleRotateWithRight {
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r3, [r1 + 8] ;
	# emit "=" operands: r2 (k: 4 t: 14), t1 (k: 5 t: 14)
	mov4 r2, r3 ;
	# emit "+" operands: t3 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t4 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 r4, [r2 + 4] ;
	# emit "*=" operands: t0 (k: 5 t: 14), t4 (k: 5 t: 14)
	mov4 [r1 + 8], r4 ;
	# emit "*=" operands: t3 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 [r2 + 4], r1 ;
	# emit "+" operands: t8 (k: 5 t: 14), r1 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "+" operands: t10 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t11 (k: 5 t: 14), t10 (k: 5 t: 14)
	mov4 r5, [r1 + 4] ;
	# emit "call" operands: t12 (k: 5 t: 4), Height (k: 9 t: 19)
	call r6, Height, (r5) ;
	# emit "*" operands: t13 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r7, [r1 + 8] ;
	# emit "call" operands: t14 (k: 5 t: 4), Height (k: 9 t: 19)
	call r8, Height, (r7) ;
	# emit "call" operands: t15 (k: 5 t: 4), Max (k: 9 t: 19)
	call r9, Max, (r6, r8) ;
	# emit "+" operands: t16 (k: 5 t: 4), t15 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r10, r9 ;
	add4 r10, 1 ;
	# emit "*=" operands: t8 (k: 5 t: 14), t16 (k: 5 t: 4)
	mov4 [r1 + 12], r10 ;
	# emit "+" operands: t18 (k: 5 t: 14), r2 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "+" operands: t20 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t21 (k: 5 t: 14), t20 (k: 5 t: 14)
	mov4 r11, [r2 + 8] ;
	# emit "call" operands: t22 (k: 5 t: 4), Height (k: 9 t: 19)
	call r12, Height, (r11) ;
	# emit "*" operands: t23 (k: 5 t: 4), t8 (k: 5 t: 14)
	mov4 r13, [r1 + 12] ;
	# emit "call" operands: t24 (k: 5 t: 4), Max (k: 9 t: 19)
	call r14, Max, (r12, r13) ;
	# emit "+" operands: t25 (k: 5 t: 4), t24 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r15, r14 ;
	add4 r15, 1 ;
	# emit "*=" operands: t18 (k: 5 t: 14), t25 (k: 5 t: 4)
	mov4 [r2 + 12], r15 ;
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15)>

DoubleRotateWithLeft {
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t2 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r2, [r1 + 4] ;
	# emit "call" operands: t3 (k: 5 t: 14), SingleRotateWithRight (k: 9 t: 19)
	call r3, SingleRotateWithRight, (r2) ;
	# emit "*=" operands: t0 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 [r1 + 4], r3 ;
	# emit "call" operands: t5 (k: 5 t: 14), SingleRotateWithLeft (k: 9 t: 19)
	call r4, SingleRotateWithLeft, (r1) ;
	# emit "ret" operands: t5 (k: 5 t: 14)
	mov4 r0, r4 ;
	ret
} <(r1), r0, (r2, r3, r4)>

DoubleRotateWithRight {
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t2 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r2, [r1 + 8] ;
	# emit "call" operands: t3 (k: 5 t: 14), SingleRotateWithLeft (k: 9 t: 19)
	call r3, SingleRotateWithLeft, (r2) ;
	# emit "*=" operands: t0 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 [r1 + 8], r3 ;
	# emit "call" operands: t5 (k: 5 t: 14), SingleRotateWithRight (k: 9 t: 19)
	call r4, SingleRotateWithRight, (r1) ;
	# emit "ret" operands: t5 (k: 5 t: 14)
	mov4 r0, r4 ;
	ret
} <(r1), r0, (r2, r3, r4)>

Insert {
	# emit "!=" operands:  (k: 158032328 t: 80), r2 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r2) goto .BB16 ;
	# emit "call" operands: r2 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r2, 16 ;
	# emit "!=" operands:  (k: 158032256 t: 32), r2 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r2) goto .BB15 ;
	# emit "&" operands: t1 (k: 5 t: 14), avltree.istr0 (k: 7 t: 18)
	call r3, avltree.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r4, prints, (r3) ;
	# emit "&" operands: t3 (k: 5 t: 14), avltree.istr1 (k: 7 t: 18)
	call r5, avltree.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r6, prints, (r5) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r8, 1 ;
	call r7, mincexit, (r8) ;
	# emit "jmp"
	goto .BB21
.BB15:
	# emit "*=" operands: r2 (k: 4 t: 14), r1 (k: 4 t: 4)
	mov4 [r2], r1 ;
	# emit "+" operands: t8 (k: 5 t: 14), r2 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*=" operands: t8 (k: 5 t: 14), 0 (k: 3 t: 4)
	mov4 r9, 0 ;
	mov4 [r2 + 12], r9 ;
	# emit "+" operands: t11 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "+" operands: t13 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*=" operands: t13 (k: 5 t: 14), 0 (k: 3 t: 14)
	mov4 r10, 0 ;
	mov4 [r2 + 8], r10 ;
	# emit "*" operands: t15 (k: 5 t: 14), t13 (k: 5 t: 14)
	mov4 r11, [r2 + 8] ;
	# emit "*=" operands: t11 (k: 5 t: 14), t15 (k: 5 t: 14)
	mov4 [r2 + 4], r11 ;
	# emit "jmp"
	goto .BB21
.BB16:
	# emit "*" operands: t17 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r12, [r2] ;
	# emit ">=" operands:  (k: 158037216 t: 32), r1 (k: 4 t: 4), t17 (k: 5 t: 4)
	mov4 r13, r1 ;
	sub4 r13, r12 ;
	# ~x
	mul4 r13, -1 ;
	add4 r13, -1 ;
	# xor
	mov4 r14, r12 ;
	mov4 r15, r12 ;
	or4 r14, r1 ;
	and4 r15, r1 ;
	sub4 r14, r15 ;
	or4 r14, r13 ;
	# ~x
	mov4 r13, r1 ;
	mul4 r13, -1 ;
	add4 r13, -1 ;
	or4 r13, r12 ;
	and4 r13, r14 ;
	sr4 r13, 31 ;
	if4 (r13) goto .BB19 ;
	# emit "+" operands: t18 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t20 (k: 5 t: 14), t18 (k: 5 t: 14)
	mov4 r16, [r2 + 4] ;
	# emit "call" operands: t21 (k: 5 t: 14), Insert (k: 9 t: 19)
	call r17, Insert, (r1, r16) ;
	# emit "*=" operands: t18 (k: 5 t: 14), t21 (k: 5 t: 14)
	mov4 [r2 + 4], r17 ;
	# emit "*" operands: t23 (k: 5 t: 14), t18 (k: 5 t: 14)
	mov4 r18, [r2 + 4] ;
	# emit "call" operands: t24 (k: 5 t: 4), Height (k: 9 t: 19)
	call r19, Height, (r18) ;
	# emit "+" operands: t25 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t26 (k: 5 t: 14), t25 (k: 5 t: 14)
	mov4 r20, [r2 + 8] ;
	# emit "call" operands: t27 (k: 5 t: 4), Height (k: 9 t: 19)
	call r21, Height, (r20) ;
	# emit "-" operands: t28 (k: 5 t: 4), t24 (k: 5 t: 4), t27 (k: 5 t: 4)
	mov4 r22, r19 ;
	sub4 r22, r21 ;
	# emit "!=", t28 (k: 5 t: 4), 2 (k: 3 t: 4)
	mov4 r24, 2 ;
	eq4 r23, r22, r24 ;
	# outputjz
	if4 (r23) goto .BB26 ;
	mov4 r25, 1 ;
	goto .BB27
.BB26:
	mov4 r25, 0 ;
.BB27:
	if4 (r25) goto .BB21 ;
	# emit "+" operands: t29 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t30 (k: 5 t: 14), t29 (k: 5 t: 14)
	mov4 r26, [r2 + 4] ;
	# emit "*" operands: t31 (k: 5 t: 4), t30 (k: 5 t: 14)
	mov4 r27, [r26] ;
	# emit ">=" operands:  (k: 158037288 t: -32), r1 (k: 4 t: 4), t31 (k: 5 t: 4)
	mov4 r28, r1 ;
	sub4 r28, r27 ;
	# ~x
	mul4 r28, -1 ;
	add4 r28, -1 ;
	# xor
	mov4 r29, r27 ;
	mov4 r30, r27 ;
	or4 r29, r1 ;
	and4 r30, r1 ;
	sub4 r29, r30 ;
	or4 r29, r28 ;
	# ~x
	mov4 r28, r1 ;
	mul4 r28, -1 ;
	add4 r28, -1 ;
	or4 r28, r27 ;
	and4 r28, r29 ;
	sr4 r28, 31 ;
	if4 (r28) goto .BB17 ;
	# emit "call" operands: r2 (k: 4 t: 14), SingleRotateWithLeft (k: 9 t: 19)
	call r2, SingleRotateWithLeft, (r2) ;
	# emit "jmp" operands:  (k: 158037360 t: 32)
	goto .BB18
.BB17:
	# emit "call" operands: r2 (k: 4 t: 14), DoubleRotateWithLeft (k: 9 t: 19)
	call r2, DoubleRotateWithLeft, (r2) ;
.BB18:
	# emit "jmp"
	goto .BB21
.BB19:
	# emit "*" operands: t34 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r31, [r2] ;
	# emit "<=", r1 (k: 4 t: 4), t34 (k: 5 t: 4)
	mov4 r32, r31 ;
	sub4 r32, r1 ;
	# ~x
	mul4 r32, -1 ;
	add4 r32, -1 ;
	# xor
	mov4 r33, r1 ;
	mov4 r34, r1 ;
	or4 r33, r31 ;
	and4 r34, r31 ;
	sub4 r33, r34 ;
	or4 r33, r32 ;
	# ~x
	mov4 r32, r31 ;
	mul4 r32, -1 ;
	add4 r32, -1 ;
	or4 r32, r1 ;
	and4 r32, r33 ;
	sr4 r32, 31 ;
	if4 (r32) goto .BB21 ;
	# emit "+" operands: t35 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t37 (k: 5 t: 14), t35 (k: 5 t: 14)
	mov4 r35, [r2 + 8] ;
	# emit "call" operands: t38 (k: 5 t: 14), Insert (k: 9 t: 19)
	call r36, Insert, (r1, r35) ;
	# emit "*=" operands: t35 (k: 5 t: 14), t38 (k: 5 t: 14)
	mov4 [r2 + 8], r36 ;
	# emit "*" operands: t40 (k: 5 t: 14), t35 (k: 5 t: 14)
	mov4 r37, [r2 + 8] ;
	# emit "call" operands: t41 (k: 5 t: 4), Height (k: 9 t: 19)
	call r38, Height, (r37) ;
	# emit "+" operands: t42 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t43 (k: 5 t: 14), t42 (k: 5 t: 14)
	mov4 r39, [r2 + 4] ;
	# emit "call" operands: t44 (k: 5 t: 4), Height (k: 9 t: 19)
	call r40, Height, (r39) ;
	# emit "-" operands: t45 (k: 5 t: 4), t41 (k: 5 t: 4), t44 (k: 5 t: 4)
	mov4 r41, r38 ;
	sub4 r41, r40 ;
	# emit "!=", t45 (k: 5 t: 4), 2 (k: 3 t: 4)
	mov4 r43, 2 ;
	eq4 r42, r41, r43 ;
	# outputjz
	if4 (r42) goto .BB28 ;
	mov4 r44, 1 ;
	goto .BB29
.BB28:
	mov4 r44, 0 ;
.BB29:
	if4 (r44) goto .BB21 ;
	# emit "+" operands: t46 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t47 (k: 5 t: 14), t46 (k: 5 t: 14)
	mov4 r45, [r2 + 8] ;
	# emit "*" operands: t48 (k: 5 t: 4), t47 (k: 5 t: 14)
	mov4 r46, [r45] ;
	# emit "<=" operands:  (k: 158040664 t: 32), r1 (k: 4 t: 4), t48 (k: 5 t: 4)
	mov4 r47, r46 ;
	sub4 r47, r1 ;
	# ~x
	mul4 r47, -1 ;
	add4 r47, -1 ;
	# xor
	mov4 r48, r1 ;
	mov4 r49, r1 ;
	or4 r48, r46 ;
	and4 r49, r46 ;
	sub4 r48, r49 ;
	or4 r48, r47 ;
	# ~x
	mov4 r47, r46 ;
	mul4 r47, -1 ;
	add4 r47, -1 ;
	or4 r47, r1 ;
	and4 r47, r48 ;
	sr4 r47, 31 ;
	if4 (r47) goto .BB20 ;
	# emit "call" operands: r2 (k: 4 t: 14), SingleRotateWithRight (k: 9 t: 19)
	call r2, SingleRotateWithRight, (r2) ;
	# emit "jmp"
	goto .BB21
.BB20:
	# emit "call" operands: r2 (k: 4 t: 14), DoubleRotateWithRight (k: 9 t: 19)
	call r2, DoubleRotateWithRight, (r2) ;
.BB21:
	# emit "+" operands: t51 (k: 5 t: 14), r2 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "+" operands: t53 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t54 (k: 5 t: 14), t53 (k: 5 t: 14)
	mov4 r50, [r2 + 4] ;
	# emit "call" operands: t55 (k: 5 t: 4), Height (k: 9 t: 19)
	call r51, Height, (r50) ;
	# emit "+" operands: t56 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t57 (k: 5 t: 14), t56 (k: 5 t: 14)
	mov4 r52, [r2 + 8] ;
	# emit "call" operands: t58 (k: 5 t: 4), Height (k: 9 t: 19)
	call r53, Height, (r52) ;
	# emit "call" operands: t59 (k: 5 t: 4), Max (k: 9 t: 19)
	call r54, Max, (r51, r53) ;
	# emit "+" operands: t60 (k: 5 t: 4), t59 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r55, r54 ;
	add4 r55, 1 ;
	# emit "*=" operands: t51 (k: 5 t: 14), t60 (k: 5 t: 4)
	mov4 [r2 + 12], r55 ;
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55)>

Delete {
	# emit "&" operands: t0 (k: 5 t: 14), avltree.istr2 (k: 7 t: 18)
	call r3, avltree.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r4, prints, (r3) ;
	# emit "call", print32 (k: 9 t: 19)
	call r5, print32, (r1) ;
	# emit "&" operands: t3 (k: 5 t: 14), avltree.istr3 (k: 7 t: 18)
	call r6, avltree.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r7, prints, (r6) ;
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7)>

Retrieve {
	# emit "*" operands: t0 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r2, [r1] ;
	# emit "ret" operands: t0 (k: 5 t: 4)
	mov4 r0, r2 ;
	ret
} <(r1), r0, (r2)>

