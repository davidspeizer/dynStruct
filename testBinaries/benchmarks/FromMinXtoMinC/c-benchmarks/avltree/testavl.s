# Code auto-generated by MinxCC

testavl.istr0 {
	mov4 r1, 10 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testavl.istr1 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testavl.istr2 {
	mov4 r1, 8 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 77 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testavl.istr3 {
	mov4 r1, 10 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 44 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 77 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 120 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testavl.istr4 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




main {
	# emit "=" operands: r6 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r6, 0 ;
	# emit "call" operands: r3 (k: 4 t: 14), MakeEmpty (k: 9 t: 19)
	mov4 r7, 0 ;
	call r3, MakeEmpty, (r7) ;
	# emit "=" operands: r5 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "jmp" operands:  (k: 156747656 t: 96)
	goto .BB1
.BB0:
	# emit "call" operands: r3 (k: 4 t: 14), Insert (k: 9 t: 19)
	call r3, Insert, (r6, r3) ;
	# emit "++" operands: r5 (k: 4 t: 4)
	add4 r5, 1 ;
	# emit "+" operands: t4 (k: 5 t: 4), r6 (k: 4 t: 4), 7 (k: 3 t: 4)
	mov4 r8, r6 ;
	add4 r8, 7 ;
	# emit "%" operands: t5 (k: 5 t: 4), t4 (k: 5 t: 4), 50 (k: 3 t: 4)
	mov4 r10, r8 ;
	div4 r10, 50 ;
	mul4 r10, 50 ;
	mov4 r9, r8 ;
	sub4 r9, r10 ;
	# emit "=" operands: r6 (k: 4 t: 4), t5 (k: 5 t: 4)
	mov4 r6, r9 ;
.BB1:
	# emit "<" operands:  (k: 156747168 t: 24), r5 (k: 4 t: 4), 50 (k: 3 t: 4)
	mov4 r11, r5 ;
	sub4 r11, 50 ;
	# xor
	mov4 r12, r5 ;
	mov4 r14, r5 ;
	or4 r12, 50 ;
	and4 r14, 50 ;
	sub4 r12, r14 ;
	# xor
	mov4 r13, r11 ;
	mov4 r15, r11 ;
	or4 r13, r5 ;
	and4 r15, r5 ;
	sub4 r13, r15 ;
	and4 r12, r13 ;
	# xor
	mov4 r13, r11 ;
	mov4 r16, r11 ;
	or4 r13, r12 ;
	and4 r16, r12 ;
	sub4 r13, r16 ;
	sr4 r13, 31 ;
	if4 (r13) goto .BB0 ;
	# emit "=" operands: r5 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "jmp" operands:  (k: 156749456 t: -8)
	goto .BB5
.BB2:
	# emit "call" operands: r4 (k: 4 t: 14), Find (k: 9 t: 19)
	call r4, Find, (r5, r3) ;
	# emit "==" operands:  (k: 156749600 t: -112), r4 (k: 4 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r4) goto .BB6 ;
	mov4 r17, 1 ;
	goto .BB7
.BB6:
	mov4 r17, 0 ;
.BB7:
	if4 (r17) goto .BB3 ;
	# emit "call" operands: t7 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r18, Retrieve, (r4) ;
	# emit "==" operands:  (k: 156749528 t: -80), t7 (k: 5 t: 4), r5 (k: 4 t: 4)
	eq4 r19, r18, r5 ;
	if4 (r19) goto .BB4 ;
.BB3:
	# emit "&" operands: t8 (k: 5 t: 14), testavl.istr0 (k: 7 t: 18)
	call r20, testavl.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r21, prints, (r20) ;
	# emit "call", print32 (k: 9 t: 19)
	call r22, print32, (r5) ;
	# emit "&" operands: t11 (k: 5 t: 14), testavl.istr1 (k: 7 t: 18)
	call r23, testavl.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r24, prints, (r23) ;
.BB4:
	# emit "++" operands: r5 (k: 4 t: 4)
	add4 r5, 1 ;
.BB5:
	# emit "<" operands:  (k: 156747872 t: 32), r5 (k: 4 t: 4), 50 (k: 3 t: 4)
	mov4 r25, r5 ;
	sub4 r25, 50 ;
	# xor
	mov4 r26, r5 ;
	mov4 r28, r5 ;
	or4 r26, 50 ;
	and4 r28, 50 ;
	sub4 r26, r28 ;
	# xor
	mov4 r27, r25 ;
	mov4 r29, r25 ;
	or4 r27, r5 ;
	and4 r29, r5 ;
	sub4 r27, r29 ;
	and4 r26, r27 ;
	# xor
	mov4 r27, r25 ;
	mov4 r30, r25 ;
	or4 r27, r26 ;
	and4 r30, r26 ;
	sub4 r27, r30 ;
	sr4 r27, 31 ;
	if4 (r27) goto .BB2 ;
	# emit "&" operands: t15 (k: 5 t: 14), testavl.istr2 (k: 7 t: 18)
	call r31, testavl.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r32, prints, (r31) ;
	# emit "call" operands: t17 (k: 5 t: 14), FindMin (k: 9 t: 19)
	call r33, FindMin, (r3) ;
	# emit "call" operands: t18 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r34, Retrieve, (r33) ;
	# emit "call", print32 (k: 9 t: 19)
	call r35, print32, (r34) ;
	# emit "&" operands: t20 (k: 5 t: 14), testavl.istr3 (k: 7 t: 18)
	call r36, testavl.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r37, prints, (r36) ;
	# emit "call" operands: t22 (k: 5 t: 14), FindMax (k: 9 t: 19)
	call r38, FindMax, (r3) ;
	# emit "call" operands: t23 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r39, Retrieve, (r38) ;
	# emit "call", print32 (k: 9 t: 19)
	call r40, print32, (r39) ;
	# emit "&" operands: t25 (k: 5 t: 14), testavl.istr4 (k: 7 t: 18)
	call r41, testavl.istr4, () ;
	# emit "call", prints (k: 9 t: 19)
	call r42, prints, (r41) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42)>

