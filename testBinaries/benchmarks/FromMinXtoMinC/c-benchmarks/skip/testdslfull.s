# Code auto-generated by MinxCC

testdsl.istr0 {
	mov4 r1, 22 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 73 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testdsl.istr1 {
	mov4 r1, 10 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testdsl.istr2 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testdsl.istr3 {
	mov4 r1, 8 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 77 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testdsl.istr4 {
	mov4 r1, 10 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 44 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 77 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 120 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testdsl.istr5 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




main {
	# emit "call" operands: r5 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r5, 4 ;
	# emit "call" operands: r6 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r6, 4 ;
	# emit "=" operands: r8 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r8, 0 ;
	# emit "*=" operands: r5 (k: 4 t: 14), 0 (k: 3 t: 14)
	mov4 r9, 0 ;
	mov4 [r5], r9 ;
	# emit "*=" operands: r6 (k: 4 t: 14), 0 (k: 3 t: 14)
	mov4 r10, 0 ;
	mov4 [r6], r10 ;
	# emit "call" operands: r3 (k: 4 t: 14), Initialize (k: 9 t: 19)
	call r3, Initialize, (r5, r6) ;
	# emit "*" operands: t7 (k: 5 t: 14), r5 (k: 4 t: 14)
	mov4 r11, [r5] ;
	# emit "*" operands: t8 (k: 5 t: 14), r6 (k: 4 t: 14)
	mov4 r12, [r6] ;
	# emit "call" operands: r3 (k: 4 t: 14), MakeEmpty (k: 9 t: 19)
	call r3, MakeEmpty, (r3, r11, r12) ;
	# emit "=" operands: r7 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r7, 0 ;
	# emit "jmp" operands:  (k: 158739808 t: 56)
	goto .BB1
.BB0:
	# emit "*" operands: t10 (k: 5 t: 14), r5 (k: 4 t: 14)
	mov4 r13, [r5] ;
	# emit "*" operands: t11 (k: 5 t: 14), r6 (k: 4 t: 14)
	mov4 r14, [r6] ;
	# emit "call" operands: r3 (k: 4 t: 14), Insert (k: 9 t: 19)
	call r3, Insert, (r8, r3, r13, r14) ;
	# emit "++" operands: r7 (k: 4 t: 4)
	add4 r7, 1 ;
	# emit "+" operands: t15 (k: 5 t: 4), r8 (k: 4 t: 4), 7 (k: 3 t: 4)
	mov4 r15, r8 ;
	add4 r15, 7 ;
	# emit "%" operands: t16 (k: 5 t: 4), t15 (k: 5 t: 4), 10 (k: 3 t: 4)
	mov4 r17, r15 ;
	div4 r17, 10 ;
	mul4 r17, 10 ;
	mov4 r16, r15 ;
	sub4 r16, r17 ;
	# emit "=" operands: r8 (k: 4 t: 4), t16 (k: 5 t: 4)
	mov4 r8, r16 ;
.BB1:
	# emit "<" operands:  (k: 158737760 t: -16), r7 (k: 4 t: 4), 10 (k: 3 t: 4)
	mov4 r18, r7 ;
	sub4 r18, 10 ;
	# xor
	mov4 r19, r7 ;
	mov4 r21, r7 ;
	or4 r19, 10 ;
	and4 r21, 10 ;
	sub4 r19, r21 ;
	# xor
	mov4 r20, r18 ;
	mov4 r22, r18 ;
	or4 r20, r7 ;
	and4 r22, r7 ;
	sub4 r20, r22 ;
	and4 r19, r20 ;
	# xor
	mov4 r20, r18 ;
	mov4 r23, r18 ;
	or4 r20, r19 ;
	and4 r23, r19 ;
	sub4 r20, r23 ;
	sr4 r20, 31 ;
	if4 (r20) goto .BB0 ;
	# emit "&" operands: t17 (k: 5 t: 14), testdsl.istr0 (k: 7 t: 18)
	call r24, testdsl.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r25, prints, (r24) ;
	# emit "=" operands: r7 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r7, 0 ;
	# emit "jmp" operands:  (k: 158742248 t: 80)
	goto .BB5
.BB2:
	# emit "*" operands: t19 (k: 5 t: 14), r5 (k: 4 t: 14)
	mov4 r26, [r5] ;
	# emit "call" operands: r4 (k: 4 t: 14), Find (k: 9 t: 19)
	call r4, Find, (r7, r3, r26) ;
	# emit "==" operands:  (k: 158742392 t: -24), r4 (k: 4 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r4) goto .BB6 ;
	mov4 r27, 1 ;
	goto .BB7
.BB6:
	mov4 r27, 0 ;
.BB7:
	if4 (r27) goto .BB3 ;
	# emit "call" operands: t21 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r28, Retrieve, (r4) ;
	# emit "==" operands:  (k: 158742320 t: 8), t21 (k: 5 t: 4), r7 (k: 4 t: 4)
	eq4 r29, r28, r7 ;
	if4 (r29) goto .BB4 ;
.BB3:
	# emit "&" operands: t22 (k: 5 t: 14), testdsl.istr1 (k: 7 t: 18)
	call r30, testdsl.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r31, prints, (r30) ;
	# emit "call", print32 (k: 9 t: 19)
	call r32, print32, (r7) ;
	# emit "&" operands: t25 (k: 5 t: 14), testdsl.istr2 (k: 7 t: 18)
	call r33, testdsl.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r34, prints, (r33) ;
.BB4:
	# emit "++" operands: r7 (k: 4 t: 4)
	add4 r7, 1 ;
.BB5:
	# emit "<" operands:  (k: 158740024 t: 120), r7 (k: 4 t: 4), 10 (k: 3 t: 4)
	mov4 r35, r7 ;
	sub4 r35, 10 ;
	# xor
	mov4 r36, r7 ;
	mov4 r38, r7 ;
	or4 r36, 10 ;
	and4 r38, 10 ;
	sub4 r36, r38 ;
	# xor
	mov4 r37, r35 ;
	mov4 r39, r35 ;
	or4 r37, r7 ;
	and4 r39, r7 ;
	sub4 r37, r39 ;
	and4 r36, r37 ;
	# xor
	mov4 r37, r35 ;
	mov4 r40, r35 ;
	or4 r37, r36 ;
	and4 r40, r36 ;
	sub4 r37, r40 ;
	sr4 r37, 31 ;
	if4 (r37) goto .BB2 ;
	# emit "&" operands: t29 (k: 5 t: 14), testdsl.istr3 (k: 7 t: 18)
	call r41, testdsl.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r42, prints, (r41) ;
	# emit "*" operands: t31 (k: 5 t: 14), r5 (k: 4 t: 14)
	mov4 r43, [r5] ;
	# emit "call" operands: t32 (k: 5 t: 14), FindMin (k: 9 t: 19)
	call r44, FindMin, (r3, r43) ;
	# emit "call" operands: t33 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r45, Retrieve, (r44) ;
	# emit "call", print32 (k: 9 t: 19)
	call r46, print32, (r45) ;
	# emit "&" operands: t35 (k: 5 t: 14), testdsl.istr4 (k: 7 t: 18)
	call r47, testdsl.istr4, () ;
	# emit "call", prints (k: 9 t: 19)
	call r48, prints, (r47) ;
	# emit "*" operands: t37 (k: 5 t: 14), r5 (k: 4 t: 14)
	mov4 r49, [r5] ;
	# emit "*" operands: t38 (k: 5 t: 14), r6 (k: 4 t: 14)
	mov4 r50, [r6] ;
	# emit "call" operands: t39 (k: 5 t: 14), FindMax (k: 9 t: 19)
	call r51, FindMax, (r3, r49, r50) ;
	# emit "call" operands: t40 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r52, Retrieve, (r51) ;
	# emit "call", print32 (k: 9 t: 19)
	call r53, print32, (r52) ;
	# emit "&" operands: t42 (k: 5 t: 14), testdsl.istr5 (k: 7 t: 18)
	call r54, testdsl.istr5, () ;
	# emit "call", prints (k: 9 t: 19)
	call r55, prints, (r54) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55)>

# Code auto-generated by MinxCC

dsl.istr0 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

dsl.istr1 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

dsl.istr2 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

dsl.istr3 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

dsl.istr4 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

dsl.istr5 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

dsl.istr6 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

dsl.istr7 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

dsl.istr8 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

dsl.istr9 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

dsl.istr10 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

dsl.istr11 {
	mov4 r1, 25 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 82 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 118 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 100 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




Initialize {
	# emit "*" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 r4, [r1] ;
	# emit "!=" operands:  (k: 164712192 t: 72), t0 (k: 5 t: 14), 0 (k: 3 t: 14)
	if4 (r4) goto .BB2 ;
	# emit "call" operands: t2 (k: 5 t: 14), malloc (k: 9 t: 19)
	alloc r5, 12 ;
	# emit "*=" operands: r1 (k: 4 t: 14), t2 (k: 5 t: 14)
	mov4 [r1], r5 ;
	# emit "*" operands: t4 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 r6, [r1] ;
	# emit "!=" operands:  (k: 164709184 t: 72), t4 (k: 5 t: 14), 0 (k: 3 t: 14)
	if4 (r6) goto .BB0 ;
	# emit "&" operands: t5 (k: 5 t: 14), dsl.istr0 (k: 7 t: 18)
	call r7, dsl.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r8, prints, (r7) ;
	# emit "&" operands: t7 (k: 5 t: 14), dsl.istr1 (k: 7 t: 18)
	call r9, dsl.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r10, prints, (r9) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r12, 1 ;
	call r11, mincexit, (r12) ;
.BB0:
	# emit "*" operands: t10 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 r13, [r1] ;
	# emit "+" operands: t11 (k: 5 t: 14), t10 (k: 5 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t13 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 r14, [r1] ;
	# emit "+" operands: t14 (k: 5 t: 14), t13 (k: 5 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t16 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 r15, [r1] ;
	# emit "*=" operands: t14 (k: 5 t: 14), t16 (k: 5 t: 14)
	mov4 [r14 + 8], r15 ;
	# emit "*" operands: t17 (k: 5 t: 14), t14 (k: 5 t: 14)
	mov4 r16, [r14 + 8] ;
	# emit "*=" operands: t11 (k: 5 t: 14), t17 (k: 5 t: 14)
	mov4 [r13 + 4], r16 ;
	# emit "call" operands: t20 (k: 5 t: 14), malloc (k: 9 t: 19)
	alloc r17, 12 ;
	# emit "*=" operands: r2 (k: 4 t: 14), t20 (k: 5 t: 14)
	mov4 [r2], r17 ;
	# emit "*" operands: t22 (k: 5 t: 14), r2 (k: 4 t: 14)
	mov4 r18, [r2] ;
	# emit "!=" operands:  (k: 164712264 t: 88), t22 (k: 5 t: 14), 0 (k: 3 t: 14)
	if4 (r18) goto .BB1 ;
	# emit "&" operands: t23 (k: 5 t: 14), dsl.istr2 (k: 7 t: 18)
	call r19, dsl.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r20, prints, (r19) ;
	# emit "&" operands: t25 (k: 5 t: 14), dsl.istr3 (k: 7 t: 18)
	call r21, dsl.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r22, prints, (r21) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r24, 1 ;
	call r23, mincexit, (r24) ;
.BB1:
	# emit "*" operands: t28 (k: 5 t: 14), r2 (k: 4 t: 14)
	mov4 r25, [r2] ;
	# emit "*=" operands: t28 (k: 5 t: 14), 10000 (k: 3 t: 4)
	mov4 r26, 10000 ;
	mov4 [r25], r26 ;
	# emit "*" operands: t31 (k: 5 t: 14), r2 (k: 4 t: 14)
	mov4 r27, [r2] ;
	# emit "+" operands: t32 (k: 5 t: 14), t31 (k: 5 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t34 (k: 5 t: 14), r2 (k: 4 t: 14)
	mov4 r28, [r2] ;
	# emit "*=" operands: t32 (k: 5 t: 14), t34 (k: 5 t: 14)
	mov4 [r27 + 4], r28 ;
.BB2:
	# emit "call" operands: r3 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r3, 12 ;
	# emit "!=", r3 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r3) goto .BB3 ;
	# emit "&" operands: t37 (k: 5 t: 14), dsl.istr4 (k: 7 t: 18)
	call r29, dsl.istr4, () ;
	# emit "call", prints (k: 9 t: 19)
	call r30, prints, (r29) ;
	# emit "&" operands: t39 (k: 5 t: 14), dsl.istr5 (k: 7 t: 18)
	call r31, dsl.istr5, () ;
	# emit "call", prints (k: 9 t: 19)
	call r32, prints, (r31) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r34, 1 ;
	call r33, mincexit, (r34) ;
.BB3:
	# emit "*=" operands: r3 (k: 4 t: 14), 10000 (k: 3 t: 4)
	mov4 r35, 10000 ;
	mov4 [r3], r35 ;
	# emit "+" operands: t44 (k: 5 t: 14), r3 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t46 (k: 5 t: 14), r2 (k: 4 t: 14)
	mov4 r36, [r2] ;
	# emit "*=" operands: t44 (k: 5 t: 14), t46 (k: 5 t: 14)
	mov4 [r3 + 4], r36 ;
	# emit "+" operands: t48 (k: 5 t: 14), r3 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t50 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 r37, [r1] ;
	# emit "*=" operands: t48 (k: 5 t: 14), t50 (k: 5 t: 14)
	mov4 [r3 + 8], r37 ;
	# emit "ret" operands: r3 (k: 4 t: 14)
	mov4 r0, r3 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37)>

Output {
	# emit "call", print32 (k: 9 t: 19)
	call r2, print32, (r1) ;
	# emit "&" operands: t1 (k: 5 t: 14), dsl.istr6 (k: 7 t: 18)
	call r3, dsl.istr6, () ;
	# emit "call", prints (k: 9 t: 19)
	call r4, prints, (r3) ;
	ret
} <(r1), r0, (r2, r3, r4)>

MakeEmpty {
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*=" operands: t0 (k: 5 t: 14), r3 (k: 4 t: 14)
	mov4 [r1 + 4], r3 ;
	# emit "+" operands: t3 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*=" operands: t3 (k: 5 t: 14), r2 (k: 4 t: 14)
	mov4 [r1 + 8], r2 ;
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	ret
} <(r1, r2, r3), r0, ()>

Find {
	# emit "=" operands: r4 (k: 4 t: 14), r2 (k: 4 t: 14)
	mov4 r4, r2 ;
	# emit "*=" operands: r3 (k: 4 t: 14), r1 (k: 4 t: 4)
	mov4 [r3], r1 ;
	# emit "jmp" operands:  (k: 164724472 t: -16)
	goto .BB6
.BB4:
	# emit "*" operands: t2 (k: 5 t: 4), r4 (k: 4 t: 14)
	mov4 r5, [r4] ;
	# emit ">=" operands:  (k: 164724400 t: -88), r1 (k: 4 t: 4), t2 (k: 5 t: 4)
	mov4 r6, r1 ;
	sub4 r6, r5 ;
	# ~x
	mul4 r6, -1 ;
	add4 r6, -1 ;
	# xor
	mov4 r7, r5 ;
	mov4 r8, r5 ;
	or4 r7, r1 ;
	and4 r8, r1 ;
	sub4 r7, r8 ;
	or4 r7, r6 ;
	# ~x
	mov4 r6, r1 ;
	mul4 r6, -1 ;
	add4 r6, -1 ;
	or4 r6, r5 ;
	and4 r6, r7 ;
	sr4 r6, 31 ;
	if4 (r6) goto .BB5 ;
	# emit "+" operands: t3 (k: 5 t: 14), r4 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t4 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 r9, [r4 + 8] ;
	# emit "=" operands: r4 (k: 4 t: 14), t4 (k: 5 t: 14)
	mov4 r4, r9 ;
	# emit "jmp" operands:  (k: 164724472 t: -16)
	goto .BB6
.BB5:
	# emit "+" operands: t5 (k: 5 t: 14), r4 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t6 (k: 5 t: 14), t5 (k: 5 t: 14)
	mov4 r10, [r4 + 4] ;
	# emit "=" operands: r4 (k: 4 t: 14), t6 (k: 5 t: 14)
	mov4 r4, r10 ;
.BB6:
	# emit "*" operands: t7 (k: 5 t: 4), r4 (k: 4 t: 14)
	mov4 r11, [r4] ;
	# emit "!=" operands:  (k: 164723504 t: -80), r1 (k: 4 t: 4), t7 (k: 5 t: 4)
	eq4 r12, r1, r11 ;
	# outputjz
	if4 (r12) goto .BB21 ;
	mov4 r13, 1 ;
	goto .BB22
.BB21:
	mov4 r13, 0 ;
.BB22:
	if4 (r13) goto .BB4 ;
	# emit "ret" operands: r4 (k: 4 t: 14)
	mov4 r0, r4 ;
	ret
} <(r1, r2, r3), r0, (r4, r5, r6, r7, r8, r9, r10, r11, r12, r13)>

FindMin {
	# emit "=" operands: r3 (k: 4 t: 14), r1 (k: 4 t: 14)
	mov4 r3, r1 ;
	# emit "jmp" operands:  (k: 164726160 t: 32)
	goto .BB8
.BB7:
	# emit "+" operands: t0 (k: 5 t: 14), r3 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r4, [r3 + 8] ;
	# emit "=" operands: r3 (k: 4 t: 14), t1 (k: 5 t: 14)
	mov4 r3, r4 ;
.BB8:
	# emit "+" operands: t2 (k: 5 t: 14), r3 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t3 (k: 5 t: 14), t2 (k: 5 t: 14)
	mov4 r5, [r3 + 8] ;
	# emit "!=" operands:  (k: 164725984 t: -40), t3 (k: 5 t: 14), r2 (k: 4 t: 14)
	eq4 r6, r5, r2 ;
	# outputjz
	if4 (r6) goto .BB23 ;
	mov4 r7, 1 ;
	goto .BB24
.BB23:
	mov4 r7, 0 ;
.BB24:
	if4 (r7) goto .BB7 ;
	# emit "ret" operands: r3 (k: 4 t: 14)
	mov4 r0, r3 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7)>

FindMax {
	# emit "=" operands: r4 (k: 4 t: 14), r1 (k: 4 t: 14)
	mov4 r4, r1 ;
	# emit "jmp" operands:  (k: 164727992 t: -24)
	goto .BB11
.BB9:
	# emit "+" operands: t0 (k: 5 t: 14), r4 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r5, [r4 + 4] ;
	# emit "+" operands: t2 (k: 5 t: 14), t1 (k: 5 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t3 (k: 5 t: 14), t2 (k: 5 t: 14)
	mov4 r6, [r5 + 4] ;
	# emit "==" operands:  (k: 164727920 t: 40), t3 (k: 5 t: 14), r3 (k: 4 t: 14)
	eq4 r7, r6, r3 ;
	if4 (r7) goto .BB10 ;
	# emit "+" operands: t4 (k: 5 t: 14), r4 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t5 (k: 5 t: 14), t4 (k: 5 t: 14)
	mov4 r8, [r4 + 4] ;
	# emit "=" operands: r4 (k: 4 t: 14), t5 (k: 5 t: 14)
	mov4 r4, r8 ;
	# emit "jmp" operands:  (k: 164727992 t: -24)
	goto .BB11
.BB10:
	# emit "+" operands: t6 (k: 5 t: 14), r4 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t7 (k: 5 t: 14), t6 (k: 5 t: 14)
	mov4 r9, [r4 + 8] ;
	# emit "=" operands: r4 (k: 4 t: 14), t7 (k: 5 t: 14)
	mov4 r4, r9 ;
.BB11:
	# emit "+" operands: t8 (k: 5 t: 14), r4 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t9 (k: 5 t: 14), t8 (k: 5 t: 14)
	mov4 r10, [r4 + 4] ;
	# emit "+" operands: t10 (k: 5 t: 14), t9 (k: 5 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t11 (k: 5 t: 14), t10 (k: 5 t: 14)
	mov4 r11, [r10 + 4] ;
	# emit "!=" operands:  (k: 164727344 t: 112), t11 (k: 5 t: 14), r3 (k: 4 t: 14)
	eq4 r12, r11, r3 ;
	# outputjz
	if4 (r12) goto .BB25 ;
	mov4 r13, 1 ;
	goto .BB26
.BB25:
	mov4 r13, 0 ;
.BB26:
	if4 (r13) goto .BB9 ;
	# emit "+" operands: t12 (k: 5 t: 14), r4 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t13 (k: 5 t: 14), t12 (k: 5 t: 14)
	mov4 r14, [r4 + 8] ;
	# emit "!=" operands:  (k: 164727344 t: 112), t13 (k: 5 t: 14), r2 (k: 4 t: 14)
	eq4 r15, r14, r2 ;
	# outputjz
	if4 (r15) goto .BB27 ;
	mov4 r16, 1 ;
	goto .BB28
.BB27:
	mov4 r16, 0 ;
.BB28:
	if4 (r16) goto .BB9 ;
	# emit "ret" operands: r4 (k: 4 t: 14)
	mov4 r0, r4 ;
	ret
} <(r1, r2, r3), r0, (r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16)>

Insert {
	# emit "=" operands: r5 (k: 4 t: 14), r2 (k: 4 t: 14)
	mov4 r5, r2 ;
	# emit "*=" operands: r3 (k: 4 t: 14), r1 (k: 4 t: 4)
	mov4 [r3], r1 ;
	# emit "jmp" operands:  (k: 164732384 t: -96)
	goto .BB16
.BB12:
	# emit "+" operands: t2 (k: 5 t: 14), r5 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t3 (k: 5 t: 14), t2 (k: 5 t: 14)
	mov4 r7, [r5 + 4] ;
	# emit "=" operands: r5 (k: 4 t: 14), t3 (k: 5 t: 14)
	mov4 r5, r7 ;
.BB13:
	# emit "*" operands: t4 (k: 5 t: 4), r5 (k: 4 t: 14)
	mov4 r8, [r5] ;
	# emit ">" operands:  (k: 164731152 t: 96), r1 (k: 4 t: 4), t4 (k: 5 t: 4)
	mov4 r9, r8 ;
	sub4 r9, r1 ;
	# xor
	mov4 r10, r8 ;
	mov4 r12, r8 ;
	or4 r10, r1 ;
	and4 r12, r1 ;
	sub4 r10, r12 ;
	# xor
	mov4 r11, r9 ;
	mov4 r13, r9 ;
	or4 r11, r8 ;
	and4 r13, r8 ;
	sub4 r11, r13 ;
	and4 r10, r11 ;
	# xor
	mov4 r11, r9 ;
	mov4 r14, r9 ;
	or4 r11, r10 ;
	and4 r14, r10 ;
	sub4 r11, r14 ;
	sr4 r11, 31 ;
	if4 (r11) goto .BB12 ;
	# emit "*" operands: t5 (k: 5 t: 4), r5 (k: 4 t: 14)
	mov4 r15, [r5] ;
	# emit "+" operands: t6 (k: 5 t: 14), r5 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t7 (k: 5 t: 14), t6 (k: 5 t: 14)
	mov4 r16, [r5 + 8] ;
	# emit "+" operands: t8 (k: 5 t: 14), t7 (k: 5 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t9 (k: 5 t: 14), t8 (k: 5 t: 14)
	mov4 r17, [r16 + 4] ;
	# emit "+" operands: t10 (k: 5 t: 14), t9 (k: 5 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t11 (k: 5 t: 14), t10 (k: 5 t: 14)
	mov4 r18, [r17 + 4] ;
	# emit "*" operands: t12 (k: 5 t: 4), t11 (k: 5 t: 14)
	mov4 r19, [r18] ;
	# emit "<=" operands:  (k: 164733760 t: 88), t5 (k: 5 t: 4), t12 (k: 5 t: 4)
	mov4 r20, r19 ;
	sub4 r20, r15 ;
	# ~x
	mul4 r20, -1 ;
	add4 r20, -1 ;
	# xor
	mov4 r21, r15 ;
	mov4 r22, r15 ;
	or4 r21, r19 ;
	and4 r22, r19 ;
	sub4 r21, r22 ;
	or4 r21, r20 ;
	# ~x
	mov4 r20, r19 ;
	mul4 r20, -1 ;
	add4 r20, -1 ;
	or4 r20, r15 ;
	and4 r20, r21 ;
	sr4 r20, 31 ;
	if4 (r20) goto .BB15 ;
	# emit "call" operands: r6 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r6, 12 ;
	# emit "!=" operands:  (k: 164733832 t: 88), r6 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r6) goto .BB14 ;
	# emit "&" operands: t14 (k: 5 t: 14), dsl.istr7 (k: 7 t: 18)
	call r23, dsl.istr7, () ;
	# emit "call", prints (k: 9 t: 19)
	call r24, prints, (r23) ;
	# emit "&" operands: t16 (k: 5 t: 14), dsl.istr8 (k: 7 t: 18)
	call r25, dsl.istr8, () ;
	# emit "call", prints (k: 9 t: 19)
	call r26, prints, (r25) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r28, 1 ;
	call r27, mincexit, (r28) ;
.BB14:
	# emit "+" operands: t19 (k: 5 t: 14), r6 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "+" operands: t21 (k: 5 t: 14), r5 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t22 (k: 5 t: 14), t21 (k: 5 t: 14)
	mov4 r29, [r5 + 4] ;
	# emit "*=" operands: t19 (k: 5 t: 14), t22 (k: 5 t: 14)
	mov4 [r6 + 4], r29 ;
	# emit "+" operands: t24 (k: 5 t: 14), r6 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "+" operands: t26 (k: 5 t: 14), r5 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t27 (k: 5 t: 14), t26 (k: 5 t: 14)
	mov4 r30, [r5 + 8] ;
	# emit "+" operands: t28 (k: 5 t: 14), t27 (k: 5 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t29 (k: 5 t: 14), t28 (k: 5 t: 14)
	mov4 r31, [r30 + 4] ;
	# emit "+" operands: t30 (k: 5 t: 14), t29 (k: 5 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t31 (k: 5 t: 14), t30 (k: 5 t: 14)
	mov4 r32, [r31 + 4] ;
	# emit "*=" operands: t24 (k: 5 t: 14), t31 (k: 5 t: 14)
	mov4 [r6 + 8], r32 ;
	# emit "*=" operands: t21 (k: 5 t: 14), r6 (k: 4 t: 14)
	mov4 [r5 + 4], r6 ;
	# emit "*" operands: t36 (k: 5 t: 4), r5 (k: 4 t: 14)
	mov4 r33, [r5] ;
	# emit "*=" operands: r6 (k: 4 t: 14), t36 (k: 5 t: 4)
	mov4 [r6], r33 ;
	# emit "*" operands: t39 (k: 5 t: 14), t26 (k: 5 t: 14)
	mov4 r34, [r5 + 8] ;
	# emit "+" operands: t40 (k: 5 t: 14), t39 (k: 5 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t41 (k: 5 t: 14), t40 (k: 5 t: 14)
	mov4 r35, [r34 + 4] ;
	# emit "*" operands: t42 (k: 5 t: 4), t41 (k: 5 t: 14)
	mov4 r36, [r35] ;
	# emit "*=" operands: r5 (k: 4 t: 14), t42 (k: 5 t: 4)
	mov4 [r5], r36 ;
	# emit "jmp" operands:  (k: 164732384 t: -96)
	goto .BB16
.BB15:
	# emit "+" operands: t44 (k: 5 t: 14), r5 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t45 (k: 5 t: 14), t44 (k: 5 t: 14)
	mov4 r37, [r5 + 8] ;
	# emit "=" operands: r5 (k: 4 t: 14), t45 (k: 5 t: 14)
	mov4 r5, r37 ;
.BB16:
	# emit "!=" operands:  (k: 164731416 t: -88), r5 (k: 4 t: 14), r3 (k: 4 t: 14)
	eq4 r38, r5, r3 ;
	# outputjz
	if4 (r38) goto .BB29 ;
	mov4 r39, 1 ;
	goto .BB30
.BB29:
	mov4 r39, 0 ;
.BB30:
	if4 (r39) goto .BB13 ;
	# emit "+" operands: t46 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t47 (k: 5 t: 14), t46 (k: 5 t: 14)
	mov4 r40, [r2 + 4] ;
	# emit "==", t47 (k: 5 t: 14), r4 (k: 4 t: 14)
	eq4 r41, r40, r4 ;
	if4 (r41) goto .BB18 ;
	# emit "call" operands: r6 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r6, 12 ;
	# emit "!=" operands:  (k: 164739400 t: 96), r6 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r6) goto .BB17 ;
	# emit "&" operands: t49 (k: 5 t: 14), dsl.istr9 (k: 7 t: 18)
	call r42, dsl.istr9, () ;
	# emit "call", prints (k: 9 t: 19)
	call r43, prints, (r42) ;
	# emit "&" operands: t51 (k: 5 t: 14), dsl.istr10 (k: 7 t: 18)
	call r44, dsl.istr10, () ;
	# emit "call", prints (k: 9 t: 19)
	call r45, prints, (r44) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r47, 1 ;
	call r46, mincexit, (r47) ;
.BB17:
	# emit "+" operands: t54 (k: 5 t: 14), r6 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*=" operands: t54 (k: 5 t: 14), r2 (k: 4 t: 14)
	mov4 [r6 + 8], r2 ;
	# emit "+" operands: t57 (k: 5 t: 14), r6 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*=" operands: t57 (k: 5 t: 14), r4 (k: 4 t: 14)
	mov4 [r6 + 4], r4 ;
	# emit "*=" operands: r6 (k: 4 t: 14), 10000 (k: 3 t: 4)
	mov4 r48, 10000 ;
	mov4 [r6], r48 ;
	# emit "=" operands: r2 (k: 4 t: 14), r6 (k: 4 t: 14)
	mov4 r2, r6 ;
.BB18:
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1, r2, r3, r4), r0, (r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48)>

Remove {
	# emit "&" operands: t0 (k: 5 t: 14), dsl.istr11 (k: 7 t: 18)
	call r3, dsl.istr11, () ;
	# emit "call", prints (k: 9 t: 19)
	call r4, prints, (r3) ;
	# emit "" operands:  (k: 164742688 t: 104), r1 (k: 4 t: 4)
	mov4 r5, r1 ;
	sub4 r5, 1 ;
	# ~x
	mov4 r6, r1 ;
	mul4 r6, -1 ;
	add4 r6, -1 ;
	and4 r5, r6 ;
	sr4 r5, 31 ;
	if4 (r5) goto .BB19 ;
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	# emit "jmp"
	goto .BB20
.BB19:
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
.BB20:
	ret
} <(r1, r2), r0, (r3, r4, r5, r6)>

Retrieve {
	# emit "*" operands: t0 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r2, [r1] ;
	# emit "ret" operands: t0 (k: 5 t: 4)
	mov4 r0, r2 ;
	ret
} <(r1), r0, (r2)>

