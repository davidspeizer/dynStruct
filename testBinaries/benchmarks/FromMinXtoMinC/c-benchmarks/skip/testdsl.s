# Code auto-generated by MinxCC

testdsl.istr0 {
	mov4 r1, 22 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 73 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testdsl.istr1 {
	mov4 r1, 10 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testdsl.istr2 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testdsl.istr3 {
	mov4 r1, 8 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 77 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testdsl.istr4 {
	mov4 r1, 10 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 44 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 77 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 120 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testdsl.istr5 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




main {
	# emit "call" operands: r5 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r5, 4 ;
	# emit "call" operands: r6 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r6, 4 ;
	# emit "=" operands: r8 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r8, 0 ;
	# emit "*=" operands: r5 (k: 4 t: 14), 0 (k: 3 t: 14)
	mov4 r9, 0 ;
	mov4 [r5], r9 ;
	# emit "*=" operands: r6 (k: 4 t: 14), 0 (k: 3 t: 14)
	mov4 r10, 0 ;
	mov4 [r6], r10 ;
	# emit "call" operands: r3 (k: 4 t: 14), Initialize (k: 9 t: 19)
	call r3, Initialize, (r5, r6) ;
	# emit "*" operands: t7 (k: 5 t: 14), r5 (k: 4 t: 14)
	mov4 r11, [r5] ;
	# emit "*" operands: t8 (k: 5 t: 14), r6 (k: 4 t: 14)
	mov4 r12, [r6] ;
	# emit "call" operands: r3 (k: 4 t: 14), MakeEmpty (k: 9 t: 19)
	call r3, MakeEmpty, (r3, r11, r12) ;
	# emit "=" operands: r7 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r7, 0 ;
	# emit "jmp" operands:  (k: 158739808 t: 56)
	goto .BB1
.BB0:
	# emit "*" operands: t10 (k: 5 t: 14), r5 (k: 4 t: 14)
	mov4 r13, [r5] ;
	# emit "*" operands: t11 (k: 5 t: 14), r6 (k: 4 t: 14)
	mov4 r14, [r6] ;
	# emit "call" operands: r3 (k: 4 t: 14), Insert (k: 9 t: 19)
	call r3, Insert, (r8, r3, r13, r14) ;
	# emit "++" operands: r7 (k: 4 t: 4)
	add4 r7, 1 ;
	# emit "+" operands: t15 (k: 5 t: 4), r8 (k: 4 t: 4), 7 (k: 3 t: 4)
	mov4 r15, r8 ;
	add4 r15, 7 ;
	# emit "%" operands: t16 (k: 5 t: 4), t15 (k: 5 t: 4), 10 (k: 3 t: 4)
	mov4 r17, r15 ;
	div4 r17, 10 ;
	mul4 r17, 10 ;
	mov4 r16, r15 ;
	sub4 r16, r17 ;
	# emit "=" operands: r8 (k: 4 t: 4), t16 (k: 5 t: 4)
	mov4 r8, r16 ;
.BB1:
	# emit "<" operands:  (k: 158737760 t: -16), r7 (k: 4 t: 4), 10 (k: 3 t: 4)
	mov4 r18, r7 ;
	sub4 r18, 10 ;
	# xor
	mov4 r19, r7 ;
	mov4 r21, r7 ;
	or4 r19, 10 ;
	and4 r21, 10 ;
	sub4 r19, r21 ;
	# xor
	mov4 r20, r18 ;
	mov4 r22, r18 ;
	or4 r20, r7 ;
	and4 r22, r7 ;
	sub4 r20, r22 ;
	and4 r19, r20 ;
	# xor
	mov4 r20, r18 ;
	mov4 r23, r18 ;
	or4 r20, r19 ;
	and4 r23, r19 ;
	sub4 r20, r23 ;
	sr4 r20, 31 ;
	if4 (r20) goto .BB0 ;
	# emit "&" operands: t17 (k: 5 t: 14), testdsl.istr0 (k: 7 t: 18)
	call r24, testdsl.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r25, prints, (r24) ;
	# emit "=" operands: r7 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r7, 0 ;
	# emit "jmp" operands:  (k: 158742248 t: 80)
	goto .BB5
.BB2:
	# emit "*" operands: t19 (k: 5 t: 14), r5 (k: 4 t: 14)
	mov4 r26, [r5] ;
	# emit "call" operands: r4 (k: 4 t: 14), Find (k: 9 t: 19)
	call r4, Find, (r7, r3, r26) ;
	# emit "==" operands:  (k: 158742392 t: -24), r4 (k: 4 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r4) goto .BB6 ;
	mov4 r27, 1 ;
	goto .BB7
.BB6:
	mov4 r27, 0 ;
.BB7:
	if4 (r27) goto .BB3 ;
	# emit "call" operands: t21 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r28, Retrieve, (r4) ;
	# emit "==" operands:  (k: 158742320 t: 8), t21 (k: 5 t: 4), r7 (k: 4 t: 4)
	eq4 r29, r28, r7 ;
	if4 (r29) goto .BB4 ;
.BB3:
	# emit "&" operands: t22 (k: 5 t: 14), testdsl.istr1 (k: 7 t: 18)
	call r30, testdsl.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r31, prints, (r30) ;
	# emit "call", print32 (k: 9 t: 19)
	call r32, print32, (r7) ;
	# emit "&" operands: t25 (k: 5 t: 14), testdsl.istr2 (k: 7 t: 18)
	call r33, testdsl.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r34, prints, (r33) ;
.BB4:
	# emit "++" operands: r7 (k: 4 t: 4)
	add4 r7, 1 ;
.BB5:
	# emit "<" operands:  (k: 158740024 t: 120), r7 (k: 4 t: 4), 10 (k: 3 t: 4)
	mov4 r35, r7 ;
	sub4 r35, 10 ;
	# xor
	mov4 r36, r7 ;
	mov4 r38, r7 ;
	or4 r36, 10 ;
	and4 r38, 10 ;
	sub4 r36, r38 ;
	# xor
	mov4 r37, r35 ;
	mov4 r39, r35 ;
	or4 r37, r7 ;
	and4 r39, r7 ;
	sub4 r37, r39 ;
	and4 r36, r37 ;
	# xor
	mov4 r37, r35 ;
	mov4 r40, r35 ;
	or4 r37, r36 ;
	and4 r40, r36 ;
	sub4 r37, r40 ;
	sr4 r37, 31 ;
	if4 (r37) goto .BB2 ;
	# emit "&" operands: t29 (k: 5 t: 14), testdsl.istr3 (k: 7 t: 18)
	call r41, testdsl.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r42, prints, (r41) ;
	# emit "*" operands: t31 (k: 5 t: 14), r5 (k: 4 t: 14)
	mov4 r43, [r5] ;
	# emit "call" operands: t32 (k: 5 t: 14), FindMin (k: 9 t: 19)
	call r44, FindMin, (r3, r43) ;
	# emit "call" operands: t33 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r45, Retrieve, (r44) ;
	# emit "call", print32 (k: 9 t: 19)
	call r46, print32, (r45) ;
	# emit "&" operands: t35 (k: 5 t: 14), testdsl.istr4 (k: 7 t: 18)
	call r47, testdsl.istr4, () ;
	# emit "call", prints (k: 9 t: 19)
	call r48, prints, (r47) ;
	# emit "*" operands: t37 (k: 5 t: 14), r5 (k: 4 t: 14)
	mov4 r49, [r5] ;
	# emit "*" operands: t38 (k: 5 t: 14), r6 (k: 4 t: 14)
	mov4 r50, [r6] ;
	# emit "call" operands: t39 (k: 5 t: 14), FindMax (k: 9 t: 19)
	call r51, FindMax, (r3, r49, r50) ;
	# emit "call" operands: t40 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r52, Retrieve, (r51) ;
	# emit "call", print32 (k: 9 t: 19)
	call r53, print32, (r52) ;
	# emit "&" operands: t42 (k: 5 t: 14), testdsl.istr5 (k: 7 t: 18)
	call r54, testdsl.istr5, () ;
	# emit "call", prints (k: 9 t: 19)
	call r55, prints, (r54) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55)>

