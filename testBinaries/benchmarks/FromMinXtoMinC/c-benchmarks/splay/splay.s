# Code auto-generated by MinxCC

splay.istr0 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

splay.istr1 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

splay.istr2 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

splay.istr3 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

splay.istr4 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




Initialize {
	# emit "=" operands: r1 (k: 4 t: 14), 0 (k: 3 t: 14)
	mov4 r1, 0 ;
	# emit "call" operands: r1 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r1, 12 ;
	# emit "!=", r1 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r1) goto .BB0 ;
	# emit "&" operands: t1 (k: 5 t: 14), splay.istr0 (k: 7 t: 18)
	call r2, splay.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r3, prints, (r2) ;
	# emit "&" operands: t3 (k: 5 t: 14), splay.istr1 (k: 7 t: 18)
	call r4, splay.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r5, prints, (r4) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r7, 1 ;
	call r6, mincexit, (r7) ;
.BB0:
	# emit "+" operands: t6 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "+" operands: t8 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*=" operands: t8 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 [r1 + 8], r1 ;
	# emit "*" operands: t10 (k: 5 t: 14), t8 (k: 5 t: 14)
	mov4 r8, [r1 + 8] ;
	# emit "*=" operands: t6 (k: 5 t: 14), t10 (k: 5 t: 14)
	mov4 [r1 + 4], r8 ;
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	ret
} <(), r0, (r1, r2, r3, r4, r5, r6, r7, r8)>

MakeEmpty {
	# emit "==", r1 (k: 4 t: 14), r2 (k: 4 t: 14)
	eq4 r3, r1, r2 ;
	if4 (r3) goto .BB1 ;
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r4, [r1 + 4] ;
	# emit "call", MakeEmpty (k: 9 t: 19)
	call r5, MakeEmpty, (r4, r2) ;
	# emit "+" operands: t3 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t4 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 r6, [r1 + 8] ;
	# emit "call", MakeEmpty (k: 9 t: 19)
	call r7, MakeEmpty, (r6, r2) ;
.BB1:
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7)>

PrintTree {
	# emit "==", r1 (k: 4 t: 14), r2 (k: 4 t: 14)
	eq4 r3, r1, r2 ;
	if4 (r3) goto .BB2 ;
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r4, [r1 + 4] ;
	# emit "call", PrintTree (k: 9 t: 19)
	call r5, PrintTree, (r4, r2) ;
	# emit "*" operands: t2 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r6, [r1] ;
	# emit "call", print32 (k: 9 t: 19)
	call r7, print32, (r6) ;
	# emit "&" operands: t4 (k: 5 t: 14), splay.istr2 (k: 7 t: 18)
	call r8, splay.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r9, prints, (r8) ;
	# emit "+" operands: t6 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t7 (k: 5 t: 14), t6 (k: 5 t: 14)
	mov4 r10, [r1 + 8] ;
	# emit "call", PrintTree (k: 9 t: 19)
	call r11, PrintTree, (r10, r2) ;
.BB2:
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11)>

Find {
	# emit "call" operands: t0 (k: 5 t: 14), Splay (k: 9 t: 19)
	call r5, Splay, (r1, r2, r3, r4) ;
	# emit "ret" operands: t0 (k: 5 t: 14)
	mov4 r0, r5 ;
	ret
} <(r1, r2, r3, r4), r0, (r5)>

FindMin {
	# emit "call" operands: t0 (k: 5 t: 14), Splay (k: 9 t: 19)
	mov4 r5, -30000 ;
	call r4, Splay, (r5, r1, r2, r3) ;
	# emit "ret" operands: t0 (k: 5 t: 14)
	mov4 r0, r4 ;
	ret
} <(r1, r2, r3), r0, (r4, r5)>

FindMax {
	# emit "call" operands: t0 (k: 5 t: 14), Splay (k: 9 t: 19)
	mov4 r5, 30000 ;
	call r4, Splay, (r5, r1, r2, r3) ;
	# emit "ret" operands: t0 (k: 5 t: 14)
	mov4 r0, r4 ;
	ret
} <(r1, r2, r3), r0, (r4, r5)>

SingleRotateWithLeft {
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r3, [r1 + 4] ;
	# emit "=" operands: r2 (k: 4 t: 14), t1 (k: 5 t: 14)
	mov4 r2, r3 ;
	# emit "+" operands: t3 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t4 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 r4, [r2 + 8] ;
	# emit "*=" operands: t0 (k: 5 t: 14), t4 (k: 5 t: 14)
	mov4 [r1 + 4], r4 ;
	# emit "*=" operands: t3 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 [r2 + 8], r1 ;
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1), r0, (r2, r3, r4)>

SingleRotateWithRight {
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r3, [r1 + 8] ;
	# emit "=" operands: r2 (k: 4 t: 14), t1 (k: 5 t: 14)
	mov4 r2, r3 ;
	# emit "+" operands: t3 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t4 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 r4, [r2 + 4] ;
	# emit "*=" operands: t0 (k: 5 t: 14), t4 (k: 5 t: 14)
	mov4 [r1 + 8], r4 ;
	# emit "*=" operands: t3 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 [r2 + 4], r1 ;
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1), r0, (r2, r3, r4)>

Splay {
	# emit "+" operands: t0 (k: 5 t: 14), r4 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "+" operands: t2 (k: 5 t: 14), r4 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*=" operands: t2 (k: 5 t: 14), r3 (k: 4 t: 14)
	mov4 [r4 + 8], r3 ;
	# emit "*" operands: t4 (k: 5 t: 14), t2 (k: 5 t: 14)
	mov4 r7, [r4 + 8] ;
	# emit "*=" operands: t0 (k: 5 t: 14), t4 (k: 5 t: 14)
	mov4 [r4 + 4], r7 ;
	# emit "=" operands: r6 (k: 4 t: 14), r4 (k: 4 t: 14)
	mov4 r6, r4 ;
	# emit "=" operands: r5 (k: 4 t: 14), r6 (k: 4 t: 14)
	mov4 r5, r6 ;
	# emit "*=" operands: r3 (k: 4 t: 14), r1 (k: 4 t: 4)
	mov4 [r3], r1 ;
	# emit "jmp" operands:  (k: 150550112 t: -16)
	goto .BB9
.BB3:
	# emit "*" operands: t8 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r8, [r2] ;
	# emit ">=" operands:  (k: 150543672 t: 0), r1 (k: 4 t: 4), t8 (k: 5 t: 4)
	mov4 r9, r1 ;
	sub4 r9, r8 ;
	# ~x
	mul4 r9, -1 ;
	add4 r9, -1 ;
	# xor
	mov4 r10, r8 ;
	mov4 r11, r8 ;
	or4 r10, r1 ;
	and4 r11, r1 ;
	sub4 r10, r11 ;
	or4 r10, r9 ;
	# ~x
	mov4 r9, r1 ;
	mul4 r9, -1 ;
	add4 r9, -1 ;
	or4 r9, r8 ;
	and4 r9, r10 ;
	sr4 r9, 31 ;
	if4 (r9) goto .BB6 ;
	# emit "+" operands: t9 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t10 (k: 5 t: 14), t9 (k: 5 t: 14)
	mov4 r12, [r2 + 4] ;
	# emit "*" operands: t11 (k: 5 t: 4), t10 (k: 5 t: 14)
	mov4 r13, [r12] ;
	# emit ">=" operands:  (k: 150542928 t: -128), r1 (k: 4 t: 4), t11 (k: 5 t: 4)
	mov4 r14, r1 ;
	sub4 r14, r13 ;
	# ~x
	mul4 r14, -1 ;
	add4 r14, -1 ;
	# xor
	mov4 r15, r13 ;
	mov4 r16, r13 ;
	or4 r15, r1 ;
	and4 r16, r1 ;
	sub4 r15, r16 ;
	or4 r15, r14 ;
	# ~x
	mov4 r14, r1 ;
	mul4 r14, -1 ;
	add4 r14, -1 ;
	or4 r14, r13 ;
	and4 r14, r15 ;
	sr4 r14, 31 ;
	if4 (r14) goto .BB4 ;
	# emit "call" operands: r2 (k: 4 t: 14), SingleRotateWithLeft (k: 9 t: 19)
	call r2, SingleRotateWithLeft, (r2) ;
.BB4:
	# emit "+" operands: t13 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t14 (k: 5 t: 14), t13 (k: 5 t: 14)
	mov4 r17, [r2 + 4] ;
	# emit "!=" operands:  (k: 150543744 t: -88), t14 (k: 5 t: 14), r3 (k: 4 t: 14)
	eq4 r18, r17, r3 ;
	# outputjz
	if4 (r18) goto .BB20 ;
	mov4 r19, 1 ;
	goto .BB21
.BB20:
	mov4 r19, 0 ;
.BB21:
	if4 (r19) goto .BB5 ;
	# emit "jmp"
	goto .BB10
.BB5:
	# emit "+" operands: t15 (k: 5 t: 14), r6 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*=" operands: t15 (k: 5 t: 14), r2 (k: 4 t: 14)
	mov4 [r6 + 4], r2 ;
	# emit "=" operands: r6 (k: 4 t: 14), r2 (k: 4 t: 14)
	mov4 r6, r2 ;
	# emit "+" operands: t18 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t19 (k: 5 t: 14), t18 (k: 5 t: 14)
	mov4 r20, [r2 + 4] ;
	# emit "=" operands: r2 (k: 4 t: 14), t19 (k: 5 t: 14)
	mov4 r2, r20 ;
	# emit "jmp" operands:  (k: 150550112 t: -16)
	goto .BB9
.BB6:
	# emit "+" operands: t20 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t21 (k: 5 t: 14), t20 (k: 5 t: 14)
	mov4 r21, [r2 + 8] ;
	# emit "*" operands: t22 (k: 5 t: 4), t21 (k: 5 t: 14)
	mov4 r22, [r21] ;
	# emit "<=" operands:  (k: 150545152 t: -88), r1 (k: 4 t: 4), t22 (k: 5 t: 4)
	mov4 r23, r22 ;
	sub4 r23, r1 ;
	# ~x
	mul4 r23, -1 ;
	add4 r23, -1 ;
	# xor
	mov4 r24, r1 ;
	mov4 r25, r1 ;
	or4 r24, r22 ;
	and4 r25, r22 ;
	sub4 r24, r25 ;
	or4 r24, r23 ;
	# ~x
	mov4 r23, r22 ;
	mul4 r23, -1 ;
	add4 r23, -1 ;
	or4 r23, r1 ;
	and4 r23, r24 ;
	sr4 r23, 31 ;
	if4 (r23) goto .BB7 ;
	# emit "call" operands: r2 (k: 4 t: 14), SingleRotateWithRight (k: 9 t: 19)
	call r2, SingleRotateWithRight, (r2) ;
.BB7:
	# emit "+" operands: t24 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t25 (k: 5 t: 14), t24 (k: 5 t: 14)
	mov4 r26, [r2 + 8] ;
	# emit "!=" operands:  (k: 150550184 t: -88), t25 (k: 5 t: 14), r3 (k: 4 t: 14)
	eq4 r27, r26, r3 ;
	# outputjz
	if4 (r27) goto .BB22 ;
	mov4 r28, 1 ;
	goto .BB23
.BB22:
	mov4 r28, 0 ;
.BB23:
	if4 (r28) goto .BB8 ;
	# emit "jmp"
	goto .BB10
.BB8:
	# emit "+" operands: t26 (k: 5 t: 14), r5 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*=" operands: t26 (k: 5 t: 14), r2 (k: 4 t: 14)
	mov4 [r5 + 8], r2 ;
	# emit "=" operands: r5 (k: 4 t: 14), r2 (k: 4 t: 14)
	mov4 r5, r2 ;
	# emit "+" operands: t29 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t30 (k: 5 t: 14), t29 (k: 5 t: 14)
	mov4 r29, [r2 + 8] ;
	# emit "=" operands: r2 (k: 4 t: 14), t30 (k: 5 t: 14)
	mov4 r2, r29 ;
.BB9:
	# emit "*" operands: t31 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r30, [r2] ;
	# emit "!=" operands:  (k: 150540768 t: -80), r1 (k: 4 t: 4), t31 (k: 5 t: 4)
	eq4 r31, r1, r30 ;
	# outputjz
	if4 (r31) goto .BB24 ;
	mov4 r32, 1 ;
	goto .BB25
.BB24:
	mov4 r32, 0 ;
.BB25:
	if4 (r32) goto .BB3 ;
.BB10:
	# emit "+" operands: t32 (k: 5 t: 14), r5 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "+" operands: t34 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t35 (k: 5 t: 14), t34 (k: 5 t: 14)
	mov4 r33, [r2 + 4] ;
	# emit "*=" operands: t32 (k: 5 t: 14), t35 (k: 5 t: 14)
	mov4 [r5 + 8], r33 ;
	# emit "+" operands: t37 (k: 5 t: 14), r6 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "+" operands: t39 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t40 (k: 5 t: 14), t39 (k: 5 t: 14)
	mov4 r34, [r2 + 8] ;
	# emit "*=" operands: t37 (k: 5 t: 14), t40 (k: 5 t: 14)
	mov4 [r6 + 4], r34 ;
	# emit "+" operands: t43 (k: 5 t: 14), r4 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t44 (k: 5 t: 14), t43 (k: 5 t: 14)
	mov4 r35, [r4 + 8] ;
	# emit "*=" operands: t34 (k: 5 t: 14), t44 (k: 5 t: 14)
	mov4 [r2 + 4], r35 ;
	# emit "+" operands: t47 (k: 5 t: 14), r4 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t48 (k: 5 t: 14), t47 (k: 5 t: 14)
	mov4 r36, [r4 + 4] ;
	# emit "*=" operands: t39 (k: 5 t: 14), t48 (k: 5 t: 14)
	mov4 [r2 + 8], r36 ;
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1, r2, r3, r4), r0, (r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36)>

Insert {
	# emit "=" operands: r5 (k: 4 t: 14), 0 (k: 3 t: 14)
	mov4 r5, 0 ;
	# emit "call" operands: r5 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r5, 12 ;
	# emit "!=" operands:  (k: 150555312 t: -72), r5 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r5) goto .BB11 ;
	# emit "&" operands: t1 (k: 5 t: 14), splay.istr3 (k: 7 t: 18)
	call r6, splay.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r7, prints, (r6) ;
	# emit "&" operands: t3 (k: 5 t: 14), splay.istr4 (k: 7 t: 18)
	call r8, splay.istr4, () ;
	# emit "call", prints (k: 9 t: 19)
	call r9, prints, (r8) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r11, 1 ;
	call r10, mincexit, (r11) ;
.BB11:
	# emit "*=" operands: r5 (k: 4 t: 14), r1 (k: 4 t: 4)
	mov4 [r5], r1 ;
	# emit "!=" operands:  (k: 150556600 t: 120), r2 (k: 4 t: 14), r3 (k: 4 t: 14)
	eq4 r12, r2, r3 ;
	# outputjz
	if4 (r12) goto .BB26 ;
	mov4 r13, 1 ;
	goto .BB27
.BB26:
	mov4 r13, 0 ;
.BB27:
	if4 (r13) goto .BB12 ;
	# emit "+" operands: t8 (k: 5 t: 14), r5 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "+" operands: t10 (k: 5 t: 14), r5 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*=" operands: t10 (k: 5 t: 14), r3 (k: 4 t: 14)
	mov4 [r5 + 8], r3 ;
	# emit "*" operands: t12 (k: 5 t: 14), t10 (k: 5 t: 14)
	mov4 r14, [r5 + 8] ;
	# emit "*=" operands: t8 (k: 5 t: 14), t12 (k: 5 t: 14)
	mov4 [r5 + 4], r14 ;
	# emit "=" operands: r2 (k: 4 t: 14), r5 (k: 4 t: 14)
	mov4 r2, r5 ;
	# emit "jmp" operands:  (k: 150560040 t: 56)
	goto .BB15
.BB12:
	# emit "call" operands: r2 (k: 4 t: 14), Splay (k: 9 t: 19)
	call r2, Splay, (r1, r2, r3, r4) ;
	# emit "*" operands: t15 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r15, [r2] ;
	# emit ">=" operands:  (k: 150558072 t: -32), r1 (k: 4 t: 4), t15 (k: 5 t: 4)
	mov4 r16, r1 ;
	sub4 r16, r15 ;
	# ~x
	mul4 r16, -1 ;
	add4 r16, -1 ;
	# xor
	mov4 r17, r15 ;
	mov4 r18, r15 ;
	or4 r17, r1 ;
	and4 r18, r1 ;
	sub4 r17, r18 ;
	or4 r17, r16 ;
	# ~x
	mov4 r16, r1 ;
	mul4 r16, -1 ;
	add4 r16, -1 ;
	or4 r16, r15 ;
	and4 r16, r17 ;
	sr4 r16, 31 ;
	if4 (r16) goto .BB13 ;
	# emit "+" operands: t16 (k: 5 t: 14), r5 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "+" operands: t18 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t19 (k: 5 t: 14), t18 (k: 5 t: 14)
	mov4 r19, [r2 + 4] ;
	# emit "*=" operands: t16 (k: 5 t: 14), t19 (k: 5 t: 14)
	mov4 [r5 + 4], r19 ;
	# emit "+" operands: t21 (k: 5 t: 14), r5 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*=" operands: t21 (k: 5 t: 14), r2 (k: 4 t: 14)
	mov4 [r5 + 8], r2 ;
	# emit "*=" operands: t18 (k: 5 t: 14), r3 (k: 4 t: 14)
	mov4 [r2 + 4], r3 ;
	# emit "=" operands: r2 (k: 4 t: 14), r5 (k: 4 t: 14)
	mov4 r2, r5 ;
	# emit "jmp" operands:  (k: 150560040 t: 56)
	goto .BB15
.BB13:
	# emit "*" operands: t26 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r20, [r2] ;
	# emit ">=" operands:  (k: 150559968 t: 56), t26 (k: 5 t: 4), r1 (k: 4 t: 4)
	mov4 r21, r20 ;
	sub4 r21, r1 ;
	# ~x
	mul4 r21, -1 ;
	add4 r21, -1 ;
	# xor
	mov4 r22, r1 ;
	mov4 r23, r1 ;
	or4 r22, r20 ;
	and4 r23, r20 ;
	sub4 r22, r23 ;
	or4 r22, r21 ;
	# ~x
	mov4 r21, r20 ;
	mul4 r21, -1 ;
	add4 r21, -1 ;
	or4 r21, r1 ;
	and4 r21, r22 ;
	sr4 r21, 31 ;
	if4 (r21) goto .BB14 ;
	# emit "+" operands: t27 (k: 5 t: 14), r5 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "+" operands: t29 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t30 (k: 5 t: 14), t29 (k: 5 t: 14)
	mov4 r24, [r2 + 8] ;
	# emit "*=" operands: t27 (k: 5 t: 14), t30 (k: 5 t: 14)
	mov4 [r5 + 8], r24 ;
	# emit "+" operands: t32 (k: 5 t: 14), r5 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*=" operands: t32 (k: 5 t: 14), r2 (k: 4 t: 14)
	mov4 [r5 + 4], r2 ;
	# emit "*=" operands: t29 (k: 5 t: 14), r3 (k: 4 t: 14)
	mov4 [r2 + 8], r3 ;
	# emit "=" operands: r2 (k: 4 t: 14), r5 (k: 4 t: 14)
	mov4 r2, r5 ;
	# emit "jmp" operands:  (k: 150560040 t: 56)
	goto .BB15
.BB14:
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	# emit "jmp"
	goto .BB16
.BB15:
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
.BB16:
	ret
} <(r1, r2, r3, r4), r0, (r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24)>

Remove {
	# emit "==", r2 (k: 4 t: 14), r3 (k: 4 t: 14)
	eq4 r6, r2, r3 ;
	if4 (r6) goto .BB19 ;
	# emit "call" operands: r2 (k: 4 t: 14), Splay (k: 9 t: 19)
	call r2, Splay, (r1, r2, r3, r4) ;
	# emit "*" operands: t1 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r7, [r2] ;
	# emit "!=", r1 (k: 4 t: 4), t1 (k: 5 t: 4)
	eq4 r8, r1, r7 ;
	# outputjz
	if4 (r8) goto .BB28 ;
	mov4 r9, 1 ;
	goto .BB29
.BB28:
	mov4 r9, 0 ;
.BB29:
	if4 (r9) goto .BB19 ;
	# emit "+" operands: t2 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t3 (k: 5 t: 14), t2 (k: 5 t: 14)
	mov4 r10, [r2 + 4] ;
	# emit "!=" operands:  (k: 150563576 t: -80), t3 (k: 5 t: 14), r3 (k: 4 t: 14)
	eq4 r11, r10, r3 ;
	# outputjz
	if4 (r11) goto .BB30 ;
	mov4 r12, 1 ;
	goto .BB31
.BB30:
	mov4 r12, 0 ;
.BB31:
	if4 (r12) goto .BB17 ;
	# emit "+" operands: t4 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t5 (k: 5 t: 14), t4 (k: 5 t: 14)
	mov4 r13, [r2 + 8] ;
	# emit "=" operands: r5 (k: 4 t: 14), t5 (k: 5 t: 14)
	mov4 r5, r13 ;
	# emit "jmp" operands:  (k: 150563648 t: -88)
	goto .BB18
.BB17:
	# emit "+" operands: t6 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t7 (k: 5 t: 14), t6 (k: 5 t: 14)
	mov4 r14, [r2 + 4] ;
	# emit "=" operands: r5 (k: 4 t: 14), t7 (k: 5 t: 14)
	mov4 r5, r14 ;
	# emit "call" operands: r5 (k: 4 t: 14), Splay (k: 9 t: 19)
	call r5, Splay, (r1, r5, r3, r4) ;
	# emit "+" operands: t9 (k: 5 t: 14), r5 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "+" operands: t11 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t12 (k: 5 t: 14), t11 (k: 5 t: 14)
	mov4 r15, [r2 + 8] ;
	# emit "*=" operands: t9 (k: 5 t: 14), t12 (k: 5 t: 14)
	mov4 [r5 + 8], r15 ;
.BB18:
	# emit "=" operands: r2 (k: 4 t: 14), r5 (k: 4 t: 14)
	mov4 r2, r5 ;
.BB19:
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1, r2, r3, r4), r0, (r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15)>

Retrieve {
	# emit "*" operands: t0 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r2, [r1] ;
	# emit "ret" operands: t0 (k: 5 t: 4)
	mov4 r0, r2 ;
	ret
} <(r1), r0, (r2)>

