# Code auto-generated by MinxCC

testlist.istr0 {
	mov4 r1, 12 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testlist.istr1 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testlist.istr2 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testlist.istr3 {
	mov4 r1, 12 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 70 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 100 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testlist.istr4 {
	mov4 r1, 20 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 70 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 104 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 100 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 100 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




PrintList {
	# emit "call" operands: r2 (k: 4 t: 14), Header (k: 9 t: 19)
	call r2, Header, (r1) ;
	# emit "call" operands: t1 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r3, IsEmpty, (r1) ;
	# emit "" operands:  (k: 142600016 t: 24), t1 (k: 5 t: 4)
	mov4 r4, r3 ;
	sub4 r4, 1 ;
	# ~x
	mov4 r5, r3 ;
	mul4 r5, -1 ;
	add4 r5, -1 ;
	and4 r4, r5 ;
	sr4 r4, 31 ;
	if4 (r4) goto .BB0 ;
	# emit "&" operands: t2 (k: 5 t: 14), testlist.istr0 (k: 7 t: 18)
	call r6, testlist.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r7, prints, (r6) ;
	# emit "jmp"
	goto .BB1
.BB0:
	# emit "call" operands: r2 (k: 4 t: 14), Advance (k: 9 t: 19)
	call r2, Advance, (r2) ;
	# emit "call" operands: t5 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r8, Retrieve, (r2) ;
	# emit "call", print32 (k: 9 t: 19)
	call r9, print32, (r8) ;
	# emit "&" operands: t7 (k: 5 t: 14), testlist.istr1 (k: 7 t: 18)
	call r10, testlist.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r11, prints, (r10) ;
	# emit "call" operands: t9 (k: 5 t: 4), IsLast (k: 9 t: 19)
	call r12, IsLast, (r2, r1) ;
	# emit "" operands:  (k: 142600016 t: 24), t9 (k: 5 t: 4)
	mov4 r13, r12 ;
	sub4 r13, 1 ;
	# ~x
	mov4 r14, r12 ;
	mul4 r14, -1 ;
	add4 r14, -1 ;
	and4 r13, r14 ;
	sr4 r13, 31 ;
	if4 (r13) goto .BB0 ;
	# emit "&" operands: t10 (k: 5 t: 14), testlist.istr2 (k: 7 t: 18)
	call r15, testlist.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r16, prints, (r15) ;
.BB1:
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16)>

main {
	# emit "call" operands: r3 (k: 4 t: 14), MakeEmpty (k: 9 t: 19)
	mov4 r6, 0 ;
	call r3, MakeEmpty, (r6) ;
	# emit "call" operands: r4 (k: 4 t: 14), Header (k: 9 t: 19)
	call r4, Header, (r3) ;
	# emit "call", PrintList (k: 9 t: 19)
	call r7, PrintList, (r3) ;
	# emit "=" operands: r5 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "jmp" operands:  (k: 142603304 t: 0)
	goto .BB3
.BB2:
	# emit "call", Insert (k: 9 t: 19)
	call r8, Insert, (r5, r3, r4) ;
	# emit "call", PrintList (k: 9 t: 19)
	call r9, PrintList, (r3) ;
	# emit "call" operands: r4 (k: 4 t: 14), Advance (k: 9 t: 19)
	call r4, Advance, (r4) ;
	# emit "++" operands: r5 (k: 4 t: 4)
	add4 r5, 1 ;
.BB3:
	# emit "<" operands:  (k: 142602632 t: -72), r5 (k: 4 t: 4), 10 (k: 3 t: 4)
	mov4 r10, r5 ;
	sub4 r10, 10 ;
	# xor
	mov4 r11, r5 ;
	mov4 r13, r5 ;
	or4 r11, 10 ;
	and4 r13, 10 ;
	sub4 r11, r13 ;
	# xor
	mov4 r12, r10 ;
	mov4 r14, r10 ;
	or4 r12, r5 ;
	and4 r14, r5 ;
	sub4 r12, r14 ;
	and4 r11, r12 ;
	# xor
	mov4 r12, r10 ;
	mov4 r15, r10 ;
	or4 r12, r11 ;
	and4 r15, r11 ;
	sub4 r12, r15 ;
	sr4 r12, 31 ;
	if4 (r12) goto .BB2 ;
	# emit "=" operands: r5 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "jmp" operands:  (k: 142604592 t: 104)
	goto .BB5
.BB4:
	# emit "call", Delete (k: 9 t: 19)
	call r16, Delete, (r5, r3) ;
	# emit "+" operands: t5 (k: 5 t: 4), r5 (k: 4 t: 4), 2 (k: 3 t: 4)
	mov4 r17, r5 ;
	add4 r17, 2 ;
	# emit "=" operands: r5 (k: 4 t: 4), t5 (k: 5 t: 4)
	mov4 r5, r17 ;
.BB5:
	# emit "<" operands:  (k: 142603520 t: 32), r5 (k: 4 t: 4), 10 (k: 3 t: 4)
	mov4 r18, r5 ;
	sub4 r18, 10 ;
	# xor
	mov4 r19, r5 ;
	mov4 r21, r5 ;
	or4 r19, 10 ;
	and4 r21, 10 ;
	sub4 r19, r21 ;
	# xor
	mov4 r20, r18 ;
	mov4 r22, r18 ;
	or4 r20, r5 ;
	and4 r22, r5 ;
	sub4 r20, r22 ;
	and4 r19, r20 ;
	# xor
	mov4 r20, r18 ;
	mov4 r23, r18 ;
	or4 r20, r19 ;
	and4 r23, r19 ;
	sub4 r20, r23 ;
	sr4 r20, 31 ;
	if4 (r20) goto .BB4 ;
	# emit "=" operands: r5 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "jmp" operands:  (k: 142609920 t: 104)
	goto .BB12
.BB6:
	# emit "&" operands: t7 (k: 5 t: 4), r5 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r24, r5 ;
	and4 r24, 1 ;
	# emit "==" operands:  (k: 142610280 t: -40), t7 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r25, r24 ;
	sub4 r25, 1 ;
	# ~x
	mov4 r26, r24 ;
	mul4 r26, -1 ;
	add4 r26, -1 ;
	and4 r25, r26 ;
	sr4 r25, 31 ;
	if4 (r25) goto .BB7 ;
	# emit "=" operands: t6 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r27, 0 ;
	# emit "jmp" operands:  (k: 142610208 t: 0)
	goto .BB8
.BB7:
	# emit "=" operands: t6 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r27, 1 ;
.BB8:
	# emit "call" operands: t9 (k: 5 t: 14), Find (k: 9 t: 19)
	call r28, Find, (r5, r3) ;
	# emit "!=" operands:  (k: 142610944 t: 112), t9 (k: 5 t: 14), 0 (k: 3 t: 14)
	if4 (r28) goto .BB9 ;
	# emit "=" operands: t8 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r29, 0 ;
	# emit "jmp" operands:  (k: 142610872 t: 72)
	goto .BB10
.BB9:
	# emit "=" operands: t8 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r29, 1 ;
.BB10:
	# emit "!=" operands:  (k: 142609992 t: 32), t6 (k: 5 t: 4), t8 (k: 5 t: 4)
	eq4 r30, r27, r29 ;
	# outputjz
	if4 (r30) goto .BB13 ;
	mov4 r31, 1 ;
	goto .BB14
.BB13:
	mov4 r31, 0 ;
.BB14:
	if4 (r31) goto .BB11 ;
	# emit "&" operands: t10 (k: 5 t: 14), testlist.istr3 (k: 7 t: 18)
	call r32, testlist.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r33, prints, (r32) ;
.BB11:
	# emit "++" operands: r5 (k: 4 t: 4)
	add4 r5, 1 ;
.BB12:
	# emit "<" operands:  (k: 142609000 t: 104), r5 (k: 4 t: 4), 10 (k: 3 t: 4)
	mov4 r34, r5 ;
	sub4 r34, 10 ;
	# xor
	mov4 r35, r5 ;
	mov4 r37, r5 ;
	or4 r35, 10 ;
	and4 r37, 10 ;
	sub4 r35, r37 ;
	# xor
	mov4 r36, r34 ;
	mov4 r38, r34 ;
	or4 r36, r5 ;
	and4 r38, r5 ;
	sub4 r36, r38 ;
	and4 r35, r36 ;
	# xor
	mov4 r36, r34 ;
	mov4 r39, r34 ;
	or4 r36, r35 ;
	and4 r39, r35 ;
	sub4 r36, r39 ;
	sr4 r36, 31 ;
	if4 (r36) goto .BB6 ;
	# emit "&" operands: t14 (k: 5 t: 14), testlist.istr4 (k: 7 t: 18)
	call r40, testlist.istr4, () ;
	# emit "call", prints (k: 9 t: 19)
	call r41, prints, (r40) ;
	# emit "call", PrintList (k: 9 t: 19)
	call r42, PrintList, (r3) ;
	# emit "call", DeleteList (k: 9 t: 19)
	call r43, DeleteList, (r3) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43)>

