# Code auto-generated by MinxCC

list.istr0 {
	mov4 r1, 15 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

list.istr1 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

list.istr2 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

list.istr3 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




MakeEmpty {
	# emit "==" operands:  (k: 150913816 t: 120), r1 (k: 4 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r1) goto .BB16 ;
	mov4 r2, 1 ;
	goto .BB17
.BB16:
	mov4 r2, 0 ;
.BB17:
	if4 (r2) goto .BB0 ;
	# emit "call", DeleteList (k: 9 t: 19)
	call r3, DeleteList, (r1) ;
.BB0:
	# emit "call" operands: r1 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r1, 8 ;
	# emit "!=", r1 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r1) goto .BB1 ;
	# emit "&" operands: t1 (k: 5 t: 14), list.istr0 (k: 7 t: 18)
	call r4, list.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r5, prints, (r4) ;
	# emit "&" operands: t3 (k: 5 t: 14), list.istr1 (k: 7 t: 18)
	call r6, list.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r7, prints, (r6) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r9, 1 ;
	call r8, mincexit, (r9) ;
.BB1:
	# emit "+" operands: t6 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*=" operands: t6 (k: 5 t: 14), 0 (k: 3 t: 14)
	mov4 r10, 0 ;
	mov4 [r1 + 4], r10 ;
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10)>

IsEmpty {
	# emit "+" operands: t1 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t2 (k: 5 t: 14), t1 (k: 5 t: 14)
	mov4 r2, [r1 + 4] ;
	# emit "==" operands:  (k: 150916512 t: 16), t2 (k: 5 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r2) goto .BB18 ;
	mov4 r3, 1 ;
	goto .BB19
.BB18:
	mov4 r3, 0 ;
.BB19:
	if4 (r3) goto .BB2 ;
	# emit "=" operands: t0 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r4, 0 ;
	# emit "jmp"
	goto .BB3
.BB2:
	# emit "=" operands: t0 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r4, 1 ;
.BB3:
	# emit "ret" operands: t0 (k: 5 t: 4)
	mov4 r0, r4 ;
	ret
} <(r1), r0, (r2, r3, r4)>

IsLast {
	# emit "+" operands: t1 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t2 (k: 5 t: 14), t1 (k: 5 t: 14)
	mov4 r3, [r1 + 4] ;
	# emit "==" operands:  (k: 150917856 t: 80), t2 (k: 5 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r3) goto .BB20 ;
	mov4 r4, 1 ;
	goto .BB21
.BB20:
	mov4 r4, 0 ;
.BB21:
	if4 (r4) goto .BB4 ;
	# emit "=" operands: t0 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "jmp"
	goto .BB5
.BB4:
	# emit "=" operands: t0 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r5, 1 ;
.BB5:
	# emit "ret" operands: t0 (k: 5 t: 4)
	mov4 r0, r5 ;
	ret
} <(r1, r2), r0, (r3, r4, r5)>

Find {
	# emit "+" operands: t0 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r4, [r2 + 4] ;
	# emit "=" operands: r3 (k: 4 t: 14), t1 (k: 5 t: 14)
	mov4 r3, r4 ;
	# emit "jmp" operands:  (k: 150919152 t: 48)
	goto .BB7
.BB6:
	# emit "+" operands: t2 (k: 5 t: 14), r3 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t3 (k: 5 t: 14), t2 (k: 5 t: 14)
	mov4 r5, [r3 + 4] ;
	# emit "=" operands: r3 (k: 4 t: 14), t3 (k: 5 t: 14)
	mov4 r3, r5 ;
.BB7:
	# emit "==", r3 (k: 4 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r3) goto .BB22 ;
	mov4 r6, 1 ;
	goto .BB23
.BB22:
	mov4 r6, 0 ;
.BB23:
	if4 (r6) goto .BB8 ;
	# emit "*" operands: t4 (k: 5 t: 4), r3 (k: 4 t: 14)
	mov4 r7, [r3] ;
	# emit "!=" operands:  (k: 150918712 t: 56), t4 (k: 5 t: 4), r1 (k: 4 t: 4)
	eq4 r8, r7, r1 ;
	# outputjz
	if4 (r8) goto .BB24 ;
	mov4 r9, 1 ;
	goto .BB25
.BB24:
	mov4 r9, 0 ;
.BB25:
	if4 (r9) goto .BB6 ;
.BB8:
	# emit "ret" operands: r3 (k: 4 t: 14)
	mov4 r0, r3 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9)>

Delete {
	# emit "call" operands: r3 (k: 4 t: 14), FindPrevious (k: 9 t: 19)
	call r3, FindPrevious, (r1, r2) ;
	# emit "call" operands: t1 (k: 5 t: 4), IsLast (k: 9 t: 19)
	call r5, IsLast, (r3, r2) ;
	# emit "!", t1 (k: 5 t: 4)
	if4 (r5) goto .BB9 ;
	# emit "+" operands: t2 (k: 5 t: 14), r3 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t3 (k: 5 t: 14), t2 (k: 5 t: 14)
	mov4 r6, [r3 + 4] ;
	# emit "=" operands: r4 (k: 4 t: 14), t3 (k: 5 t: 14)
	mov4 r4, r6 ;
	# emit "+" operands: t5 (k: 5 t: 14), r4 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t6 (k: 5 t: 14), t5 (k: 5 t: 14)
	mov4 r7, [r4 + 4] ;
	# emit "*=" operands: t2 (k: 5 t: 14), t6 (k: 5 t: 14)
	mov4 [r3 + 4], r7 ;
.BB9:
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7)>

FindPrevious {
	# emit "=" operands: r3 (k: 4 t: 14), r2 (k: 4 t: 14)
	mov4 r3, r2 ;
	# emit "jmp" operands:  (k: 150922272 t: 96)
	goto .BB11
.BB10:
	# emit "+" operands: t0 (k: 5 t: 14), r3 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r4, [r3 + 4] ;
	# emit "=" operands: r3 (k: 4 t: 14), t1 (k: 5 t: 14)
	mov4 r3, r4 ;
.BB11:
	# emit "+" operands: t2 (k: 5 t: 14), r3 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t3 (k: 5 t: 14), t2 (k: 5 t: 14)
	mov4 r5, [r3 + 4] ;
	# emit "==", t3 (k: 5 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r5) goto .BB26 ;
	mov4 r6, 1 ;
	goto .BB27
.BB26:
	mov4 r6, 0 ;
.BB27:
	if4 (r6) goto .BB12 ;
	# emit "+" operands: t4 (k: 5 t: 14), r3 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t5 (k: 5 t: 14), t4 (k: 5 t: 14)
	mov4 r7, [r3 + 4] ;
	# emit "*" operands: t6 (k: 5 t: 4), t5 (k: 5 t: 14)
	mov4 r8, [r7] ;
	# emit "!=" operands:  (k: 150922096 t: 104), t6 (k: 5 t: 4), r1 (k: 4 t: 4)
	eq4 r9, r8, r1 ;
	# outputjz
	if4 (r9) goto .BB28 ;
	mov4 r10, 1 ;
	goto .BB29
.BB28:
	mov4 r10, 0 ;
.BB29:
	if4 (r10) goto .BB10 ;
.BB12:
	# emit "ret" operands: r3 (k: 4 t: 14)
	mov4 r0, r3 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10)>

Insert {
	# emit "call" operands: r4 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r4, 8 ;
	# emit "!=", r4 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r4) goto .BB13 ;
	# emit "&" operands: t1 (k: 5 t: 14), list.istr2 (k: 7 t: 18)
	call r5, list.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r6, prints, (r5) ;
	# emit "&" operands: t3 (k: 5 t: 14), list.istr3 (k: 7 t: 18)
	call r7, list.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r8, prints, (r7) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r10, 1 ;
	call r9, mincexit, (r10) ;
.BB13:
	# emit "*=" operands: r4 (k: 4 t: 14), r1 (k: 4 t: 4)
	mov4 [r4], r1 ;
	# emit "+" operands: t8 (k: 5 t: 14), r4 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "+" operands: t10 (k: 5 t: 14), r3 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t11 (k: 5 t: 14), t10 (k: 5 t: 14)
	mov4 r11, [r3 + 4] ;
	# emit "*=" operands: t8 (k: 5 t: 14), t11 (k: 5 t: 14)
	mov4 [r4 + 4], r11 ;
	# emit "*=" operands: t10 (k: 5 t: 14), r4 (k: 4 t: 14)
	mov4 [r3 + 4], r4 ;
	ret
} <(r1, r2, r3), r0, (r4, r5, r6, r7, r8, r9, r10, r11)>

DeleteList {
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r4, [r1 + 4] ;
	# emit "=" operands: r2 (k: 4 t: 14), t1 (k: 5 t: 14)
	mov4 r2, r4 ;
	# emit "*=" operands: t0 (k: 5 t: 14), 0 (k: 3 t: 14)
	mov4 r5, 0 ;
	mov4 [r1 + 4], r5 ;
	# emit "jmp"
	goto .BB15
.BB14:
	# emit "+" operands: t4 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t5 (k: 5 t: 14), t4 (k: 5 t: 14)
	mov4 r6, [r2 + 4] ;
	# emit "=" operands: r3 (k: 4 t: 14), t5 (k: 5 t: 14)
	mov4 r3, r6 ;
	# emit "=" operands: r2 (k: 4 t: 14), r3 (k: 4 t: 14)
	mov4 r2, r3 ;
.BB15:
	# emit "!=" operands:  (k: 150926744 t: -72), r2 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r2) goto .BB14 ;
	ret
} <(r1), r0, (r2, r3, r4, r5, r6)>

Header {
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	ret
} <(r1), r0, ()>

First {
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r2, [r1 + 4] ;
	# emit "ret" operands: t1 (k: 5 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1), r0, (r2)>

Advance {
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r2, [r1 + 4] ;
	# emit "ret" operands: t1 (k: 5 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1), r0, (r2)>

Retrieve {
	# emit "*" operands: t0 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r2, [r1] ;
	# emit "ret" operands: t0 (k: 5 t: 4)
	mov4 r0, r2 ;
	ret
} <(r1), r0, (r2)>

