# Code auto-generated by MinxCC

testrb.istr0 {
	mov4 r1, 22 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 73 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testrb.istr1 {
	mov4 r1, 10 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testrb.istr2 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testrb.istr3 {
	mov4 r1, 8 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 77 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testrb.istr4 {
	mov4 r1, 10 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 44 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 77 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 120 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testrb.istr5 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




main {
	# emit "call" operands: r5 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r5, 4 ;
	# emit "=" operands: r7 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r7, 0 ;
	# emit "*=" operands: r5 (k: 4 t: 14), 0 (k: 3 t: 14)
	mov4 r8, 0 ;
	mov4 [r5], r8 ;
	# emit "call" operands: r3 (k: 4 t: 14), Initialize (k: 9 t: 19)
	call r3, Initialize, (r5) ;
	# emit "*" operands: t4 (k: 5 t: 14), r5 (k: 4 t: 14)
	mov4 r9, [r5] ;
	# emit "call" operands: r3 (k: 4 t: 14), MakeEmpty (k: 9 t: 19)
	call r3, MakeEmpty, (r3, r9) ;
	# emit "=" operands: r6 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r6, 0 ;
	# emit "jmp" operands:  (k: 162121136 t: -120)
	goto .BB1
.BB0:
	# emit "*" operands: t6 (k: 5 t: 14), r5 (k: 4 t: 14)
	mov4 r10, [r5] ;
	# emit "call" operands: r3 (k: 4 t: 14), Insert (k: 9 t: 19)
	call r3, Insert, (r7, r3, r10) ;
	# emit "++" operands: r6 (k: 4 t: 4)
	add4 r6, 1 ;
	# emit "+" operands: t10 (k: 5 t: 4), r7 (k: 4 t: 4), 7 (k: 3 t: 4)
	mov4 r11, r7 ;
	add4 r11, 7 ;
	# emit "%" operands: t11 (k: 5 t: 4), t10 (k: 5 t: 4), 50 (k: 3 t: 4)
	mov4 r13, r11 ;
	div4 r13, 50 ;
	mul4 r13, 50 ;
	mov4 r12, r11 ;
	sub4 r12, r13 ;
	# emit "=" operands: r7 (k: 4 t: 4), t11 (k: 5 t: 4)
	mov4 r7, r12 ;
.BB1:
	# emit "<" operands:  (k: 162119720 t: 64), r6 (k: 4 t: 4), 50 (k: 3 t: 4)
	mov4 r14, r6 ;
	sub4 r14, 50 ;
	# xor
	mov4 r15, r6 ;
	mov4 r17, r6 ;
	or4 r15, 50 ;
	and4 r17, 50 ;
	sub4 r15, r17 ;
	# xor
	mov4 r16, r14 ;
	mov4 r18, r14 ;
	or4 r16, r6 ;
	and4 r18, r6 ;
	sub4 r16, r18 ;
	and4 r15, r16 ;
	# xor
	mov4 r16, r14 ;
	mov4 r19, r14 ;
	or4 r16, r15 ;
	and4 r19, r15 ;
	sub4 r16, r19 ;
	sr4 r16, 31 ;
	if4 (r16) goto .BB0 ;
	# emit "&" operands: t12 (k: 5 t: 14), testrb.istr0 (k: 7 t: 18)
	call r20, testrb.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r21, prints, (r20) ;
	# emit "=" operands: r6 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r6, 0 ;
	# emit "jmp" operands:  (k: 162123376 t: -40)
	goto .BB5
.BB2:
	# emit "*" operands: t14 (k: 5 t: 14), r5 (k: 4 t: 14)
	mov4 r22, [r5] ;
	# emit "call" operands: r4 (k: 4 t: 14), Find (k: 9 t: 19)
	call r4, Find, (r6, r3, r22) ;
	# emit "==" operands:  (k: 162123520 t: 112), r4 (k: 4 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r4) goto .BB6 ;
	mov4 r23, 1 ;
	goto .BB7
.BB6:
	mov4 r23, 0 ;
.BB7:
	if4 (r23) goto .BB3 ;
	# emit "call" operands: t16 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r24, Retrieve, (r4) ;
	# emit "==" operands:  (k: 162123448 t: -112), t16 (k: 5 t: 4), r6 (k: 4 t: 4)
	eq4 r25, r24, r6 ;
	if4 (r25) goto .BB4 ;
.BB3:
	# emit "&" operands: t17 (k: 5 t: 14), testrb.istr1 (k: 7 t: 18)
	call r26, testrb.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r27, prints, (r26) ;
	# emit "call", print32 (k: 9 t: 19)
	call r28, print32, (r6) ;
	# emit "&" operands: t20 (k: 5 t: 14), testrb.istr2 (k: 7 t: 18)
	call r29, testrb.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r30, prints, (r29) ;
.BB4:
	# emit "++" operands: r6 (k: 4 t: 4)
	add4 r6, 1 ;
.BB5:
	# emit "<" operands:  (k: 162121352 t: 0), r6 (k: 4 t: 4), 50 (k: 3 t: 4)
	mov4 r31, r6 ;
	sub4 r31, 50 ;
	# xor
	mov4 r32, r6 ;
	mov4 r34, r6 ;
	or4 r32, 50 ;
	and4 r34, 50 ;
	sub4 r32, r34 ;
	# xor
	mov4 r33, r31 ;
	mov4 r35, r31 ;
	or4 r33, r6 ;
	and4 r35, r6 ;
	sub4 r33, r35 ;
	and4 r32, r33 ;
	# xor
	mov4 r33, r31 ;
	mov4 r36, r31 ;
	or4 r33, r32 ;
	and4 r36, r32 ;
	sub4 r33, r36 ;
	sr4 r33, 31 ;
	if4 (r33) goto .BB2 ;
	# emit "&" operands: t24 (k: 5 t: 14), testrb.istr3 (k: 7 t: 18)
	call r37, testrb.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r38, prints, (r37) ;
	# emit "*" operands: t26 (k: 5 t: 14), r5 (k: 4 t: 14)
	mov4 r39, [r5] ;
	# emit "call" operands: t27 (k: 5 t: 14), FindMin (k: 9 t: 19)
	call r40, FindMin, (r3, r39) ;
	# emit "call" operands: t28 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r41, Retrieve, (r40) ;
	# emit "call", print32 (k: 9 t: 19)
	call r42, print32, (r41) ;
	# emit "&" operands: t30 (k: 5 t: 14), testrb.istr4 (k: 7 t: 18)
	call r43, testrb.istr4, () ;
	# emit "call", prints (k: 9 t: 19)
	call r44, prints, (r43) ;
	# emit "*" operands: t32 (k: 5 t: 14), r5 (k: 4 t: 14)
	mov4 r45, [r5] ;
	# emit "call" operands: t33 (k: 5 t: 14), FindMax (k: 9 t: 19)
	call r46, FindMax, (r3, r45) ;
	# emit "call" operands: t34 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r47, Retrieve, (r46) ;
	# emit "call", print32 (k: 9 t: 19)
	call r48, print32, (r47) ;
	# emit "&" operands: t36 (k: 5 t: 14), testrb.istr5 (k: 7 t: 18)
	call r49, testrb.istr5, () ;
	# emit "call", prints (k: 9 t: 19)
	call r50, prints, (r49) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50)>

