# Code auto-generated by MinxCC

teststkl.istr0 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




main {
	# emit "call" operands: r3 (k: 4 t: 14), CreateStack (k: 9 t: 19)
	call r3, CreateStack, () ;
	# emit "=" operands: r4 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r4, 0 ;
	# emit "jmp" operands:  (k: 164463544 t: -112)
	goto .BB1
.BB0:
	# emit "call", Push (k: 9 t: 19)
	call r5, Push, (r4, r3) ;
	# emit "++" operands: r4 (k: 4 t: 4)
	add4 r4, 1 ;
.BB1:
	# emit "<" operands:  (k: 164463160 t: 72), r4 (k: 4 t: 4), 10 (k: 3 t: 4)
	mov4 r6, r4 ;
	sub4 r6, 10 ;
	# xor
	mov4 r7, r4 ;
	mov4 r9, r4 ;
	or4 r7, 10 ;
	and4 r9, 10 ;
	sub4 r7, r9 ;
	# xor
	mov4 r8, r6 ;
	mov4 r10, r6 ;
	or4 r8, r4 ;
	and4 r10, r4 ;
	sub4 r8, r10 ;
	and4 r7, r8 ;
	# xor
	mov4 r8, r6 ;
	mov4 r11, r6 ;
	or4 r8, r7 ;
	and4 r11, r7 ;
	sub4 r8, r11 ;
	sr4 r8, 31 ;
	if4 (r8) goto .BB0 ;
	# emit "jmp" operands:  (k: 164464552 t: 56)
	goto .BB3
.BB2:
	# emit "call" operands: t3 (k: 5 t: 4), Top (k: 9 t: 19)
	call r12, Top, (r3) ;
	# emit "call", print32 (k: 9 t: 19)
	call r13, print32, (r12) ;
	# emit "&" operands: t5 (k: 5 t: 14), teststkl.istr0 (k: 7 t: 18)
	call r14, teststkl.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r15, prints, (r14) ;
	# emit "call", Pop (k: 9 t: 19)
	call r16, Pop, (r3) ;
.BB3:
	# emit "call" operands: t7 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r17, IsEmpty, (r3) ;
	# emit "" operands:  (k: 164463760 t: -16), t7 (k: 5 t: 4)
	mov4 r18, r17 ;
	sub4 r18, 1 ;
	# ~x
	mov4 r19, r17 ;
	mul4 r19, -1 ;
	add4 r19, -1 ;
	and4 r18, r19 ;
	sr4 r18, 31 ;
	if4 (r18) goto .BB2 ;
	# emit "call", DisposeStack (k: 9 t: 19)
	call r20, DisposeStack, (r3) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20)>

