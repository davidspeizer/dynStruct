# Code auto-generated by MinxCC

binheap.istr0 {
	mov4 r1, 33 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 80 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 113 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 122 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

binheap.istr1 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

binheap.istr2 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

binheap.istr3 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

binheap.istr4 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

binheap.istr5 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

binheap.istr6 {
	mov4 r1, 23 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 80 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 113 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

binheap.istr7 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

binheap.istr8 {
	mov4 r1, 24 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 80 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 113 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

binheap.istr9 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

binheap.istr10 {
	mov4 r1, 24 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 80 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 81 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

binheap.istr11 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




Initialize {
	# emit ">=" operands:  (k: 150810904 t: -120), r1 (k: 4 t: 4), 10 (k: 3 t: 4)
	mov4 r3, r1 ;
	sub4 r3, 10 ;
	# ~x
	mul4 r3, -1 ;
	add4 r3, -1 ;
	# xor
	mov4 r4, 10 ;
	mov4 r5, 10 ;
	or4 r4, r1 ;
	and4 r5, r1 ;
	sub4 r4, r5 ;
	or4 r4, r3 ;
	# ~x
	mov4 r3, r1 ;
	mul4 r3, -1 ;
	add4 r3, -1 ;
	or4 r3, 10 ;
	and4 r3, r4 ;
	sr4 r3, 31 ;
	if4 (r3) goto .BB0 ;
	# emit "&" operands: t0 (k: 5 t: 14), binheap.istr0 (k: 7 t: 18)
	call r6, binheap.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r7, prints, (r6) ;
	# emit "&" operands: t2 (k: 5 t: 14), binheap.istr1 (k: 7 t: 18)
	call r8, binheap.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r9, prints, (r8) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r11, 1 ;
	call r10, mincexit, (r11) ;
.BB0:
	# emit "call" operands: r2 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r2, 12 ;
	# emit "!=" operands:  (k: 150812296 t: -104), r2 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r2) goto .BB1 ;
	# emit "&" operands: t6 (k: 5 t: 14), binheap.istr2 (k: 7 t: 18)
	call r12, binheap.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r13, prints, (r12) ;
	# emit "&" operands: t8 (k: 5 t: 14), binheap.istr3 (k: 7 t: 18)
	call r14, binheap.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r15, prints, (r14) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r17, 1 ;
	call r16, mincexit, (r17) ;
.BB1:
	# emit "+" operands: t11 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "+" operands: t13 (k: 5 t: 4), r1 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r18, r1 ;
	add4 r18, 1 ;
	# emit "<<" operands: t14 (k: 5 t: 5), t13 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "call" operands: t15 (k: 5 t: 14), malloc (k: 9 t: 19)
	alloc r19, r18 * 4;
	# emit "*=" operands: t11 (k: 5 t: 14), t15 (k: 5 t: 14)
	mov4 [r2 + 8], r19 ;
	# emit "*" operands: t17 (k: 5 t: 14), t11 (k: 5 t: 14)
	mov4 r20, [r2 + 8] ;
	# emit "!=", t17 (k: 5 t: 14), 0 (k: 3 t: 14)
	if4 (r20) goto .BB2 ;
	# emit "&" operands: t18 (k: 5 t: 14), binheap.istr4 (k: 7 t: 18)
	call r21, binheap.istr4, () ;
	# emit "call", prints (k: 9 t: 19)
	call r22, prints, (r21) ;
	# emit "&" operands: t20 (k: 5 t: 14), binheap.istr5 (k: 7 t: 18)
	call r23, binheap.istr5, () ;
	# emit "call", prints (k: 9 t: 19)
	call r24, prints, (r23) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r26, 1 ;
	call r25, mincexit, (r26) ;
.BB2:
	# emit "*=" operands: r2 (k: 4 t: 14), r1 (k: 4 t: 4)
	mov4 [r2], r1 ;
	# emit "+" operands: t25 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*=" operands: t25 (k: 5 t: 14), 0 (k: 3 t: 4)
	mov4 r27, 0 ;
	mov4 [r2 + 4], r27 ;
	# emit "+" operands: t28 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t29 (k: 5 t: 14), t28 (k: 5 t: 14)
	mov4 r28, [r2 + 8] ;
	# emit "*=" operands: t29 (k: 5 t: 14), -32767 (k: 3 t: 4)
	mov4 r29, -32767 ;
	mov4 [r28], r29 ;
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29)>

MakeEmpty {
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*=" operands: t0 (k: 5 t: 14), 0 (k: 3 t: 4)
	mov4 r2, 0 ;
	mov4 [r1 + 4], r2 ;
	ret
} <(r1), r0, (r2)>

Insert {
	# emit "call" operands: t0 (k: 5 t: 4), IsFull (k: 9 t: 19)
	call r4, IsFull, (r2) ;
	# emit "" operands:  (k: 150822104 t: 72), t0 (k: 5 t: 4)
	mov4 r5, r4 ;
	sub4 r5, 1 ;
	# ~x
	mov4 r6, r4 ;
	mul4 r6, -1 ;
	add4 r6, -1 ;
	and4 r5, r6 ;
	sr4 r5, 31 ;
	if4 (r5) goto .BB3 ;
	# emit "&" operands: t1 (k: 5 t: 14), binheap.istr6 (k: 7 t: 18)
	call r7, binheap.istr6, () ;
	# emit "call", prints (k: 9 t: 19)
	call r8, prints, (r7) ;
	# emit "&" operands: t3 (k: 5 t: 14), binheap.istr7 (k: 7 t: 18)
	call r9, binheap.istr7, () ;
	# emit "call", prints (k: 9 t: 19)
	call r10, prints, (r9) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r12, 1 ;
	call r11, mincexit, (r12) ;
	# emit "jmp"
	goto .BB6
.BB3:
	# emit "+" operands: t6 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t7 (k: 5 t: 4), t6 (k: 5 t: 14)
	mov4 r13, [r2 + 4] ;
	# emit "+" operands: t8 (k: 5 t: 4), t7 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r14, r13 ;
	add4 r14, 1 ;
	# emit "*=" operands: t6 (k: 5 t: 14), t8 (k: 5 t: 4)
	mov4 [r2 + 4], r14 ;
	# emit "*" operands: t9 (k: 5 t: 4), t6 (k: 5 t: 14)
	mov4 r15, [r2 + 4] ;
	# emit "=" operands: r3 (k: 4 t: 4), t9 (k: 5 t: 4)
	mov4 r3, r15 ;
	# emit "jmp" operands:  (k: 150823352 t: -112)
	goto .BB5
.BB4:
	# emit "<<" operands: t10 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t11 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t12 (k: 5 t: 14), t11 (k: 5 t: 14)
	mov4 r16, [r2 + 8] ;
	# emit "+" operands: t13 (k: 5 t: 14), t12 (k: 5 t: 14), t10 (k: 5 t: 4)
	mov4 r17, r16 ;
	add4 r17, r3 * 4 ;
	# emit ">>" operands: t15 (k: 5 t: 4), r3 (k: 4 t: 4), 1 (k: 3 t: 4)
	# signed >>
	mov4 r19, r3 ;
	mov4 r18, -2147483648 ;
	add4 r19, -2147483648 ;
	sr4 r19, 1 ;
	sr4 r18, 1 ;
	sub4 r19, r18 ;
	# emit "<<" operands: t16 (k: 5 t: 4), t15 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "*" operands: t17 (k: 5 t: 14), t11 (k: 5 t: 14)
	mov4 r20, [r2 + 8] ;
	# emit "+" operands: t18 (k: 5 t: 14), t17 (k: 5 t: 14), t16 (k: 5 t: 4)
	mov4 r21, r20 ;
	add4 r21, r19 * 4 ;
	# emit "*" operands: t19 (k: 5 t: 4), t18 (k: 5 t: 14)
	mov4 r22, [r21] ;
	# emit "*=" operands: t13 (k: 5 t: 14), t19 (k: 5 t: 4)
	mov4 [r17], r22 ;
	# emit ">>" operands: t21 (k: 5 t: 4), r3 (k: 4 t: 4), 1 (k: 3 t: 4)
	# signed >>
	mov4 r24, r3 ;
	mov4 r23, -2147483648 ;
	add4 r24, -2147483648 ;
	sr4 r24, 1 ;
	sr4 r23, 1 ;
	sub4 r24, r23 ;
	# emit "=" operands: r3 (k: 4 t: 4), t21 (k: 5 t: 4)
	mov4 r3, r24 ;
.BB5:
	# emit ">>" operands: t22 (k: 5 t: 4), r3 (k: 4 t: 4), 1 (k: 3 t: 4)
	# signed >>
	mov4 r26, r3 ;
	mov4 r25, -2147483648 ;
	add4 r26, -2147483648 ;
	sr4 r26, 1 ;
	sr4 r25, 1 ;
	sub4 r26, r25 ;
	# emit "<<" operands: t23 (k: 5 t: 4), t22 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t24 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t25 (k: 5 t: 14), t24 (k: 5 t: 14)
	mov4 r27, [r2 + 8] ;
	# emit "+" operands: t26 (k: 5 t: 14), t25 (k: 5 t: 14), t23 (k: 5 t: 4)
	mov4 r28, r27 ;
	add4 r28, r26 * 4 ;
	# emit "*" operands: t27 (k: 5 t: 4), t26 (k: 5 t: 14)
	mov4 r29, [r28] ;
	# emit ">" operands:  (k: 150822032 t: 72), t27 (k: 5 t: 4), r1 (k: 4 t: 4)
	mov4 r30, r1 ;
	sub4 r30, r29 ;
	# xor
	mov4 r31, r1 ;
	mov4 r33, r1 ;
	or4 r31, r29 ;
	and4 r33, r29 ;
	sub4 r31, r33 ;
	# xor
	mov4 r32, r30 ;
	mov4 r34, r30 ;
	or4 r32, r1 ;
	and4 r34, r1 ;
	sub4 r32, r34 ;
	and4 r31, r32 ;
	# xor
	mov4 r32, r30 ;
	mov4 r35, r30 ;
	or4 r32, r31 ;
	and4 r35, r31 ;
	sub4 r32, r35 ;
	sr4 r32, 31 ;
	if4 (r32) goto .BB4 ;
	# emit "<<" operands: t28 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t29 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t30 (k: 5 t: 14), t29 (k: 5 t: 14)
	mov4 r36, [r2 + 8] ;
	# emit "+" operands: t31 (k: 5 t: 14), t30 (k: 5 t: 14), t28 (k: 5 t: 4)
	mov4 r37, r36 ;
	add4 r37, r3 * 4 ;
	# emit "*=" operands: t31 (k: 5 t: 14), r1 (k: 4 t: 4)
	mov4 [r37], r1 ;
.BB6:
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37)>

DeleteMin {
	# emit "call" operands: t0 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r6, IsEmpty, (r1) ;
	# emit "" operands:  (k: 150828104 t: 32), t0 (k: 5 t: 4)
	mov4 r7, r6 ;
	sub4 r7, 1 ;
	# ~x
	mov4 r8, r6 ;
	mul4 r8, -1 ;
	add4 r8, -1 ;
	and4 r7, r8 ;
	sr4 r7, 31 ;
	if4 (r7) goto .BB7 ;
	# emit "&" operands: t1 (k: 5 t: 14), binheap.istr8 (k: 7 t: 18)
	call r9, binheap.istr8, () ;
	# emit "call", prints (k: 9 t: 19)
	call r10, prints, (r9) ;
	# emit "&" operands: t3 (k: 5 t: 14), binheap.istr9 (k: 7 t: 18)
	call r11, binheap.istr9, () ;
	# emit "call", prints (k: 9 t: 19)
	call r12, prints, (r11) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r14, 1 ;
	call r13, mincexit, (r14) ;
	# emit "+" operands: t6 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t7 (k: 5 t: 14), t6 (k: 5 t: 14)
	mov4 r15, [r1 + 8] ;
	# emit "*" operands: t8 (k: 5 t: 4), t7 (k: 5 t: 14)
	mov4 r16, [r15] ;
	# emit "ret" operands: t8 (k: 5 t: 4)
	mov4 r0, r16 ;
	# emit "jmp"
	goto .BB13
.BB7:
	# emit "+" operands: t9 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t10 (k: 5 t: 14), t9 (k: 5 t: 14)
	mov4 r17, [r1 + 8] ;
	# emit "+" operands: t11 (k: 5 t: 14), t10 (k: 5 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t12 (k: 5 t: 4), t11 (k: 5 t: 14)
	mov4 r18, [r17 + 4] ;
	# emit "=" operands: r4 (k: 4 t: 4), t12 (k: 5 t: 4)
	mov4 r4, r18 ;
	# emit "+" operands: t13 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t14 (k: 5 t: 4), t13 (k: 5 t: 14)
	mov4 r19, [r1 + 4] ;
	# emit "+" operands: t15 (k: 5 t: 4), t14 (k: 5 t: 4), -1 (k: 3 t: 4)
	mov4 r20, r19 ;
	add4 r20, -1 ;
	# emit "*=" operands: t13 (k: 5 t: 14), t15 (k: 5 t: 4)
	mov4 [r1 + 4], r20 ;
	# emit "<<" operands: t17 (k: 5 t: 4), t14 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "*" operands: t18 (k: 5 t: 14), t9 (k: 5 t: 14)
	mov4 r21, [r1 + 8] ;
	# emit "+" operands: t19 (k: 5 t: 14), t18 (k: 5 t: 14), t17 (k: 5 t: 4)
	mov4 r22, r21 ;
	add4 r22, r19 * 4 ;
	# emit "*" operands: t20 (k: 5 t: 4), t19 (k: 5 t: 14)
	mov4 r23, [r22] ;
	# emit "=" operands: r5 (k: 4 t: 4), t20 (k: 5 t: 4)
	mov4 r5, r23 ;
	# emit "=" operands: r2 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r2, 1 ;
	# emit "jmp" operands:  (k: 150834312 t: 104)
	goto .BB11
.BB8:
	# emit "<<" operands: t21 (k: 5 t: 4), r2 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r24, r2 ;
	sl4 r24, 1 ;
	# emit "=" operands: r3 (k: 4 t: 4), t21 (k: 5 t: 4)
	mov4 r3, r24 ;
	# emit "+" operands: t22 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t23 (k: 5 t: 4), t22 (k: 5 t: 14)
	mov4 r25, [r1 + 4] ;
	# emit "==" operands:  (k: 150832112 t: -48), r3 (k: 4 t: 4), t23 (k: 5 t: 4)
	eq4 r26, r3, r25 ;
	if4 (r26) goto .BB9 ;
	# emit "+" operands: t24 (k: 5 t: 4), r3 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r27, r3 ;
	add4 r27, 1 ;
	# emit "<<" operands: t25 (k: 5 t: 4), t24 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t26 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t27 (k: 5 t: 14), t26 (k: 5 t: 14)
	mov4 r28, [r1 + 8] ;
	# emit "+" operands: t28 (k: 5 t: 14), t27 (k: 5 t: 14), t25 (k: 5 t: 4)
	mov4 r29, r28 ;
	add4 r29, r27 * 4 ;
	# emit "*" operands: t29 (k: 5 t: 4), t28 (k: 5 t: 14)
	mov4 r30, [r29] ;
	# emit "<<" operands: t30 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "*" operands: t31 (k: 5 t: 14), t26 (k: 5 t: 14)
	mov4 r31, [r1 + 8] ;
	# emit "+" operands: t32 (k: 5 t: 14), t31 (k: 5 t: 14), t30 (k: 5 t: 4)
	mov4 r32, r31 ;
	add4 r32, r3 * 4 ;
	# emit "*" operands: t33 (k: 5 t: 4), t32 (k: 5 t: 14)
	mov4 r33, [r32] ;
	# emit ">=" operands:  (k: 150832112 t: -48), t29 (k: 5 t: 4), t33 (k: 5 t: 4)
	mov4 r34, r30 ;
	sub4 r34, r33 ;
	# ~x
	mul4 r34, -1 ;
	add4 r34, -1 ;
	# xor
	mov4 r35, r33 ;
	mov4 r36, r33 ;
	or4 r35, r30 ;
	and4 r36, r30 ;
	sub4 r35, r36 ;
	or4 r35, r34 ;
	# ~x
	mov4 r34, r30 ;
	mul4 r34, -1 ;
	add4 r34, -1 ;
	or4 r34, r33 ;
	and4 r34, r35 ;
	sr4 r34, 31 ;
	if4 (r34) goto .BB9 ;
	# emit "++" operands: r3 (k: 4 t: 4)
	add4 r3, 1 ;
.BB9:
	# emit "<<" operands: t36 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t37 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t38 (k: 5 t: 14), t37 (k: 5 t: 14)
	mov4 r37, [r1 + 8] ;
	# emit "+" operands: t39 (k: 5 t: 14), t38 (k: 5 t: 14), t36 (k: 5 t: 4)
	mov4 r38, r37 ;
	add4 r38, r3 * 4 ;
	# emit "*" operands: t40 (k: 5 t: 4), t39 (k: 5 t: 14)
	mov4 r39, [r38] ;
	# emit "<=" operands:  (k: 150831648 t: -72), r5 (k: 4 t: 4), t40 (k: 5 t: 4)
	mov4 r40, r39 ;
	sub4 r40, r5 ;
	# ~x
	mul4 r40, -1 ;
	add4 r40, -1 ;
	# xor
	mov4 r41, r5 ;
	mov4 r42, r5 ;
	or4 r41, r39 ;
	and4 r42, r39 ;
	sub4 r41, r42 ;
	or4 r41, r40 ;
	# ~x
	mov4 r40, r39 ;
	mul4 r40, -1 ;
	add4 r40, -1 ;
	or4 r40, r5 ;
	and4 r40, r41 ;
	sr4 r40, 31 ;
	if4 (r40) goto .BB12 ;
	# emit "<<" operands: t41 (k: 5 t: 4), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t42 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t43 (k: 5 t: 14), t42 (k: 5 t: 14)
	mov4 r43, [r1 + 8] ;
	# emit "+" operands: t44 (k: 5 t: 14), t43 (k: 5 t: 14), t41 (k: 5 t: 4)
	mov4 r44, r43 ;
	add4 r44, r2 * 4 ;
	# emit "<<" operands: t46 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "*" operands: t47 (k: 5 t: 14), t42 (k: 5 t: 14)
	mov4 r45, [r1 + 8] ;
	# emit "+" operands: t48 (k: 5 t: 14), t47 (k: 5 t: 14), t46 (k: 5 t: 4)
	mov4 r46, r45 ;
	add4 r46, r3 * 4 ;
	# emit "*" operands: t49 (k: 5 t: 4), t48 (k: 5 t: 14)
	mov4 r47, [r46] ;
	# emit "*=" operands: t44 (k: 5 t: 14), t49 (k: 5 t: 4)
	mov4 [r44], r47 ;
	# emit "jmp" operands:  (k: 150834456 t: 32)
	goto .BB10
.BB10:
	# emit "=" operands: r2 (k: 4 t: 4), r3 (k: 4 t: 4)
	mov4 r2, r3 ;
.BB11:
	# emit "<<" operands: t51 (k: 5 t: 4), r2 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r48, r2 ;
	sl4 r48, 1 ;
	# emit "+" operands: t52 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t53 (k: 5 t: 4), t52 (k: 5 t: 14)
	mov4 r49, [r1 + 4] ;
	# emit "<=" operands:  (k: 150828032 t: 56), t51 (k: 5 t: 4), t53 (k: 5 t: 4)
	mov4 r50, r49 ;
	sub4 r50, r48 ;
	# ~x
	mul4 r50, -1 ;
	add4 r50, -1 ;
	# xor
	mov4 r51, r48 ;
	mov4 r52, r48 ;
	or4 r51, r49 ;
	and4 r52, r49 ;
	sub4 r51, r52 ;
	or4 r51, r50 ;
	# ~x
	mov4 r50, r49 ;
	mul4 r50, -1 ;
	add4 r50, -1 ;
	or4 r50, r48 ;
	and4 r50, r51 ;
	sr4 r50, 31 ;
	if4 (r50) goto .BB8 ;
.BB12:
	# emit "<<" operands: t54 (k: 5 t: 4), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t55 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t56 (k: 5 t: 14), t55 (k: 5 t: 14)
	mov4 r53, [r1 + 8] ;
	# emit "+" operands: t57 (k: 5 t: 14), t56 (k: 5 t: 14), t54 (k: 5 t: 4)
	mov4 r54, r53 ;
	add4 r54, r2 * 4 ;
	# emit "*=" operands: t57 (k: 5 t: 14), r5 (k: 4 t: 4)
	mov4 [r54], r5 ;
	# emit "ret" operands: r4 (k: 4 t: 4)
	mov4 r0, r4 ;
.BB13:
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54)>

FindMin {
	# emit "call" operands: t0 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r2, IsEmpty, (r1) ;
	# emit "!" operands:  (k: 150838944 t: 16), t0 (k: 5 t: 4)
	if4 (r2) goto .BB14 ;
	# emit "+" operands: t1 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t2 (k: 5 t: 14), t1 (k: 5 t: 14)
	mov4 r3, [r1 + 8] ;
	# emit "+" operands: t3 (k: 5 t: 14), t2 (k: 5 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t4 (k: 5 t: 4), t3 (k: 5 t: 14)
	mov4 r4, [r3 + 4] ;
	# emit "ret" operands: t4 (k: 5 t: 4)
	mov4 r0, r4 ;
	# emit "jmp"
	goto .BB15
.BB14:
	# emit "&" operands: t5 (k: 5 t: 14), binheap.istr10 (k: 7 t: 18)
	call r5, binheap.istr10, () ;
	# emit "call", prints (k: 9 t: 19)
	call r6, prints, (r5) ;
	# emit "&" operands: t7 (k: 5 t: 14), binheap.istr11 (k: 7 t: 18)
	call r7, binheap.istr11, () ;
	# emit "call", prints (k: 9 t: 19)
	call r8, prints, (r7) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r10, 1 ;
	call r9, mincexit, (r10) ;
	# emit "+" operands: t10 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t11 (k: 5 t: 14), t10 (k: 5 t: 14)
	mov4 r11, [r1 + 8] ;
	# emit "*" operands: t12 (k: 5 t: 4), t11 (k: 5 t: 14)
	mov4 r12, [r11] ;
	# emit "ret" operands: t12 (k: 5 t: 4)
	mov4 r0, r12 ;
.BB15:
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12)>

IsEmpty {
	# emit "+" operands: t1 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t2 (k: 5 t: 4), t1 (k: 5 t: 14)
	mov4 r2, [r1 + 4] ;
	# emit "==" operands:  (k: 150841808 t: 64), t2 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r3, r2 ;
	sub4 r3, 1 ;
	# ~x
	mov4 r4, r2 ;
	mul4 r4, -1 ;
	add4 r4, -1 ;
	and4 r3, r4 ;
	sr4 r3, 31 ;
	if4 (r3) goto .BB16 ;
	# emit "=" operands: t0 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "jmp"
	goto .BB17
.BB16:
	# emit "=" operands: t0 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r5, 1 ;
.BB17:
	# emit "ret" operands: t0 (k: 5 t: 4)
	mov4 r0, r5 ;
	ret
} <(r1), r0, (r2, r3, r4, r5)>

IsFull {
	# emit "+" operands: t1 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t2 (k: 5 t: 4), t1 (k: 5 t: 14)
	mov4 r2, [r1 + 4] ;
	# emit "*" operands: t3 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r3, [r1] ;
	# emit "==" operands:  (k: 150843024 t: 0), t2 (k: 5 t: 4), t3 (k: 5 t: 4)
	eq4 r4, r2, r3 ;
	if4 (r4) goto .BB18 ;
	# emit "=" operands: t0 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "jmp"
	goto .BB19
.BB18:
	# emit "=" operands: t0 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r5, 1 ;
.BB19:
	# emit "ret" operands: t0 (k: 5 t: 4)
	mov4 r0, r5 ;
	ret
} <(r1), r0, (r2, r3, r4, r5)>

Destroy {
	ret
} <(r1), r0, ()>

