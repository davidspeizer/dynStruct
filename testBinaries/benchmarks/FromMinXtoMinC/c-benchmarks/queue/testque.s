# Code auto-generated by MinxCC

testque.istr0 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testque.istr1 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




main {
	# emit "call" operands: r3 (k: 4 t: 14), CreateQueue (k: 9 t: 19)
	mov4 r5, 12 ;
	call r3, CreateQueue, (r5) ;
	# emit "=" operands: r4 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r4, 0 ;
	# emit "jmp" operands:  (k: 162406952 t: 0)
	goto .BB1
.BB0:
	# emit "call", Enqueue (k: 9 t: 19)
	call r6, Enqueue, (r4, r3) ;
	# emit "++" operands: r4 (k: 4 t: 4)
	add4 r4, 1 ;
.BB1:
	# emit "<" operands:  (k: 162406552 t: -72), r4 (k: 4 t: 4), 10 (k: 3 t: 4)
	mov4 r7, r4 ;
	sub4 r7, 10 ;
	# xor
	mov4 r8, r4 ;
	mov4 r10, r4 ;
	or4 r8, 10 ;
	and4 r10, 10 ;
	sub4 r8, r10 ;
	# xor
	mov4 r9, r7 ;
	mov4 r11, r7 ;
	or4 r9, r4 ;
	and4 r11, r4 ;
	sub4 r9, r11 ;
	and4 r8, r9 ;
	# xor
	mov4 r9, r7 ;
	mov4 r12, r7 ;
	or4 r9, r8 ;
	and4 r12, r8 ;
	sub4 r9, r12 ;
	sr4 r9, 31 ;
	if4 (r9) goto .BB0 ;
	# emit "jmp" operands:  (k: 162407960 t: -8)
	goto .BB3
.BB2:
	# emit "call" operands: t3 (k: 5 t: 4), Front (k: 9 t: 19)
	call r13, Front, (r3) ;
	# emit "call", print32 (k: 9 t: 19)
	call r14, print32, (r13) ;
	# emit "&" operands: t5 (k: 5 t: 14), testque.istr0 (k: 7 t: 18)
	call r15, testque.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r16, prints, (r15) ;
	# emit "call", Dequeue (k: 9 t: 19)
	call r17, Dequeue, (r3) ;
.BB3:
	# emit "call" operands: t7 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r18, IsEmpty, (r3) ;
	# emit "" operands:  (k: 162407168 t: 96), t7 (k: 5 t: 4)
	mov4 r19, r18 ;
	sub4 r19, 1 ;
	# ~x
	mov4 r20, r18 ;
	mul4 r20, -1 ;
	add4 r20, -1 ;
	and4 r19, r20 ;
	sr4 r19, 31 ;
	if4 (r19) goto .BB2 ;
	# emit "=" operands: r4 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r4, 0 ;
	# emit "jmp" operands:  (k: 162409256 t: 0)
	goto .BB5
.BB4:
	# emit "call", Enqueue (k: 9 t: 19)
	call r21, Enqueue, (r4, r3) ;
	# emit "++" operands: r4 (k: 4 t: 4)
	add4 r4, 1 ;
.BB5:
	# emit "<" operands:  (k: 162408184 t: -72), r4 (k: 4 t: 4), 10 (k: 3 t: 4)
	mov4 r22, r4 ;
	sub4 r22, 10 ;
	# xor
	mov4 r23, r4 ;
	mov4 r25, r4 ;
	or4 r23, 10 ;
	and4 r25, 10 ;
	sub4 r23, r25 ;
	# xor
	mov4 r24, r22 ;
	mov4 r26, r22 ;
	or4 r24, r4 ;
	and4 r26, r4 ;
	sub4 r24, r26 ;
	and4 r23, r24 ;
	# xor
	mov4 r24, r22 ;
	mov4 r27, r22 ;
	or4 r24, r23 ;
	and4 r27, r23 ;
	sub4 r24, r27 ;
	sr4 r24, 31 ;
	if4 (r24) goto .BB4 ;
	# emit "jmp" operands:  (k: 162410096 t: 0)
	goto .BB7
.BB6:
	# emit "call" operands: t10 (k: 5 t: 4), Front (k: 9 t: 19)
	call r28, Front, (r3) ;
	# emit "call", print32 (k: 9 t: 19)
	call r29, print32, (r28) ;
	# emit "&" operands: t12 (k: 5 t: 14), testque.istr1 (k: 7 t: 18)
	call r30, testque.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r31, prints, (r30) ;
	# emit "call", Dequeue (k: 9 t: 19)
	call r32, Dequeue, (r3) ;
.BB7:
	# emit "call" operands: t14 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r33, IsEmpty, (r3) ;
	# emit "" operands:  (k: 162409472 t: -72), t14 (k: 5 t: 4)
	mov4 r34, r33 ;
	sub4 r34, 1 ;
	# ~x
	mov4 r35, r33 ;
	mul4 r35, -1 ;
	add4 r35, -1 ;
	and4 r34, r35 ;
	sr4 r34, 31 ;
	if4 (r34) goto .BB6 ;
	# emit "call", DisposeQueue (k: 9 t: 19)
	call r36, DisposeQueue, (r3) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36)>

