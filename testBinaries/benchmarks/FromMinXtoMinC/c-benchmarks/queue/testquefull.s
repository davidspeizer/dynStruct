# Code auto-generated by MinxCC

testque.istr0 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testque.istr1 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




main {
	# emit "call" operands: r3 (k: 4 t: 14), CreateQueue (k: 9 t: 19)
	mov4 r5, 12 ;
	call r3, CreateQueue, (r5) ;
	# emit "=" operands: r4 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r4, 0 ;
	# emit "jmp" operands:  (k: 162406952 t: 0)
	goto .BB1
.BB0:
	# emit "call", Enqueue (k: 9 t: 19)
	call r6, Enqueue, (r4, r3) ;
	# emit "++" operands: r4 (k: 4 t: 4)
	add4 r4, 1 ;
.BB1:
	# emit "<" operands:  (k: 162406552 t: -72), r4 (k: 4 t: 4), 10 (k: 3 t: 4)
	mov4 r7, r4 ;
	sub4 r7, 10 ;
	# xor
	mov4 r8, r4 ;
	mov4 r10, r4 ;
	or4 r8, 10 ;
	and4 r10, 10 ;
	sub4 r8, r10 ;
	# xor
	mov4 r9, r7 ;
	mov4 r11, r7 ;
	or4 r9, r4 ;
	and4 r11, r4 ;
	sub4 r9, r11 ;
	and4 r8, r9 ;
	# xor
	mov4 r9, r7 ;
	mov4 r12, r7 ;
	or4 r9, r8 ;
	and4 r12, r8 ;
	sub4 r9, r12 ;
	sr4 r9, 31 ;
	if4 (r9) goto .BB0 ;
	# emit "jmp" operands:  (k: 162407960 t: -8)
	goto .BB3
.BB2:
	# emit "call" operands: t3 (k: 5 t: 4), Front (k: 9 t: 19)
	call r13, Front, (r3) ;
	# emit "call", print32 (k: 9 t: 19)
	call r14, print32, (r13) ;
	# emit "&" operands: t5 (k: 5 t: 14), testque.istr0 (k: 7 t: 18)
	call r15, testque.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r16, prints, (r15) ;
	# emit "call", Dequeue (k: 9 t: 19)
	call r17, Dequeue, (r3) ;
.BB3:
	# emit "call" operands: t7 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r18, IsEmpty, (r3) ;
	# emit "" operands:  (k: 162407168 t: 96), t7 (k: 5 t: 4)
	mov4 r19, r18 ;
	sub4 r19, 1 ;
	# ~x
	mov4 r20, r18 ;
	mul4 r20, -1 ;
	add4 r20, -1 ;
	and4 r19, r20 ;
	sr4 r19, 31 ;
	if4 (r19) goto .BB2 ;
	# emit "=" operands: r4 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r4, 0 ;
	# emit "jmp" operands:  (k: 162409256 t: 0)
	goto .BB5
.BB4:
	# emit "call", Enqueue (k: 9 t: 19)
	call r21, Enqueue, (r4, r3) ;
	# emit "++" operands: r4 (k: 4 t: 4)
	add4 r4, 1 ;
.BB5:
	# emit "<" operands:  (k: 162408184 t: -72), r4 (k: 4 t: 4), 10 (k: 3 t: 4)
	mov4 r22, r4 ;
	sub4 r22, 10 ;
	# xor
	mov4 r23, r4 ;
	mov4 r25, r4 ;
	or4 r23, 10 ;
	and4 r25, 10 ;
	sub4 r23, r25 ;
	# xor
	mov4 r24, r22 ;
	mov4 r26, r22 ;
	or4 r24, r4 ;
	and4 r26, r4 ;
	sub4 r24, r26 ;
	and4 r23, r24 ;
	# xor
	mov4 r24, r22 ;
	mov4 r27, r22 ;
	or4 r24, r23 ;
	and4 r27, r23 ;
	sub4 r24, r27 ;
	sr4 r24, 31 ;
	if4 (r24) goto .BB4 ;
	# emit "jmp" operands:  (k: 162410096 t: 0)
	goto .BB7
.BB6:
	# emit "call" operands: t10 (k: 5 t: 4), Front (k: 9 t: 19)
	call r28, Front, (r3) ;
	# emit "call", print32 (k: 9 t: 19)
	call r29, print32, (r28) ;
	# emit "&" operands: t12 (k: 5 t: 14), testque.istr1 (k: 7 t: 18)
	call r30, testque.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r31, prints, (r30) ;
	# emit "call", Dequeue (k: 9 t: 19)
	call r32, Dequeue, (r3) ;
.BB7:
	# emit "call" operands: t14 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r33, IsEmpty, (r3) ;
	# emit "" operands:  (k: 162409472 t: -72), t14 (k: 5 t: 4)
	mov4 r34, r33 ;
	sub4 r34, 1 ;
	# ~x
	mov4 r35, r33 ;
	mul4 r35, -1 ;
	add4 r35, -1 ;
	and4 r34, r35 ;
	sr4 r34, 31 ;
	if4 (r34) goto .BB6 ;
	# emit "call", DisposeQueue (k: 9 t: 19)
	call r36, DisposeQueue, (r3) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36)>

# Code auto-generated by MinxCC

queue.istr0 {
	mov4 r1, 24 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 81 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 122 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

queue.istr1 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

queue.istr2 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

queue.istr3 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

queue.istr4 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

queue.istr5 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

queue.istr6 {
	mov4 r1, 11 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 70 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 113 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

queue.istr7 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

queue.istr8 {
	mov4 r1, 12 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 113 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

queue.istr9 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

queue.istr10 {
	mov4 r1, 12 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 113 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

queue.istr11 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

queue.istr12 {
	mov4 r1, 12 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 113 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

queue.istr13 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




IsEmpty {
	# emit "+" operands: t1 (k: 5 t: 14), r1 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t2 (k: 5 t: 4), t1 (k: 5 t: 14)
	mov4 r2, [r1 + 12] ;
	# emit "==" operands:  (k: 154624536 t: -120), t2 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r3, r2 ;
	sub4 r3, 1 ;
	# ~x
	mov4 r4, r2 ;
	mul4 r4, -1 ;
	add4 r4, -1 ;
	and4 r3, r4 ;
	sr4 r3, 31 ;
	if4 (r3) goto .BB0 ;
	# emit "=" operands: t0 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "jmp"
	goto .BB1
.BB0:
	# emit "=" operands: t0 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r5, 1 ;
.BB1:
	# emit "ret" operands: t0 (k: 5 t: 4)
	mov4 r0, r5 ;
	ret
} <(r1), r0, (r2, r3, r4, r5)>

IsFull {
	# emit "+" operands: t1 (k: 5 t: 14), r1 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t2 (k: 5 t: 4), t1 (k: 5 t: 14)
	mov4 r2, [r1 + 12] ;
	# emit "*" operands: t3 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r3, [r1] ;
	# emit "==" operands:  (k: 154625920 t: -16), t2 (k: 5 t: 4), t3 (k: 5 t: 4)
	eq4 r4, r2, r3 ;
	if4 (r4) goto .BB2 ;
	# emit "=" operands: t0 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "jmp"
	goto .BB3
.BB2:
	# emit "=" operands: t0 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r5, 1 ;
.BB3:
	# emit "ret" operands: t0 (k: 5 t: 4)
	mov4 r0, r5 ;
	ret
} <(r1), r0, (r2, r3, r4, r5)>

CreateQueue {
	# emit ">=" operands:  (k: 154627128 t: 120), r1 (k: 4 t: 4), 5 (k: 3 t: 4)
	mov4 r3, r1 ;
	sub4 r3, 5 ;
	# ~x
	mul4 r3, -1 ;
	add4 r3, -1 ;
	# xor
	mov4 r4, 5 ;
	mov4 r5, 5 ;
	or4 r4, r1 ;
	and4 r5, r1 ;
	sub4 r4, r5 ;
	or4 r4, r3 ;
	# ~x
	mov4 r3, r1 ;
	mul4 r3, -1 ;
	add4 r3, -1 ;
	or4 r3, 5 ;
	and4 r3, r4 ;
	sr4 r3, 31 ;
	if4 (r3) goto .BB4 ;
	# emit "&" operands: t0 (k: 5 t: 14), queue.istr0 (k: 7 t: 18)
	call r6, queue.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r7, prints, (r6) ;
	# emit "&" operands: t2 (k: 5 t: 14), queue.istr1 (k: 7 t: 18)
	call r8, queue.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r9, prints, (r8) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r11, 1 ;
	call r10, mincexit, (r11) ;
.BB4:
	# emit "call" operands: r2 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r2, 20 ;
	# emit "!=" operands:  (k: 154628472 t: -48), r2 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r2) goto .BB5 ;
	# emit "&" operands: t6 (k: 5 t: 14), queue.istr2 (k: 7 t: 18)
	call r12, queue.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r13, prints, (r12) ;
	# emit "&" operands: t8 (k: 5 t: 14), queue.istr3 (k: 7 t: 18)
	call r14, queue.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r15, prints, (r14) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r17, 1 ;
	call r16, mincexit, (r17) ;
.BB5:
	# emit "+" operands: t11 (k: 5 t: 14), r2 (k: 4 t: 14), 16 (k: 3 t: 4)
	# emit "*" operands: t13 (k: 5 t: 5), 4 (k: 3 t: 4), r1 (k: 4 t: 4)
	# emit "call" operands: t14 (k: 5 t: 14), malloc (k: 9 t: 19)
	alloc r18, r1 * 4;
	# emit "*=" operands: t11 (k: 5 t: 14), t14 (k: 5 t: 14)
	mov4 [r2 + 16], r18 ;
	# emit "*" operands: t16 (k: 5 t: 14), t11 (k: 5 t: 14)
	mov4 r19, [r2 + 16] ;
	# emit "!=", t16 (k: 5 t: 14), 0 (k: 3 t: 14)
	if4 (r19) goto .BB6 ;
	# emit "&" operands: t17 (k: 5 t: 14), queue.istr4 (k: 7 t: 18)
	call r20, queue.istr4, () ;
	# emit "call", prints (k: 9 t: 19)
	call r21, prints, (r20) ;
	# emit "&" operands: t19 (k: 5 t: 14), queue.istr5 (k: 7 t: 18)
	call r22, queue.istr5, () ;
	# emit "call", prints (k: 9 t: 19)
	call r23, prints, (r22) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r25, 1 ;
	call r24, mincexit, (r25) ;
.BB6:
	# emit "*=" operands: r2 (k: 4 t: 14), r1 (k: 4 t: 4)
	mov4 [r2], r1 ;
	# emit "call", MakeEmpty (k: 9 t: 19)
	call r26, MakeEmpty, (r2) ;
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26)>

MakeEmpty {
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*=" operands: t0 (k: 5 t: 14), 0 (k: 3 t: 4)
	mov4 r2, 0 ;
	mov4 [r1 + 12], r2 ;
	# emit "+" operands: t3 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*=" operands: t3 (k: 5 t: 14), 1 (k: 3 t: 4)
	mov4 r3, 1 ;
	mov4 [r1 + 4], r3 ;
	# emit "+" operands: t6 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*=" operands: t6 (k: 5 t: 14), 0 (k: 3 t: 4)
	mov4 r4, 0 ;
	mov4 [r1 + 8], r4 ;
	ret
} <(r1), r0, (r2, r3, r4)>

DisposeQueue {
	ret
} <(r1), r0, ()>

Succ {
	# emit "++" operands: r1 (k: 4 t: 4)
	add4 r1, 1 ;
	# emit "*" operands: t1 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r3, [r2] ;
	# emit "!=", r1 (k: 4 t: 4), t1 (k: 5 t: 4)
	eq4 r4, r1, r3 ;
	# outputjz
	if4 (r4) goto .BB16 ;
	mov4 r5, 1 ;
	goto .BB17
.BB16:
	mov4 r5, 0 ;
.BB17:
	if4 (r5) goto .BB7 ;
	# emit "=" operands: r1 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r1, 0 ;
.BB7:
	# emit "ret" operands: r1 (k: 4 t: 4)
	mov4 r0, r1 ;
	ret
} <(r1, r2), r0, (r3, r4, r5)>

Enqueue {
	# emit "call" operands: t0 (k: 5 t: 4), IsFull (k: 9 t: 19)
	call r3, IsFull, (r2) ;
	# emit "" operands:  (k: 154639352 t: -80), t0 (k: 5 t: 4)
	mov4 r4, r3 ;
	sub4 r4, 1 ;
	# ~x
	mov4 r5, r3 ;
	mul4 r5, -1 ;
	add4 r5, -1 ;
	and4 r4, r5 ;
	sr4 r4, 31 ;
	if4 (r4) goto .BB8 ;
	# emit "&" operands: t1 (k: 5 t: 14), queue.istr6 (k: 7 t: 18)
	call r6, queue.istr6, () ;
	# emit "call", prints (k: 9 t: 19)
	call r7, prints, (r6) ;
	# emit "&" operands: t3 (k: 5 t: 14), queue.istr7 (k: 7 t: 18)
	call r8, queue.istr7, () ;
	# emit "call", prints (k: 9 t: 19)
	call r9, prints, (r8) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r11, 1 ;
	call r10, mincexit, (r11) ;
	# emit "jmp"
	goto .BB9
.BB8:
	# emit "+" operands: t6 (k: 5 t: 14), r2 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t7 (k: 5 t: 4), t6 (k: 5 t: 14)
	mov4 r12, [r2 + 12] ;
	# emit "+" operands: t8 (k: 5 t: 4), t7 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r13, r12 ;
	add4 r13, 1 ;
	# emit "*=" operands: t6 (k: 5 t: 14), t8 (k: 5 t: 4)
	mov4 [r2 + 12], r13 ;
	# emit "+" operands: t10 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t12 (k: 5 t: 4), t10 (k: 5 t: 14)
	mov4 r14, [r2 + 8] ;
	# emit "call" operands: t13 (k: 5 t: 4), Succ (k: 9 t: 19)
	call r15, Succ, (r14, r2) ;
	# emit "*=" operands: t10 (k: 5 t: 14), t13 (k: 5 t: 4)
	mov4 [r2 + 8], r15 ;
	# emit "*" operands: t15 (k: 5 t: 4), t10 (k: 5 t: 14)
	mov4 r16, [r2 + 8] ;
	# emit "<<" operands: t16 (k: 5 t: 4), t15 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t17 (k: 5 t: 14), r2 (k: 4 t: 14), 16 (k: 3 t: 4)
	# emit "*" operands: t18 (k: 5 t: 14), t17 (k: 5 t: 14)
	mov4 r17, [r2 + 16] ;
	# emit "+" operands: t19 (k: 5 t: 14), t18 (k: 5 t: 14), t16 (k: 5 t: 4)
	mov4 r18, r17 ;
	add4 r18, r16 * 4 ;
	# emit "*=" operands: t19 (k: 5 t: 14), r1 (k: 4 t: 4)
	mov4 [r18], r1 ;
.BB9:
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18)>

Front {
	# emit "call" operands: t0 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r2, IsEmpty, (r1) ;
	# emit "!" operands:  (k: 154643256 t: -88), t0 (k: 5 t: 4)
	if4 (r2) goto .BB10 ;
	# emit "+" operands: t1 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t2 (k: 5 t: 4), t1 (k: 5 t: 14)
	mov4 r3, [r1 + 4] ;
	# emit "<<" operands: t3 (k: 5 t: 4), t2 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t4 (k: 5 t: 14), r1 (k: 4 t: 14), 16 (k: 3 t: 4)
	# emit "*" operands: t5 (k: 5 t: 14), t4 (k: 5 t: 14)
	mov4 r4, [r1 + 16] ;
	# emit "+" operands: t6 (k: 5 t: 14), t5 (k: 5 t: 14), t3 (k: 5 t: 4)
	mov4 r5, r4 ;
	add4 r5, r3 * 4 ;
	# emit "*" operands: t7 (k: 5 t: 4), t6 (k: 5 t: 14)
	mov4 r6, [r5] ;
	# emit "ret" operands: t7 (k: 5 t: 4)
	mov4 r0, r6 ;
	# emit "jmp"
	goto .BB11
.BB10:
	# emit "&" operands: t8 (k: 5 t: 14), queue.istr8 (k: 7 t: 18)
	call r7, queue.istr8, () ;
	# emit "call", prints (k: 9 t: 19)
	call r8, prints, (r7) ;
	# emit "&" operands: t10 (k: 5 t: 14), queue.istr9 (k: 7 t: 18)
	call r9, queue.istr9, () ;
	# emit "call", prints (k: 9 t: 19)
	call r10, prints, (r9) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r12, 1 ;
	call r11, mincexit, (r12) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
.BB11:
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12)>

Dequeue {
	# emit "call" operands: t0 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r2, IsEmpty, (r1) ;
	# emit "" operands:  (k: 154645928 t: 96), t0 (k: 5 t: 4)
	mov4 r3, r2 ;
	sub4 r3, 1 ;
	# ~x
	mov4 r4, r2 ;
	mul4 r4, -1 ;
	add4 r4, -1 ;
	and4 r3, r4 ;
	sr4 r3, 31 ;
	if4 (r3) goto .BB12 ;
	# emit "&" operands: t1 (k: 5 t: 14), queue.istr10 (k: 7 t: 18)
	call r5, queue.istr10, () ;
	# emit "call", prints (k: 9 t: 19)
	call r6, prints, (r5) ;
	# emit "&" operands: t3 (k: 5 t: 14), queue.istr11 (k: 7 t: 18)
	call r7, queue.istr11, () ;
	# emit "call", prints (k: 9 t: 19)
	call r8, prints, (r7) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r10, 1 ;
	call r9, mincexit, (r10) ;
	# emit "jmp"
	goto .BB13
.BB12:
	# emit "+" operands: t6 (k: 5 t: 14), r1 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t7 (k: 5 t: 4), t6 (k: 5 t: 14)
	mov4 r11, [r1 + 12] ;
	# emit "+" operands: t8 (k: 5 t: 4), t7 (k: 5 t: 4), -1 (k: 3 t: 4)
	mov4 r12, r11 ;
	add4 r12, -1 ;
	# emit "*=" operands: t6 (k: 5 t: 14), t8 (k: 5 t: 4)
	mov4 [r1 + 12], r12 ;
	# emit "+" operands: t10 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t12 (k: 5 t: 4), t10 (k: 5 t: 14)
	mov4 r13, [r1 + 4] ;
	# emit "call" operands: t13 (k: 5 t: 4), Succ (k: 9 t: 19)
	call r14, Succ, (r13, r1) ;
	# emit "*=" operands: t10 (k: 5 t: 14), t13 (k: 5 t: 4)
	mov4 [r1 + 4], r14 ;
.BB13:
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14)>

FrontAndDequeue {
	# emit "=" operands: r2 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r2, 0 ;
	# emit "call" operands: t0 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r3, IsEmpty, (r1) ;
	# emit "" operands:  (k: 154648912 t: 8), t0 (k: 5 t: 4)
	mov4 r4, r3 ;
	sub4 r4, 1 ;
	# ~x
	mov4 r5, r3 ;
	mul4 r5, -1 ;
	add4 r5, -1 ;
	and4 r4, r5 ;
	sr4 r4, 31 ;
	if4 (r4) goto .BB14 ;
	# emit "&" operands: t1 (k: 5 t: 14), queue.istr12 (k: 7 t: 18)
	call r6, queue.istr12, () ;
	# emit "call", prints (k: 9 t: 19)
	call r7, prints, (r6) ;
	# emit "&" operands: t3 (k: 5 t: 14), queue.istr13 (k: 7 t: 18)
	call r8, queue.istr13, () ;
	# emit "call", prints (k: 9 t: 19)
	call r9, prints, (r8) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r11, 1 ;
	call r10, mincexit, (r11) ;
	# emit "jmp"
	goto .BB15
.BB14:
	# emit "+" operands: t6 (k: 5 t: 14), r1 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t7 (k: 5 t: 4), t6 (k: 5 t: 14)
	mov4 r12, [r1 + 12] ;
	# emit "+" operands: t8 (k: 5 t: 4), t7 (k: 5 t: 4), -1 (k: 3 t: 4)
	mov4 r13, r12 ;
	add4 r13, -1 ;
	# emit "*=" operands: t6 (k: 5 t: 14), t8 (k: 5 t: 4)
	mov4 [r1 + 12], r13 ;
	# emit "+" operands: t10 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t11 (k: 5 t: 4), t10 (k: 5 t: 14)
	mov4 r14, [r1 + 4] ;
	# emit "<<" operands: t12 (k: 5 t: 4), t11 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t13 (k: 5 t: 14), r1 (k: 4 t: 14), 16 (k: 3 t: 4)
	# emit "*" operands: t14 (k: 5 t: 14), t13 (k: 5 t: 14)
	mov4 r15, [r1 + 16] ;
	# emit "+" operands: t15 (k: 5 t: 14), t14 (k: 5 t: 14), t12 (k: 5 t: 4)
	mov4 r16, r15 ;
	add4 r16, r14 * 4 ;
	# emit "*" operands: t16 (k: 5 t: 4), t15 (k: 5 t: 14)
	mov4 r17, [r16] ;
	# emit "=" operands: r2 (k: 4 t: 4), t16 (k: 5 t: 4)
	mov4 r2, r17 ;
	# emit "*" operands: t18 (k: 5 t: 4), t10 (k: 5 t: 14)
	mov4 r18, [r1 + 4] ;
	# emit "call" operands: t19 (k: 5 t: 4), Succ (k: 9 t: 19)
	call r19, Succ, (r18, r1) ;
	# emit "*=" operands: t10 (k: 5 t: 14), t19 (k: 5 t: 4)
	mov4 [r1 + 4], r19 ;
.BB15:
	# emit "ret" operands: r2 (k: 4 t: 4)
	mov4 r0, r2 ;
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19)>

