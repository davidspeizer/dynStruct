# Code auto-generated by MinxCC

testhash.istr0 {
	mov4 r1, 14 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 82 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 104 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 104 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 103 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 46 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 46 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 46 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testhash.istr1 {
	mov4 r1, 10 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testhash.istr2 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testhash.istr3 {
	mov4 r1, 17 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 100 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 103 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 46 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




main {
	# emit "=" operands: r6 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r6, 0 ;
	# emit "=" operands: r7 (k: 4 t: 4), 13 (k: 3 t: 4)
	mov4 r7, 13 ;
	# emit "call" operands: r3 (k: 4 t: 14), InitializeTable (k: 9 t: 19)
	call r3, InitializeTable, (r7) ;
	# emit "=" operands: r5 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "jmp" operands:  (k: 161003480 t: 64)
	goto .BB2
.BB0:
	# emit ">>" operands: t1 (k: 5 t: 4), r7 (k: 4 t: 4), 1 (k: 3 t: 4)
	# signed >>
	mov4 r9, r7 ;
	mov4 r8, -2147483648 ;
	add4 r9, -2147483648 ;
	sr4 r9, 1 ;
	sr4 r8, 1 ;
	sub4 r9, r8 ;
	# emit "<=" operands:  (k: 161003640 t: -8), r5 (k: 4 t: 4), t1 (k: 5 t: 4)
	mov4 r10, r9 ;
	sub4 r10, r5 ;
	# ~x
	mul4 r10, -1 ;
	add4 r10, -1 ;
	# xor
	mov4 r11, r5 ;
	mov4 r12, r5 ;
	or4 r11, r9 ;
	and4 r12, r9 ;
	sub4 r11, r12 ;
	or4 r11, r10 ;
	# ~x
	mov4 r10, r9 ;
	mul4 r10, -1 ;
	add4 r10, -1 ;
	or4 r10, r5 ;
	and4 r10, r11 ;
	sr4 r10, 31 ;
	if4 (r10) goto .BB1 ;
	# emit "call" operands: r3 (k: 4 t: 14), Rehash (k: 9 t: 19)
	call r3, Rehash, (r3) ;
	# emit "&" operands: t3 (k: 5 t: 14), testhash.istr0 (k: 7 t: 18)
	call r13, testhash.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r14, prints, (r13) ;
	# emit "<<" operands: t5 (k: 5 t: 4), r7 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r15, r7 ;
	sl4 r15, 1 ;
	# emit "=" operands: r7 (k: 4 t: 4), t5 (k: 5 t: 4)
	mov4 r7, r15 ;
.BB1:
	# emit "call", Insert (k: 9 t: 19)
	call r16, Insert, (r6, r3) ;
	# emit "++" operands: r5 (k: 4 t: 4)
	add4 r5, 1 ;
	# emit "+" operands: t8 (k: 5 t: 4), r6 (k: 4 t: 4), 71 (k: 3 t: 4)
	mov4 r17, r6 ;
	add4 r17, 71 ;
	# emit "=" operands: r6 (k: 4 t: 4), t8 (k: 5 t: 4)
	mov4 r6, r17 ;
.BB2:
	# emit "<" operands:  (k: 161002592 t: 120), r5 (k: 4 t: 4), 400 (k: 3 t: 4)
	mov4 r18, r5 ;
	sub4 r18, 400 ;
	# xor
	mov4 r19, r5 ;
	mov4 r21, r5 ;
	or4 r19, 400 ;
	and4 r21, 400 ;
	sub4 r19, r21 ;
	# xor
	mov4 r20, r18 ;
	mov4 r22, r18 ;
	or4 r20, r5 ;
	and4 r22, r5 ;
	sub4 r20, r22 ;
	and4 r19, r20 ;
	# xor
	mov4 r20, r18 ;
	mov4 r23, r18 ;
	or4 r20, r19 ;
	and4 r23, r19 ;
	sub4 r20, r23 ;
	sr4 r20, 31 ;
	if4 (r20) goto .BB0 ;
	# emit "=" operands: r5 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "=" operands: r6 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r6, 0 ;
	# emit "jmp" operands:  (k: 161005856 t: 104)
	goto .BB5
.BB3:
	# emit "call" operands: r4 (k: 4 t: 4), Find (k: 9 t: 19)
	call r4, Find, (r6, r3) ;
	# emit "call" operands: t10 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r24, Retrieve, (r4, r3) ;
	# emit "==" operands:  (k: 161005928 t: 32), t10 (k: 5 t: 4), r6 (k: 4 t: 4)
	eq4 r25, r24, r6 ;
	if4 (r25) goto .BB4 ;
	# emit "&" operands: t11 (k: 5 t: 14), testhash.istr1 (k: 7 t: 18)
	call r26, testhash.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r27, prints, (r26) ;
	# emit "call", print32 (k: 9 t: 19)
	call r28, print32, (r6) ;
	# emit "&" operands: t14 (k: 5 t: 14), testhash.istr2 (k: 7 t: 18)
	call r29, testhash.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r30, prints, (r29) ;
.BB4:
	# emit "++" operands: r5 (k: 4 t: 4)
	add4 r5, 1 ;
	# emit "+" operands: t18 (k: 5 t: 4), r6 (k: 4 t: 4), 71 (k: 3 t: 4)
	mov4 r31, r6 ;
	add4 r31, 71 ;
	# emit "=" operands: r6 (k: 4 t: 4), t18 (k: 5 t: 4)
	mov4 r6, r31 ;
.BB5:
	# emit "<" operands:  (k: 161003328 t: 104), r5 (k: 4 t: 4), 400 (k: 3 t: 4)
	mov4 r32, r5 ;
	sub4 r32, 400 ;
	# xor
	mov4 r33, r5 ;
	mov4 r35, r5 ;
	or4 r33, 400 ;
	and4 r35, 400 ;
	sub4 r33, r35 ;
	# xor
	mov4 r34, r32 ;
	mov4 r36, r32 ;
	or4 r34, r5 ;
	and4 r36, r5 ;
	sub4 r34, r36 ;
	and4 r33, r34 ;
	# xor
	mov4 r34, r32 ;
	mov4 r37, r32 ;
	or4 r34, r33 ;
	and4 r37, r33 ;
	sub4 r34, r37 ;
	sr4 r34, 31 ;
	if4 (r34) goto .BB3 ;
	# emit "&" operands: t19 (k: 5 t: 14), testhash.istr3 (k: 7 t: 18)
	call r38, testhash.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r39, prints, (r38) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39)>

