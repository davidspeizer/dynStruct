# Code auto-generated by MinxCC

hashsep.istr0 {
	mov4 r1, 21 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 84 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 98 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 122 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

hashsep.istr1 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

hashsep.istr2 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

hashsep.istr3 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

hashsep.istr4 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

hashsep.istr5 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

hashsep.istr6 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

hashsep.istr7 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

hashsep.istr8 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

hashsep.istr9 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




NextPrime {
	# emit "&" operands: t0 (k: 5 t: 4), r1 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r3, r1 ;
	and4 r3, 1 ;
	# emit "!=" operands:  (k: 154417472 t: -24), t0 (k: 5 t: 4), 0 (k: 3 t: 4)
	if4 (r3) goto .BB5 ;
	# emit "++" operands: r1 (k: 4 t: 4)
	add4 r1, 1 ;
.BB0:
	# emit "=" operands: r2 (k: 4 t: 4), 3 (k: 3 t: 4)
	mov4 r2, 3 ;
	# emit "jmp" operands:  (k: 154417120 t: 16)
	goto .BB3
.BB1:
	# emit "%" operands: t3 (k: 5 t: 4), r1 (k: 4 t: 4), r2 (k: 4 t: 4)
	mov4 r5, r1 ;
	div4 r5, r2 ;
	mul4 r5, r2 ;
	mov4 r4, r1 ;
	sub4 r4, r5 ;
	# emit "!=" operands:  (k: 154417192 t: -56), t3 (k: 5 t: 4), 0 (k: 3 t: 4)
	if4 (r4) goto .BB2 ;
	# emit "jmp" operands:  (k: 154416912 t: 120)
	goto .BB4
.BB2:
	# emit "+" operands: t4 (k: 5 t: 4), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	mov4 r6, r2 ;
	add4 r6, 2 ;
	# emit "=" operands: r2 (k: 4 t: 4), t4 (k: 5 t: 4)
	mov4 r2, r6 ;
.BB3:
	# emit "*" operands: t5 (k: 5 t: 4), r2 (k: 4 t: 4), r2 (k: 4 t: 4)
	mov4 r7, r2 ;
	mul4 r7, r2 ;
	# emit "<=" operands:  (k: 154416360 t: 40), t5 (k: 5 t: 4), r1 (k: 4 t: 4)
	mov4 r8, r1 ;
	sub4 r8, r7 ;
	# ~x
	mul4 r8, -1 ;
	add4 r8, -1 ;
	# xor
	mov4 r9, r7 ;
	mov4 r10, r7 ;
	or4 r9, r1 ;
	and4 r10, r1 ;
	sub4 r9, r10 ;
	or4 r9, r8 ;
	# ~x
	mov4 r8, r1 ;
	mul4 r8, -1 ;
	add4 r8, -1 ;
	or4 r8, r7 ;
	and4 r8, r9 ;
	sr4 r8, 31 ;
	if4 (r8) goto .BB1 ;
	# emit "ret" operands: r1 (k: 4 t: 4)
	mov4 r0, r1 ;
	# emit "jmp"
	goto .BB6
.BB4:
	# emit "+" operands: t6 (k: 5 t: 4), r1 (k: 4 t: 4), 2 (k: 3 t: 4)
	mov4 r11, r1 ;
	add4 r11, 2 ;
	# emit "=" operands: r1 (k: 4 t: 4), t6 (k: 5 t: 4)
	mov4 r1, r11 ;
.BB5:
	# emit "jmp" operands:  (k: 154415536 t: -56)
	goto .BB0
.BB6:
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11)>

Hash {
	# emit "%" operands: t0 (k: 5 t: 4), r1 (k: 4 t: 4), r2 (k: 4 t: 4)
	mov4 r4, r1 ;
	div4 r4, r2 ;
	mul4 r4, r2 ;
	mov4 r3, r1 ;
	sub4 r3, r4 ;
	# emit "ret" operands: t0 (k: 5 t: 4)
	mov4 r0, r3 ;
	ret
} <(r1, r2), r0, (r3, r4)>

InitializeTable {
	# emit ">=" operands:  (k: 154419624 t: -32), r1 (k: 4 t: 4), 10 (k: 3 t: 4)
	mov4 r4, r1 ;
	sub4 r4, 10 ;
	# ~x
	mul4 r4, -1 ;
	add4 r4, -1 ;
	# xor
	mov4 r5, 10 ;
	mov4 r6, 10 ;
	or4 r5, r1 ;
	and4 r6, r1 ;
	sub4 r5, r6 ;
	or4 r5, r4 ;
	# ~x
	mov4 r4, r1 ;
	mul4 r4, -1 ;
	add4 r4, -1 ;
	or4 r4, 10 ;
	and4 r4, r5 ;
	sr4 r4, 31 ;
	if4 (r4) goto .BB7 ;
	# emit "&" operands: t0 (k: 5 t: 14), hashsep.istr0 (k: 7 t: 18)
	call r7, hashsep.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r8, prints, (r7) ;
	# emit "&" operands: t2 (k: 5 t: 14), hashsep.istr1 (k: 7 t: 18)
	call r9, hashsep.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r10, prints, (r9) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r12, 1 ;
	call r11, mincexit, (r12) ;
	# emit "ret" operands: 0 (k: 3 t: 14)
	mov4 r0, 0 ;
	# emit "jmp"
	goto .BB14
.BB7:
	# emit "call" operands: r2 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r2, 8 ;
	# emit "!=" operands:  (k: 154421216 t: 32), r2 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r2) goto .BB8 ;
	# emit "&" operands: t6 (k: 5 t: 14), hashsep.istr2 (k: 7 t: 18)
	call r13, hashsep.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r14, prints, (r13) ;
	# emit "&" operands: t8 (k: 5 t: 14), hashsep.istr3 (k: 7 t: 18)
	call r15, hashsep.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r16, prints, (r15) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r18, 1 ;
	call r17, mincexit, (r18) ;
.BB8:
	# emit "call" operands: t12 (k: 5 t: 4), NextPrime (k: 9 t: 19)
	call r19, NextPrime, (r1) ;
	# emit "*=" operands: r2 (k: 4 t: 14), t12 (k: 5 t: 4)
	mov4 [r2], r19 ;
	# emit "+" operands: t14 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t16 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r20, [r2] ;
	# emit "*" operands: t17 (k: 5 t: 5), 4 (k: 3 t: 4), t16 (k: 5 t: 4)
	# emit "call" operands: t18 (k: 5 t: 14), malloc (k: 9 t: 19)
	alloc r21, r20 * 4;
	# emit "*=" operands: t14 (k: 5 t: 14), t18 (k: 5 t: 14)
	mov4 [r2 + 4], r21 ;
	# emit "*" operands: t20 (k: 5 t: 14), t14 (k: 5 t: 14)
	mov4 r22, [r2 + 4] ;
	# emit "!=" operands:  (k: 154423584 t: 24), t20 (k: 5 t: 14), 0 (k: 3 t: 14)
	if4 (r22) goto .BB9 ;
	# emit "&" operands: t21 (k: 5 t: 14), hashsep.istr4 (k: 7 t: 18)
	call r23, hashsep.istr4, () ;
	# emit "call", prints (k: 9 t: 19)
	call r24, prints, (r23) ;
	# emit "&" operands: t23 (k: 5 t: 14), hashsep.istr5 (k: 7 t: 18)
	call r25, hashsep.istr5, () ;
	# emit "call", prints (k: 9 t: 19)
	call r26, prints, (r25) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r28, 1 ;
	call r27, mincexit, (r28) ;
.BB9:
	# emit "=" operands: r3 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r3, 0 ;
	# emit "jmp" operands:  (k: 154430160 t: 96)
	goto .BB13
.BB10:
	# emit "<<" operands: t26 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t27 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t28 (k: 5 t: 14), t27 (k: 5 t: 14)
	mov4 r29, [r2 + 4] ;
	# emit "+" operands: t29 (k: 5 t: 14), t28 (k: 5 t: 14), t26 (k: 5 t: 4)
	mov4 r30, r29 ;
	add4 r30, r3 * 4 ;
	# emit "call" operands: t31 (k: 5 t: 14), malloc (k: 9 t: 19)
	alloc r31, 8 ;
	# emit "*=" operands: t29 (k: 5 t: 14), t31 (k: 5 t: 14)
	mov4 [r30], r31 ;
	# emit "*" operands: t33 (k: 5 t: 14), t27 (k: 5 t: 14)
	mov4 r32, [r2 + 4] ;
	# emit "+" operands: t34 (k: 5 t: 14), t33 (k: 5 t: 14), t26 (k: 5 t: 4)
	mov4 r33, r32 ;
	add4 r33, r3 * 4 ;
	# emit "*" operands: t35 (k: 5 t: 14), t34 (k: 5 t: 14)
	mov4 r34, [r33] ;
	# emit "!=" operands:  (k: 154430232 t: -48), t35 (k: 5 t: 14), 0 (k: 3 t: 14)
	if4 (r34) goto .BB11 ;
	# emit "&" operands: t36 (k: 5 t: 14), hashsep.istr6 (k: 7 t: 18)
	call r35, hashsep.istr6, () ;
	# emit "call", prints (k: 9 t: 19)
	call r36, prints, (r35) ;
	# emit "&" operands: t38 (k: 5 t: 14), hashsep.istr7 (k: 7 t: 18)
	call r37, hashsep.istr7, () ;
	# emit "call", prints (k: 9 t: 19)
	call r38, prints, (r37) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r40, 1 ;
	call r39, mincexit, (r40) ;
	# emit "jmp" operands:  (k: 154430304 t: 24)
	goto .BB12
.BB11:
	# emit "<<" operands: t41 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t42 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t43 (k: 5 t: 14), t42 (k: 5 t: 14)
	mov4 r41, [r2 + 4] ;
	# emit "+" operands: t44 (k: 5 t: 14), t43 (k: 5 t: 14), t41 (k: 5 t: 4)
	mov4 r42, r41 ;
	add4 r42, r3 * 4 ;
	# emit "*" operands: t45 (k: 5 t: 14), t44 (k: 5 t: 14)
	mov4 r43, [r42] ;
	# emit "+" operands: t46 (k: 5 t: 14), t45 (k: 5 t: 14), 4 (k: 3 t: 4)
	# emit "*=" operands: t46 (k: 5 t: 14), 0 (k: 3 t: 14)
	mov4 r44, 0 ;
	mov4 [r43 + 4], r44 ;
.BB12:
	# emit "++" operands: r3 (k: 4 t: 4)
	add4 r3, 1 ;
.BB13:
	# emit "*" operands: t51 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r45, [r2] ;
	# emit "<" operands:  (k: 154423512 t: 24), r3 (k: 4 t: 4), t51 (k: 5 t: 4)
	mov4 r46, r3 ;
	sub4 r46, r45 ;
	# xor
	mov4 r47, r3 ;
	mov4 r49, r3 ;
	or4 r47, r45 ;
	and4 r49, r45 ;
	sub4 r47, r49 ;
	# xor
	mov4 r48, r46 ;
	mov4 r50, r46 ;
	or4 r48, r3 ;
	and4 r50, r3 ;
	sub4 r48, r50 ;
	and4 r47, r48 ;
	# xor
	mov4 r48, r46 ;
	mov4 r51, r46 ;
	or4 r48, r47 ;
	and4 r51, r47 ;
	sub4 r48, r51 ;
	sr4 r48, 31 ;
	if4 (r48) goto .BB10 ;
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
.BB14:
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51)>

Find {
	# emit "*" operands: t0 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r5, [r2] ;
	# emit "call" operands: t1 (k: 5 t: 4), Hash (k: 9 t: 19)
	call r6, Hash, (r1, r5) ;
	# emit "<<" operands: t2 (k: 5 t: 4), t1 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t3 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t4 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 r7, [r2 + 4] ;
	# emit "+" operands: t5 (k: 5 t: 14), t4 (k: 5 t: 14), t2 (k: 5 t: 4)
	mov4 r8, r7 ;
	add4 r8, r6 * 4 ;
	# emit "*" operands: t6 (k: 5 t: 14), t5 (k: 5 t: 14)
	mov4 r9, [r8] ;
	# emit "=" operands: r4 (k: 4 t: 14), t6 (k: 5 t: 14)
	mov4 r4, r9 ;
	# emit "+" operands: t7 (k: 5 t: 14), r4 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t8 (k: 5 t: 14), t7 (k: 5 t: 14)
	mov4 r10, [r4 + 4] ;
	# emit "=" operands: r3 (k: 4 t: 14), t8 (k: 5 t: 14)
	mov4 r3, r10 ;
	# emit "jmp" operands:  (k: 154435344 t: 80)
	goto .BB16
.BB15:
	# emit "+" operands: t9 (k: 5 t: 14), r3 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t10 (k: 5 t: 14), t9 (k: 5 t: 14)
	mov4 r11, [r3 + 4] ;
	# emit "=" operands: r3 (k: 4 t: 14), t10 (k: 5 t: 14)
	mov4 r3, r11 ;
.BB16:
	# emit "==", r3 (k: 4 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r3) goto .BB24 ;
	mov4 r12, 1 ;
	goto .BB25
.BB24:
	mov4 r12, 0 ;
.BB25:
	if4 (r12) goto .BB17 ;
	# emit "*" operands: t11 (k: 5 t: 4), r3 (k: 4 t: 14)
	mov4 r13, [r3] ;
	# emit "!=" operands:  (k: 154433912 t: 88), t11 (k: 5 t: 4), r1 (k: 4 t: 4)
	eq4 r14, r13, r1 ;
	# outputjz
	if4 (r14) goto .BB26 ;
	mov4 r15, 1 ;
	goto .BB27
.BB26:
	mov4 r15, 0 ;
.BB27:
	if4 (r15) goto .BB15 ;
.BB17:
	# emit "ret" operands: r3 (k: 4 t: 14)
	mov4 r0, r3 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15)>

Insert {
	# emit "call" operands: r3 (k: 4 t: 14), Find (k: 9 t: 19)
	call r3, Find, (r1, r2) ;
	# emit "!=", r3 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r3) goto .BB19 ;
	# emit "call" operands: r4 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r4, 8 ;
	# emit "!=" operands:  (k: 154437504 t: -96), r4 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r4) goto .BB18 ;
	# emit "&" operands: t2 (k: 5 t: 14), hashsep.istr8 (k: 7 t: 18)
	call r6, hashsep.istr8, () ;
	# emit "call", prints (k: 9 t: 19)
	call r7, prints, (r6) ;
	# emit "&" operands: t4 (k: 5 t: 14), hashsep.istr9 (k: 7 t: 18)
	call r8, hashsep.istr9, () ;
	# emit "call", prints (k: 9 t: 19)
	call r9, prints, (r8) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r11, 1 ;
	call r10, mincexit, (r11) ;
	# emit "jmp"
	goto .BB19
.BB18:
	# emit "*" operands: t7 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r12, [r2] ;
	# emit "call" operands: t8 (k: 5 t: 4), Hash (k: 9 t: 19)
	call r13, Hash, (r1, r12) ;
	# emit "<<" operands: t9 (k: 5 t: 4), t8 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t10 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t11 (k: 5 t: 14), t10 (k: 5 t: 14)
	mov4 r14, [r2 + 4] ;
	# emit "+" operands: t12 (k: 5 t: 14), t11 (k: 5 t: 14), t9 (k: 5 t: 4)
	mov4 r15, r14 ;
	add4 r15, r13 * 4 ;
	# emit "*" operands: t13 (k: 5 t: 14), t12 (k: 5 t: 14)
	mov4 r16, [r15] ;
	# emit "=" operands: r5 (k: 4 t: 14), t13 (k: 5 t: 14)
	mov4 r5, r16 ;
	# emit "+" operands: t14 (k: 5 t: 14), r4 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "+" operands: t16 (k: 5 t: 14), r5 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t17 (k: 5 t: 14), t16 (k: 5 t: 14)
	mov4 r17, [r5 + 4] ;
	# emit "*=" operands: t14 (k: 5 t: 14), t17 (k: 5 t: 14)
	mov4 [r4 + 4], r17 ;
	# emit "*=" operands: r4 (k: 4 t: 14), r1 (k: 4 t: 4)
	mov4 [r4], r1 ;
	# emit "*=" operands: t16 (k: 5 t: 14), r4 (k: 4 t: 14)
	mov4 [r5 + 4], r4 ;
.BB19:
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17)>

Retrieve {
	# emit "*" operands: t0 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r2, [r1] ;
	# emit "ret" operands: t0 (k: 5 t: 4)
	mov4 r0, r2 ;
	ret
} <(r1), r0, (r2)>

DestroyTable {
	# emit "=" operands: r2 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r2, 0 ;
	# emit "jmp"
	goto .BB23
.BB20:
	# emit "<<" operands: t0 (k: 5 t: 4), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t1 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t2 (k: 5 t: 14), t1 (k: 5 t: 14)
	mov4 r5, [r1 + 4] ;
	# emit "+" operands: t3 (k: 5 t: 14), t2 (k: 5 t: 14), t0 (k: 5 t: 4)
	mov4 r6, r5 ;
	add4 r6, r2 * 4 ;
	# emit "*" operands: t4 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 r7, [r6] ;
	# emit "=" operands: r3 (k: 4 t: 14), t4 (k: 5 t: 14)
	mov4 r3, r7 ;
	# emit "jmp" operands:  (k: 154442704 t: -8)
	goto .BB22
.BB21:
	# emit "+" operands: t5 (k: 5 t: 14), r3 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t6 (k: 5 t: 14), t5 (k: 5 t: 14)
	mov4 r8, [r3 + 4] ;
	# emit "=" operands: r4 (k: 4 t: 14), t6 (k: 5 t: 14)
	mov4 r4, r8 ;
	# emit "=" operands: r3 (k: 4 t: 14), r4 (k: 4 t: 14)
	mov4 r3, r4 ;
.BB22:
	# emit "!=" operands:  (k: 154441648 t: 24), r3 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r3) goto .BB21 ;
	# emit "++" operands: r2 (k: 4 t: 4)
	add4 r2, 1 ;
.BB23:
	# emit "*" operands: t9 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r9, [r1] ;
	# emit "<" operands:  (k: 154441504 t: 24), r2 (k: 4 t: 4), t9 (k: 5 t: 4)
	mov4 r10, r2 ;
	sub4 r10, r9 ;
	# xor
	mov4 r11, r2 ;
	mov4 r13, r2 ;
	or4 r11, r9 ;
	and4 r13, r9 ;
	sub4 r11, r13 ;
	# xor
	mov4 r12, r10 ;
	mov4 r14, r10 ;
	or4 r12, r2 ;
	and4 r14, r2 ;
	sub4 r12, r14 ;
	and4 r11, r12 ;
	# xor
	mov4 r12, r10 ;
	mov4 r15, r10 ;
	or4 r12, r11 ;
	and4 r15, r11 ;
	sub4 r12, r15 ;
	sr4 r12, 31 ;
	if4 (r12) goto .BB20 ;
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15)>

