# Code auto-generated by MinxCC

testhash.istr0 {
	mov4 r1, 10 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testhash.istr1 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testhash.istr2 {
	mov4 r1, 17 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 100 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 103 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 46 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




main {
	# emit "=" operands: r6 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r6, 0 ;
	# emit "=" operands: r7 (k: 4 t: 4), 13 (k: 3 t: 4)
	mov4 r7, 13 ;
	# emit "call" operands: r3 (k: 4 t: 14), InitializeTable (k: 9 t: 19)
	call r3, InitializeTable, (r7) ;
	# emit "=" operands: r5 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "jmp" operands:  (k: 159805888 t: -104)
	goto .BB1
.BB0:
	# emit "call", Insert (k: 9 t: 19)
	call r8, Insert, (r6, r3) ;
	# emit "++" operands: r5 (k: 4 t: 4)
	add4 r5, 1 ;
	# emit "+" operands: t3 (k: 5 t: 4), r6 (k: 4 t: 4), 71 (k: 3 t: 4)
	mov4 r9, r6 ;
	add4 r9, 71 ;
	# emit "=" operands: r6 (k: 4 t: 4), t3 (k: 5 t: 4)
	mov4 r6, r9 ;
.BB1:
	# emit "<" operands:  (k: 159805368 t: 80), r5 (k: 4 t: 4), 400 (k: 3 t: 4)
	mov4 r10, r5 ;
	sub4 r10, 400 ;
	# xor
	mov4 r11, r5 ;
	mov4 r13, r5 ;
	or4 r11, 400 ;
	and4 r13, 400 ;
	sub4 r11, r13 ;
	# xor
	mov4 r12, r10 ;
	mov4 r14, r10 ;
	or4 r12, r5 ;
	and4 r14, r5 ;
	sub4 r12, r14 ;
	and4 r11, r12 ;
	# xor
	mov4 r12, r10 ;
	mov4 r15, r10 ;
	or4 r12, r11 ;
	and4 r15, r11 ;
	sub4 r12, r15 ;
	sr4 r12, 31 ;
	if4 (r12) goto .BB0 ;
	# emit "=" operands: r5 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "=" operands: r6 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r6, 0 ;
	# emit "jmp" operands:  (k: 159807544 t: -128)
	goto .BB5
.BB2:
	# emit "call" operands: r4 (k: 4 t: 14), Find (k: 9 t: 19)
	call r4, Find, (r6, r3) ;
	# emit "==" operands:  (k: 159807688 t: 56), r4 (k: 4 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r4) goto .BB6 ;
	mov4 r16, 1 ;
	goto .BB7
.BB6:
	mov4 r16, 0 ;
.BB7:
	if4 (r16) goto .BB3 ;
	# emit "call" operands: t5 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r17, Retrieve, (r4) ;
	# emit "==" operands:  (k: 159807616 t: 56), t5 (k: 5 t: 4), r6 (k: 4 t: 4)
	eq4 r18, r17, r6 ;
	if4 (r18) goto .BB4 ;
.BB3:
	# emit "&" operands: t6 (k: 5 t: 14), testhash.istr0 (k: 7 t: 18)
	call r19, testhash.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r20, prints, (r19) ;
	# emit "call", print32 (k: 9 t: 19)
	call r21, print32, (r6) ;
	# emit "&" operands: t9 (k: 5 t: 14), testhash.istr1 (k: 7 t: 18)
	call r22, testhash.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r23, prints, (r22) ;
.BB4:
	# emit "++" operands: r5 (k: 4 t: 4)
	add4 r5, 1 ;
	# emit "+" operands: t13 (k: 5 t: 4), r6 (k: 4 t: 4), 71 (k: 3 t: 4)
	mov4 r24, r6 ;
	add4 r24, 71 ;
	# emit "=" operands: r6 (k: 4 t: 4), t13 (k: 5 t: 4)
	mov4 r6, r24 ;
.BB5:
	# emit "<" operands:  (k: 159806104 t: -56), r5 (k: 4 t: 4), 400 (k: 3 t: 4)
	mov4 r25, r5 ;
	sub4 r25, 400 ;
	# xor
	mov4 r26, r5 ;
	mov4 r28, r5 ;
	or4 r26, 400 ;
	and4 r28, 400 ;
	sub4 r26, r28 ;
	# xor
	mov4 r27, r25 ;
	mov4 r29, r25 ;
	or4 r27, r5 ;
	and4 r29, r5 ;
	sub4 r27, r29 ;
	and4 r26, r27 ;
	# xor
	mov4 r27, r25 ;
	mov4 r30, r25 ;
	or4 r27, r26 ;
	and4 r30, r26 ;
	sub4 r27, r30 ;
	sr4 r27, 31 ;
	if4 (r27) goto .BB2 ;
	# emit "&" operands: t14 (k: 5 t: 14), testhash.istr2 (k: 7 t: 18)
	call r31, testhash.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r32, prints, (r31) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32)>

