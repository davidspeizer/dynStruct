# Code auto-generated by MinxCC

leftheap.istr0 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

leftheap.istr1 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

leftheap.istr2 {
	mov4 r1, 24 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 80 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 113 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

leftheap.istr3 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

leftheap.istr4 {
	mov4 r1, 24 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 80 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 81 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

leftheap.istr5 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




Initialize {
	# emit "ret" operands: 0 (k: 3 t: 14)
	mov4 r0, 0 ;
	ret
} <(), r0, ()>

Merge {
	# emit "!=" operands:  (k: 150202904 t: -112), r1 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r1) goto .BB0 ;
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	# emit "jmp"
	goto .BB3
.BB0:
	# emit "!=" operands:  (k: 150203280 t: 8), r2 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r2) goto .BB1 ;
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	# emit "jmp"
	goto .BB3
.BB1:
	# emit "*" operands: t0 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r3, [r1] ;
	# emit "*" operands: t1 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r4, [r2] ;
	# emit ">=" operands:  (k: 150204448 t: -120), t0 (k: 5 t: 4), t1 (k: 5 t: 4)
	mov4 r5, r3 ;
	sub4 r5, r4 ;
	# ~x
	mul4 r5, -1 ;
	add4 r5, -1 ;
	# xor
	mov4 r6, r4 ;
	mov4 r7, r4 ;
	or4 r6, r3 ;
	and4 r7, r3 ;
	sub4 r6, r7 ;
	or4 r6, r5 ;
	# ~x
	mov4 r5, r3 ;
	mul4 r5, -1 ;
	add4 r5, -1 ;
	or4 r5, r4 ;
	and4 r5, r6 ;
	sr4 r5, 31 ;
	if4 (r5) goto .BB2 ;
	# emit "call" operands: t2 (k: 5 t: 14), Merge1 (k: 9 t: 19)
	call r8, Merge1, (r1, r2) ;
	# emit "ret" operands: t2 (k: 5 t: 14)
	mov4 r0, r8 ;
	# emit "jmp"
	goto .BB3
.BB2:
	# emit "call" operands: t3 (k: 5 t: 14), Merge1 (k: 9 t: 19)
	call r9, Merge1, (r2, r1) ;
	# emit "ret" operands: t3 (k: 5 t: 14)
	mov4 r0, r9 ;
.BB3:
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9)>

SwapChildren {
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r3, [r1 + 4] ;
	# emit "=" operands: r2 (k: 4 t: 14), t1 (k: 5 t: 14)
	mov4 r2, r3 ;
	# emit "+" operands: t3 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t4 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 r4, [r1 + 8] ;
	# emit "*=" operands: t0 (k: 5 t: 14), t4 (k: 5 t: 14)
	mov4 [r1 + 4], r4 ;
	# emit "*=" operands: t3 (k: 5 t: 14), r2 (k: 4 t: 14)
	mov4 [r1 + 8], r2 ;
	ret
} <(r1), r0, (r2, r3, r4)>

Merge1 {
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r3, [r1 + 4] ;
	# emit "!=" operands:  (k: 150206840 t: 72), t1 (k: 5 t: 14), 0 (k: 3 t: 14)
	if4 (r3) goto .BB4 ;
	# emit "+" operands: t2 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*=" operands: t2 (k: 5 t: 14), r2 (k: 4 t: 14)
	mov4 [r1 + 4], r2 ;
	# emit "jmp"
	goto .BB6
.BB4:
	# emit "+" operands: t5 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t7 (k: 5 t: 14), t5 (k: 5 t: 14)
	mov4 r4, [r1 + 8] ;
	# emit "call" operands: t8 (k: 5 t: 14), Merge (k: 9 t: 19)
	call r5, Merge, (r4, r2) ;
	# emit "*=" operands: t5 (k: 5 t: 14), t8 (k: 5 t: 14)
	mov4 [r1 + 8], r5 ;
	# emit "+" operands: t10 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t11 (k: 5 t: 14), t10 (k: 5 t: 14)
	mov4 r6, [r1 + 4] ;
	# emit "+" operands: t12 (k: 5 t: 14), t11 (k: 5 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t13 (k: 5 t: 4), t12 (k: 5 t: 14)
	mov4 r7, [r6 + 12] ;
	# emit "*" operands: t14 (k: 5 t: 14), t5 (k: 5 t: 14)
	mov4 r8, [r1 + 8] ;
	# emit "+" operands: t15 (k: 5 t: 14), t14 (k: 5 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t16 (k: 5 t: 4), t15 (k: 5 t: 14)
	mov4 r9, [r8 + 12] ;
	# emit ">=" operands:  (k: 150208584 t: 48), t13 (k: 5 t: 4), t16 (k: 5 t: 4)
	mov4 r10, r7 ;
	sub4 r10, r9 ;
	# ~x
	mul4 r10, -1 ;
	add4 r10, -1 ;
	# xor
	mov4 r11, r9 ;
	mov4 r12, r9 ;
	or4 r11, r7 ;
	and4 r12, r7 ;
	sub4 r11, r12 ;
	or4 r11, r10 ;
	# ~x
	mov4 r10, r7 ;
	mul4 r10, -1 ;
	add4 r10, -1 ;
	or4 r10, r9 ;
	and4 r10, r11 ;
	sr4 r10, 31 ;
	if4 (r10) goto .BB5 ;
	# emit "call", SwapChildren (k: 9 t: 19)
	call r13, SwapChildren, (r1) ;
.BB5:
	# emit "+" operands: t17 (k: 5 t: 14), r1 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "+" operands: t19 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t20 (k: 5 t: 14), t19 (k: 5 t: 14)
	mov4 r14, [r1 + 8] ;
	# emit "+" operands: t21 (k: 5 t: 14), t20 (k: 5 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t22 (k: 5 t: 4), t21 (k: 5 t: 14)
	mov4 r15, [r14 + 12] ;
	# emit "+" operands: t23 (k: 5 t: 4), t22 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r16, r15 ;
	add4 r16, 1 ;
	# emit "*=" operands: t17 (k: 5 t: 14), t23 (k: 5 t: 4)
	mov4 [r1 + 12], r16 ;
.BB6:
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16)>

Insert1 {
	# emit "call" operands: r3 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r3, 16 ;
	# emit "!=" operands:  (k: 150211776 t: 120), r3 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r3) goto .BB7 ;
	# emit "&" operands: t1 (k: 5 t: 14), leftheap.istr0 (k: 7 t: 18)
	call r4, leftheap.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r5, prints, (r4) ;
	# emit "&" operands: t3 (k: 5 t: 14), leftheap.istr1 (k: 7 t: 18)
	call r6, leftheap.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r7, prints, (r6) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r9, 1 ;
	call r8, mincexit, (r9) ;
	# emit "jmp"
	goto .BB8
.BB7:
	# emit "*=" operands: r3 (k: 4 t: 14), r1 (k: 4 t: 4)
	mov4 [r3], r1 ;
	# emit "+" operands: t8 (k: 5 t: 14), r3 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*=" operands: t8 (k: 5 t: 14), 0 (k: 3 t: 4)
	mov4 r10, 0 ;
	mov4 [r3 + 12], r10 ;
	# emit "+" operands: t11 (k: 5 t: 14), r3 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "+" operands: t13 (k: 5 t: 14), r3 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*=" operands: t13 (k: 5 t: 14), 0 (k: 3 t: 14)
	mov4 r11, 0 ;
	mov4 [r3 + 8], r11 ;
	# emit "*" operands: t15 (k: 5 t: 14), t13 (k: 5 t: 14)
	mov4 r12, [r3 + 8] ;
	# emit "*=" operands: t11 (k: 5 t: 14), t15 (k: 5 t: 14)
	mov4 [r3 + 4], r12 ;
	# emit "call" operands: r2 (k: 4 t: 14), Merge (k: 9 t: 19)
	call r2, Merge, (r3, r2) ;
.BB8:
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12)>

DeleteMin1 {
	# emit "call" operands: t0 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r4, IsEmpty, (r1) ;
	# emit "" operands:  (k: 150219272 t: 120), t0 (k: 5 t: 4)
	mov4 r5, r4 ;
	sub4 r5, 1 ;
	# ~x
	mov4 r6, r4 ;
	mul4 r6, -1 ;
	add4 r6, -1 ;
	and4 r5, r6 ;
	sr4 r5, 31 ;
	if4 (r5) goto .BB9 ;
	# emit "&" operands: t1 (k: 5 t: 14), leftheap.istr2 (k: 7 t: 18)
	call r7, leftheap.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r8, prints, (r7) ;
	# emit "&" operands: t3 (k: 5 t: 14), leftheap.istr3 (k: 7 t: 18)
	call r9, leftheap.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r10, prints, (r9) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r12, 1 ;
	call r11, mincexit, (r12) ;
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	# emit "jmp"
	goto .BB10
.BB9:
	# emit "+" operands: t6 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t7 (k: 5 t: 14), t6 (k: 5 t: 14)
	mov4 r13, [r1 + 4] ;
	# emit "=" operands: r2 (k: 4 t: 14), t7 (k: 5 t: 14)
	mov4 r2, r13 ;
	# emit "+" operands: t8 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t9 (k: 5 t: 14), t8 (k: 5 t: 14)
	mov4 r14, [r1 + 8] ;
	# emit "=" operands: r3 (k: 4 t: 14), t9 (k: 5 t: 14)
	mov4 r3, r14 ;
	# emit "call" operands: t10 (k: 5 t: 14), Merge (k: 9 t: 19)
	call r15, Merge, (r2, r3) ;
	# emit "ret" operands: t10 (k: 5 t: 14)
	mov4 r0, r15 ;
.BB10:
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15)>

FindMin {
	# emit "call" operands: t0 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r2, IsEmpty, (r1) ;
	# emit "!" operands:  (k: 150221888 t: -80), t0 (k: 5 t: 4)
	if4 (r2) goto .BB11 ;
	# emit "*" operands: t1 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r3, [r1] ;
	# emit "ret" operands: t1 (k: 5 t: 4)
	mov4 r0, r3 ;
	# emit "jmp"
	goto .BB12
.BB11:
	# emit "&" operands: t2 (k: 5 t: 14), leftheap.istr4 (k: 7 t: 18)
	call r4, leftheap.istr4, () ;
	# emit "call", prints (k: 9 t: 19)
	call r5, prints, (r4) ;
	# emit "&" operands: t4 (k: 5 t: 14), leftheap.istr5 (k: 7 t: 18)
	call r6, leftheap.istr5, () ;
	# emit "call", prints (k: 9 t: 19)
	call r7, prints, (r6) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r9, 1 ;
	call r8, mincexit, (r9) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
.BB12:
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9)>

IsEmpty {
	# emit "==" operands:  (k: 150223896 t: -120), r1 (k: 4 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r1) goto .BB15 ;
	mov4 r2, 1 ;
	goto .BB16
.BB15:
	mov4 r2, 0 ;
.BB16:
	if4 (r2) goto .BB13 ;
	# emit "=" operands: t0 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r3, 0 ;
	# emit "jmp"
	goto .BB14
.BB13:
	# emit "=" operands: t0 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r3, 1 ;
.BB14:
	# emit "ret" operands: t0 (k: 5 t: 4)
	mov4 r0, r3 ;
	ret
} <(r1), r0, (r2, r3)>

