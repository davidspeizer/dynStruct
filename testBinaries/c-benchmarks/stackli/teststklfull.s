# Code auto-generated by MinxCC

teststkl.istr0 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




main {
	# emit "call" operands: r3 (k: 4 t: 14), CreateStack (k: 9 t: 19)
	call r3, CreateStack, () ;
	# emit "=" operands: r4 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r4, 0 ;
	# emit "jmp" operands:  (k: 164463544 t: -112)
	goto .BB1
.BB0:
	# emit "call", Push (k: 9 t: 19)
	call r5, Push, (r4, r3) ;
	# emit "++" operands: r4 (k: 4 t: 4)
	add4 r4, 1 ;
.BB1:
	# emit "<" operands:  (k: 164463160 t: 72), r4 (k: 4 t: 4), 10 (k: 3 t: 4)
	mov4 r6, r4 ;
	sub4 r6, 10 ;
	# xor
	mov4 r7, r4 ;
	mov4 r9, r4 ;
	or4 r7, 10 ;
	and4 r9, 10 ;
	sub4 r7, r9 ;
	# xor
	mov4 r8, r6 ;
	mov4 r10, r6 ;
	or4 r8, r4 ;
	and4 r10, r4 ;
	sub4 r8, r10 ;
	and4 r7, r8 ;
	# xor
	mov4 r8, r6 ;
	mov4 r11, r6 ;
	or4 r8, r7 ;
	and4 r11, r7 ;
	sub4 r8, r11 ;
	sr4 r8, 31 ;
	if4 (r8) goto .BB0 ;
	# emit "jmp" operands:  (k: 164464552 t: 56)
	goto .BB3
.BB2:
	# emit "call" operands: t3 (k: 5 t: 4), Top (k: 9 t: 19)
	call r12, Top, (r3) ;
	# emit "call", print32 (k: 9 t: 19)
	call r13, print32, (r12) ;
	# emit "&" operands: t5 (k: 5 t: 14), teststkl.istr0 (k: 7 t: 18)
	call r14, teststkl.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r15, prints, (r14) ;
	# emit "call", Pop (k: 9 t: 19)
	call r16, Pop, (r3) ;
.BB3:
	# emit "call" operands: t7 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r17, IsEmpty, (r3) ;
	# emit "" operands:  (k: 164463760 t: -16), t7 (k: 5 t: 4)
	mov4 r18, r17 ;
	sub4 r18, 1 ;
	# ~x
	mov4 r19, r17 ;
	mul4 r19, -1 ;
	add4 r19, -1 ;
	and4 r18, r19 ;
	sr4 r18, 31 ;
	if4 (r18) goto .BB2 ;
	# emit "call", DisposeStack (k: 9 t: 19)
	call r20, DisposeStack, (r3) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20)>

# Code auto-generated by MinxCC

stackli.istr0 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

stackli.istr1 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

stackli.istr2 {
	mov4 r1, 27 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 77 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 67 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 83 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 107 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

stackli.istr3 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

stackli.istr4 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

stackli.istr5 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

stackli.istr6 {
	mov4 r1, 12 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 107 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

stackli.istr7 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

stackli.istr8 {
	mov4 r1, 12 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 107 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

stackli.istr9 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




IsEmpty {
	# emit "+" operands: t1 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t2 (k: 5 t: 14), t1 (k: 5 t: 14)
	mov4 r2, [r1 + 4] ;
	# emit "==" operands:  (k: 152839160 t: 104), t2 (k: 5 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r2) goto .BB12 ;
	mov4 r3, 1 ;
	goto .BB13
.BB12:
	mov4 r3, 0 ;
.BB13:
	if4 (r3) goto .BB0 ;
	# emit "=" operands: t0 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r4, 0 ;
	# emit "jmp"
	goto .BB1
.BB0:
	# emit "=" operands: t0 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r4, 1 ;
.BB1:
	# emit "ret" operands: t0 (k: 5 t: 4)
	mov4 r0, r4 ;
	ret
} <(r1), r0, (r2, r3, r4)>

CreateStack {
	# emit "call" operands: r1 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r1, 8 ;
	# emit "!=", r1 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r1) goto .BB2 ;
	# emit "&" operands: t1 (k: 5 t: 14), stackli.istr0 (k: 7 t: 18)
	call r2, stackli.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r3, prints, (r2) ;
	# emit "&" operands: t3 (k: 5 t: 14), stackli.istr1 (k: 7 t: 18)
	call r4, stackli.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r5, prints, (r4) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r7, 1 ;
	call r6, mincexit, (r7) ;
.BB2:
	# emit "+" operands: t6 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*=" operands: t6 (k: 5 t: 14), 0 (k: 3 t: 14)
	mov4 r8, 0 ;
	mov4 [r1 + 4], r8 ;
	# emit "call", MakeEmpty (k: 9 t: 19)
	call r9, MakeEmpty, (r1) ;
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	ret
} <(), r0, (r1, r2, r3, r4, r5, r6, r7, r8, r9)>

MakeEmpty {
	# emit "!=" operands:  (k: 152843608 t: 24), r1 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r1) goto .BB4 ;
	# emit "&" operands: t0 (k: 5 t: 14), stackli.istr2 (k: 7 t: 18)
	call r2, stackli.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r3, prints, (r2) ;
	# emit "&" operands: t2 (k: 5 t: 14), stackli.istr3 (k: 7 t: 18)
	call r4, stackli.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r5, prints, (r4) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r7, 1 ;
	call r6, mincexit, (r7) ;
	# emit "jmp"
	goto .BB5
.BB3:
	# emit "call", Pop (k: 9 t: 19)
	call r8, Pop, (r1) ;
.BB4:
	# emit "call" operands: t5 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r9, IsEmpty, (r1) ;
	# emit "" operands:  (k: 152842664 t: -96), t5 (k: 5 t: 4)
	mov4 r10, r9 ;
	sub4 r10, 1 ;
	# ~x
	mov4 r11, r9 ;
	mul4 r11, -1 ;
	add4 r11, -1 ;
	and4 r10, r11 ;
	sr4 r10, 31 ;
	if4 (r10) goto .BB3 ;
.BB5:
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11)>

DisposeStack {
	# emit "call", MakeEmpty (k: 9 t: 19)
	call r2, MakeEmpty, (r1) ;
	ret
} <(r1), r0, (r2)>

Push {
	# emit "call" operands: r3 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r3, 8 ;
	# emit "!=" operands:  (k: 152845064 t: -64), r3 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r3) goto .BB6 ;
	# emit "&" operands: t1 (k: 5 t: 14), stackli.istr4 (k: 7 t: 18)
	call r4, stackli.istr4, () ;
	# emit "call", prints (k: 9 t: 19)
	call r5, prints, (r4) ;
	# emit "&" operands: t3 (k: 5 t: 14), stackli.istr5 (k: 7 t: 18)
	call r6, stackli.istr5, () ;
	# emit "call", prints (k: 9 t: 19)
	call r7, prints, (r6) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r9, 1 ;
	call r8, mincexit, (r9) ;
	# emit "jmp"
	goto .BB7
.BB6:
	# emit "*=" operands: r3 (k: 4 t: 14), r1 (k: 4 t: 4)
	mov4 [r3], r1 ;
	# emit "+" operands: t8 (k: 5 t: 14), r3 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "+" operands: t10 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t11 (k: 5 t: 14), t10 (k: 5 t: 14)
	mov4 r10, [r2 + 4] ;
	# emit "*=" operands: t8 (k: 5 t: 14), t11 (k: 5 t: 14)
	mov4 [r3 + 4], r10 ;
	# emit "*=" operands: t10 (k: 5 t: 14), r3 (k: 4 t: 14)
	mov4 [r2 + 4], r3 ;
.BB7:
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10)>

Top {
	# emit "call" operands: t0 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r2, IsEmpty, (r1) ;
	# emit "!" operands:  (k: 152847744 t: -16), t0 (k: 5 t: 4)
	if4 (r2) goto .BB8 ;
	# emit "+" operands: t1 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t2 (k: 5 t: 14), t1 (k: 5 t: 14)
	mov4 r3, [r1 + 4] ;
	# emit "*" operands: t3 (k: 5 t: 4), t2 (k: 5 t: 14)
	mov4 r4, [r3] ;
	# emit "ret" operands: t3 (k: 5 t: 4)
	mov4 r0, r4 ;
	# emit "jmp"
	goto .BB9
.BB8:
	# emit "&" operands: t4 (k: 5 t: 14), stackli.istr6 (k: 7 t: 18)
	call r5, stackli.istr6, () ;
	# emit "call", prints (k: 9 t: 19)
	call r6, prints, (r5) ;
	# emit "&" operands: t6 (k: 5 t: 14), stackli.istr7 (k: 7 t: 18)
	call r7, stackli.istr7, () ;
	# emit "call", prints (k: 9 t: 19)
	call r8, prints, (r7) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r10, 1 ;
	call r9, mincexit, (r10) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
.BB9:
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10)>

Pop {
	# emit "call" operands: t0 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r3, IsEmpty, (r1) ;
	# emit "" operands:  (k: 152849928 t: -64), t0 (k: 5 t: 4)
	mov4 r4, r3 ;
	sub4 r4, 1 ;
	# ~x
	mov4 r5, r3 ;
	mul4 r5, -1 ;
	add4 r5, -1 ;
	and4 r4, r5 ;
	sr4 r4, 31 ;
	if4 (r4) goto .BB10 ;
	# emit "&" operands: t1 (k: 5 t: 14), stackli.istr8 (k: 7 t: 18)
	call r6, stackli.istr8, () ;
	# emit "call", prints (k: 9 t: 19)
	call r7, prints, (r6) ;
	# emit "&" operands: t3 (k: 5 t: 14), stackli.istr9 (k: 7 t: 18)
	call r8, stackli.istr9, () ;
	# emit "call", prints (k: 9 t: 19)
	call r9, prints, (r8) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r11, 1 ;
	call r10, mincexit, (r11) ;
	# emit "jmp"
	goto .BB11
.BB10:
	# emit "+" operands: t6 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t7 (k: 5 t: 14), t6 (k: 5 t: 14)
	mov4 r12, [r1 + 4] ;
	# emit "=" operands: r2 (k: 4 t: 14), t7 (k: 5 t: 14)
	mov4 r2, r12 ;
	# emit "*" operands: t9 (k: 5 t: 14), t6 (k: 5 t: 14)
	mov4 r13, [r1 + 4] ;
	# emit "+" operands: t10 (k: 5 t: 14), t9 (k: 5 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t11 (k: 5 t: 14), t10 (k: 5 t: 14)
	mov4 r14, [r13 + 4] ;
	# emit "*=" operands: t6 (k: 5 t: 14), t11 (k: 5 t: 14)
	mov4 [r1 + 4], r14 ;
.BB11:
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14)>

