# Code auto-generated by MinxCC

tree.istr0 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

tree.istr1 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

tree.istr2 {
	mov4 r1, 18 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 100 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

tree.istr3 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




MakeEmpty {
	# emit "==", r1 (k: 4 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r1) goto .BB21 ;
	mov4 r2, 1 ;
	goto .BB22
.BB21:
	mov4 r2, 0 ;
.BB22:
	if4 (r2) goto .BB0 ;
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r3, [r1 + 4] ;
	# emit "call", MakeEmpty (k: 9 t: 19)
	call r4, MakeEmpty, (r3) ;
	# emit "+" operands: t3 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t4 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 r5, [r1 + 8] ;
	# emit "call", MakeEmpty (k: 9 t: 19)
	call r6, MakeEmpty, (r5) ;
.BB0:
	# emit "ret" operands: 0 (k: 3 t: 14)
	mov4 r0, 0 ;
	ret
} <(r1), r0, (r2, r3, r4, r5, r6)>

Find {
	# emit "!=" operands:  (k: 162339968 t: -8), r2 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r2) goto .BB1 ;
	# emit "ret" operands: 0 (k: 3 t: 14)
	mov4 r0, 0 ;
	# emit "jmp"
	goto .BB4
.BB1:
	# emit "*" operands: t0 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r3, [r2] ;
	# emit ">=" operands:  (k: 162341264 t: 80), r1 (k: 4 t: 4), t0 (k: 5 t: 4)
	mov4 r4, r1 ;
	sub4 r4, r3 ;
	# ~x
	mul4 r4, -1 ;
	add4 r4, -1 ;
	# xor
	mov4 r5, r3 ;
	mov4 r6, r3 ;
	or4 r5, r1 ;
	and4 r6, r1 ;
	sub4 r5, r6 ;
	or4 r5, r4 ;
	# ~x
	mov4 r4, r1 ;
	mul4 r4, -1 ;
	add4 r4, -1 ;
	or4 r4, r3 ;
	and4 r4, r5 ;
	sr4 r4, 31 ;
	if4 (r4) goto .BB2 ;
	# emit "+" operands: t1 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t2 (k: 5 t: 14), t1 (k: 5 t: 14)
	mov4 r7, [r2 + 4] ;
	# emit "call" operands: t3 (k: 5 t: 14), Find (k: 9 t: 19)
	call r8, Find, (r1, r7) ;
	# emit "ret" operands: t3 (k: 5 t: 14)
	mov4 r0, r8 ;
	# emit "jmp"
	goto .BB4
.BB2:
	# emit "*" operands: t4 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r9, [r2] ;
	# emit "<=" operands:  (k: 162342384 t: -16), r1 (k: 4 t: 4), t4 (k: 5 t: 4)
	mov4 r10, r9 ;
	sub4 r10, r1 ;
	# ~x
	mul4 r10, -1 ;
	add4 r10, -1 ;
	# xor
	mov4 r11, r1 ;
	mov4 r12, r1 ;
	or4 r11, r9 ;
	and4 r12, r9 ;
	sub4 r11, r12 ;
	or4 r11, r10 ;
	# ~x
	mov4 r10, r9 ;
	mul4 r10, -1 ;
	add4 r10, -1 ;
	or4 r10, r1 ;
	and4 r10, r11 ;
	sr4 r10, 31 ;
	if4 (r10) goto .BB3 ;
	# emit "+" operands: t5 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t6 (k: 5 t: 14), t5 (k: 5 t: 14)
	mov4 r13, [r2 + 8] ;
	# emit "call" operands: t7 (k: 5 t: 14), Find (k: 9 t: 19)
	call r14, Find, (r1, r13) ;
	# emit "ret" operands: t7 (k: 5 t: 14)
	mov4 r0, r14 ;
	# emit "jmp"
	goto .BB4
.BB3:
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
.BB4:
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14)>

FindMin {
	# emit "!=" operands:  (k: 162343480 t: -8), r1 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r1) goto .BB5 ;
	# emit "ret" operands: 0 (k: 3 t: 14)
	mov4 r0, 0 ;
	# emit "jmp"
	goto .BB7
.BB5:
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r2, [r1 + 4] ;
	# emit "!=" operands:  (k: 162344224 t: -120), t1 (k: 5 t: 14), 0 (k: 3 t: 14)
	if4 (r2) goto .BB6 ;
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	# emit "jmp"
	goto .BB7
.BB6:
	# emit "+" operands: t2 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t3 (k: 5 t: 14), t2 (k: 5 t: 14)
	mov4 r3, [r1 + 4] ;
	# emit "call" operands: t4 (k: 5 t: 14), FindMin (k: 9 t: 19)
	call r4, FindMin, (r3) ;
	# emit "ret" operands: t4 (k: 5 t: 14)
	mov4 r0, r4 ;
.BB7:
	ret
} <(r1), r0, (r2, r3, r4)>

FindMax {
	# emit "==", r1 (k: 4 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r1) goto .BB23 ;
	mov4 r2, 1 ;
	goto .BB24
.BB23:
	mov4 r2, 0 ;
.BB24:
	if4 (r2) goto .BB10 ;
	# emit "jmp" operands:  (k: 162345544 t: 120)
	goto .BB9
.BB8:
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r3, [r1 + 8] ;
	# emit "=" operands: r1 (k: 4 t: 14), t1 (k: 5 t: 14)
	mov4 r1, r3 ;
.BB9:
	# emit "+" operands: t2 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t3 (k: 5 t: 14), t2 (k: 5 t: 14)
	mov4 r4, [r1 + 8] ;
	# emit "!=" operands:  (k: 162345408 t: -112), t3 (k: 5 t: 14), 0 (k: 3 t: 14)
	if4 (r4) goto .BB8 ;
.BB10:
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	ret
} <(r1), r0, (r2, r3, r4)>

Insert {
	# emit "!=" operands:  (k: 162347664 t: -72), r2 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r2) goto .BB12 ;
	# emit "call" operands: r2 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r2, 12 ;
	# emit "!=" operands:  (k: 162347592 t: -24), r2 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r2) goto .BB11 ;
	# emit "&" operands: t1 (k: 5 t: 14), tree.istr0 (k: 7 t: 18)
	call r3, tree.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r4, prints, (r3) ;
	# emit "&" operands: t3 (k: 5 t: 14), tree.istr1 (k: 7 t: 18)
	call r5, tree.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r6, prints, (r5) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r8, 1 ;
	call r7, mincexit, (r8) ;
	# emit "jmp"
	goto .BB14
.BB11:
	# emit "*=" operands: r2 (k: 4 t: 14), r1 (k: 4 t: 4)
	mov4 [r2], r1 ;
	# emit "+" operands: t8 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "+" operands: t10 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*=" operands: t10 (k: 5 t: 14), 0 (k: 3 t: 14)
	mov4 r9, 0 ;
	mov4 [r2 + 8], r9 ;
	# emit "*" operands: t12 (k: 5 t: 14), t10 (k: 5 t: 14)
	mov4 r10, [r2 + 8] ;
	# emit "*=" operands: t8 (k: 5 t: 14), t12 (k: 5 t: 14)
	mov4 [r2 + 4], r10 ;
	# emit "jmp"
	goto .BB14
.BB12:
	# emit "*" operands: t14 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r11, [r2] ;
	# emit ">=" operands:  (k: 162350008 t: -24), r1 (k: 4 t: 4), t14 (k: 5 t: 4)
	mov4 r12, r1 ;
	sub4 r12, r11 ;
	# ~x
	mul4 r12, -1 ;
	add4 r12, -1 ;
	# xor
	mov4 r13, r11 ;
	mov4 r14, r11 ;
	or4 r13, r1 ;
	and4 r14, r1 ;
	sub4 r13, r14 ;
	or4 r13, r12 ;
	# ~x
	mov4 r12, r1 ;
	mul4 r12, -1 ;
	add4 r12, -1 ;
	or4 r12, r11 ;
	and4 r12, r13 ;
	sr4 r12, 31 ;
	if4 (r12) goto .BB13 ;
	# emit "+" operands: t15 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t17 (k: 5 t: 14), t15 (k: 5 t: 14)
	mov4 r15, [r2 + 4] ;
	# emit "call" operands: t18 (k: 5 t: 14), Insert (k: 9 t: 19)
	call r16, Insert, (r1, r15) ;
	# emit "*=" operands: t15 (k: 5 t: 14), t18 (k: 5 t: 14)
	mov4 [r2 + 4], r16 ;
	# emit "jmp"
	goto .BB14
.BB13:
	# emit "*" operands: t20 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r17, [r2] ;
	# emit "<=", r1 (k: 4 t: 4), t20 (k: 5 t: 4)
	mov4 r18, r17 ;
	sub4 r18, r1 ;
	# ~x
	mul4 r18, -1 ;
	add4 r18, -1 ;
	# xor
	mov4 r19, r1 ;
	mov4 r20, r1 ;
	or4 r19, r17 ;
	and4 r20, r17 ;
	sub4 r19, r20 ;
	or4 r19, r18 ;
	# ~x
	mov4 r18, r17 ;
	mul4 r18, -1 ;
	add4 r18, -1 ;
	or4 r18, r1 ;
	and4 r18, r19 ;
	sr4 r18, 31 ;
	if4 (r18) goto .BB14 ;
	# emit "+" operands: t21 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t23 (k: 5 t: 14), t21 (k: 5 t: 14)
	mov4 r21, [r2 + 8] ;
	# emit "call" operands: t24 (k: 5 t: 14), Insert (k: 9 t: 19)
	call r22, Insert, (r1, r21) ;
	# emit "*=" operands: t21 (k: 5 t: 14), t24 (k: 5 t: 14)
	mov4 [r2 + 8], r22 ;
.BB14:
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22)>

Delete {
	# emit "!=" operands:  (k: 162352952 t: -16), r2 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r2) goto .BB15 ;
	# emit "&" operands: t0 (k: 5 t: 14), tree.istr2 (k: 7 t: 18)
	call r4, tree.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r5, prints, (r4) ;
	# emit "&" operands: t2 (k: 5 t: 14), tree.istr3 (k: 7 t: 18)
	call r6, tree.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r7, prints, (r6) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r9, 1 ;
	call r8, mincexit, (r9) ;
	# emit "jmp"
	goto .BB20
.BB15:
	# emit "*" operands: t5 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r10, [r2] ;
	# emit ">=" operands:  (k: 162358256 t: -104), r1 (k: 4 t: 4), t5 (k: 5 t: 4)
	mov4 r11, r1 ;
	sub4 r11, r10 ;
	# ~x
	mul4 r11, -1 ;
	add4 r11, -1 ;
	# xor
	mov4 r12, r10 ;
	mov4 r13, r10 ;
	or4 r12, r1 ;
	and4 r13, r1 ;
	sub4 r12, r13 ;
	or4 r12, r11 ;
	# ~x
	mov4 r11, r1 ;
	mul4 r11, -1 ;
	add4 r11, -1 ;
	or4 r11, r10 ;
	and4 r11, r12 ;
	sr4 r11, 31 ;
	if4 (r11) goto .BB16 ;
	# emit "+" operands: t6 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t8 (k: 5 t: 14), t6 (k: 5 t: 14)
	mov4 r14, [r2 + 4] ;
	# emit "call" operands: t9 (k: 5 t: 14), Delete (k: 9 t: 19)
	call r15, Delete, (r1, r14) ;
	# emit "*=" operands: t6 (k: 5 t: 14), t9 (k: 5 t: 14)
	mov4 [r2 + 4], r15 ;
	# emit "jmp"
	goto .BB20
.BB16:
	# emit "*" operands: t11 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r16, [r2] ;
	# emit "<=" operands:  (k: 162359448 t: 48), r1 (k: 4 t: 4), t11 (k: 5 t: 4)
	mov4 r17, r16 ;
	sub4 r17, r1 ;
	# ~x
	mul4 r17, -1 ;
	add4 r17, -1 ;
	# xor
	mov4 r18, r1 ;
	mov4 r19, r1 ;
	or4 r18, r16 ;
	and4 r19, r16 ;
	sub4 r18, r19 ;
	or4 r18, r17 ;
	# ~x
	mov4 r17, r16 ;
	mul4 r17, -1 ;
	add4 r17, -1 ;
	or4 r17, r1 ;
	and4 r17, r18 ;
	sr4 r17, 31 ;
	if4 (r17) goto .BB17 ;
	# emit "+" operands: t12 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t14 (k: 5 t: 14), t12 (k: 5 t: 14)
	mov4 r20, [r2 + 8] ;
	# emit "call" operands: t15 (k: 5 t: 14), Delete (k: 9 t: 19)
	call r21, Delete, (r1, r20) ;
	# emit "*=" operands: t12 (k: 5 t: 14), t15 (k: 5 t: 14)
	mov4 [r2 + 8], r21 ;
	# emit "jmp"
	goto .BB20
.BB17:
	# emit "+" operands: t17 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t18 (k: 5 t: 14), t17 (k: 5 t: 14)
	mov4 r22, [r2 + 4] ;
	# emit "" operands:  (k: 162360640 t: 72), t18 (k: 5 t: 14)
	# outputjz
	if4 (r22) goto .BB25 ;
	mov4 r23, 1 ;
	goto .BB26
.BB25:
	mov4 r23, 0 ;
.BB26:
	if4 (r23) goto .BB18 ;
	# emit "+" operands: t19 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t20 (k: 5 t: 14), t19 (k: 5 t: 14)
	mov4 r24, [r2 + 8] ;
	# emit "" operands:  (k: 162360640 t: 72), t20 (k: 5 t: 14)
	# outputjz
	if4 (r24) goto .BB27 ;
	mov4 r25, 1 ;
	goto .BB28
.BB27:
	mov4 r25, 0 ;
.BB28:
	if4 (r25) goto .BB18 ;
	# emit "+" operands: t21 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t22 (k: 5 t: 14), t21 (k: 5 t: 14)
	mov4 r26, [r2 + 8] ;
	# emit "call" operands: r3 (k: 4 t: 14), FindMin (k: 9 t: 19)
	call r3, FindMin, (r26) ;
	# emit "*" operands: t25 (k: 5 t: 4), r3 (k: 4 t: 14)
	mov4 r27, [r3] ;
	# emit "*=" operands: r2 (k: 4 t: 14), t25 (k: 5 t: 4)
	mov4 [r2], r27 ;
	# emit "*" operands: t28 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r28, [r2] ;
	# emit "*" operands: t29 (k: 5 t: 14), t21 (k: 5 t: 14)
	mov4 r29, [r2 + 8] ;
	# emit "call" operands: t30 (k: 5 t: 14), Delete (k: 9 t: 19)
	call r30, Delete, (r28, r29) ;
	# emit "*=" operands: t21 (k: 5 t: 14), t30 (k: 5 t: 14)
	mov4 [r2 + 8], r30 ;
	# emit "jmp"
	goto .BB20
.BB18:
	# emit "=" operands: r3 (k: 4 t: 14), r2 (k: 4 t: 14)
	mov4 r3, r2 ;
	# emit "+" operands: t32 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t33 (k: 5 t: 14), t32 (k: 5 t: 14)
	mov4 r31, [r2 + 4] ;
	# emit "!=" operands:  (k: 162363464 t: -16), t33 (k: 5 t: 14), 0 (k: 3 t: 14)
	if4 (r31) goto .BB19 ;
	# emit "+" operands: t34 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t35 (k: 5 t: 14), t34 (k: 5 t: 14)
	mov4 r32, [r2 + 8] ;
	# emit "=" operands: r2 (k: 4 t: 14), t35 (k: 5 t: 14)
	mov4 r2, r32 ;
	# emit "jmp"
	goto .BB20
.BB19:
	# emit "+" operands: t36 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t37 (k: 5 t: 14), t36 (k: 5 t: 14)
	mov4 r33, [r2 + 8] ;
	# emit "!=", t37 (k: 5 t: 14), 0 (k: 3 t: 14)
	if4 (r33) goto .BB20 ;
	# emit "+" operands: t38 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t39 (k: 5 t: 14), t38 (k: 5 t: 14)
	mov4 r34, [r2 + 4] ;
	# emit "=" operands: r2 (k: 4 t: 14), t39 (k: 5 t: 14)
	mov4 r2, r34 ;
.BB20:
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34)>

Retrieve {
	# emit "*" operands: t0 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r2, [r1] ;
	# emit "ret" operands: t0 (k: 5 t: 4)
	mov4 r0, r2 ;
	ret
} <(r1), r0, (r2)>

