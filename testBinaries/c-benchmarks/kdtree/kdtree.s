# Code auto-generated by MinxCC

kdtree.istr0 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

kdtree.istr1 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

kdtree.istr2 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

kdtree.istr3 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

kdtree.istr4 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 40 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

kdtree.istr5 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 44 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

kdtree.istr6 {
	mov4 r1, 3 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 41 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

kdtree.istr7 {
	mov4 r1, 18 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 83 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 103 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 103 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

kdtree.istr8 {
	mov4 r1, 21 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 73 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

kdtree.istr9 {
	mov4 r1, 9 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 68 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 46 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 46 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 46 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




RecursiveInsert {
	# emit "!=" operands:  (k: 167969624 t: 112), r2 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r2) goto .BB2 ;
	# emit "call" operands: r2 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r2, 12 ;
	# emit "!=" operands:  (k: 167967952 t: -96), r2 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r2) goto .BB0 ;
	# emit "&" operands: t1 (k: 5 t: 14), kdtree.istr0 (k: 7 t: 18)
	call r4, kdtree.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r5, prints, (r4) ;
	# emit "&" operands: t3 (k: 5 t: 14), kdtree.istr1 (k: 7 t: 18)
	call r6, kdtree.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r7, prints, (r6) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r9, 1 ;
	call r8, mincexit, (r9) ;
.BB0:
	# emit "+" operands: t6 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "call" operands: t8 (k: 5 t: 14), malloc (k: 9 t: 19)
	alloc r10, 8 ;
	# emit "*=" operands: t6 (k: 5 t: 14), t8 (k: 5 t: 14)
	mov4 [r2 + 8], r10 ;
	# emit "*" operands: t10 (k: 5 t: 14), t6 (k: 5 t: 14)
	mov4 r11, [r2 + 8] ;
	# emit "!=" operands:  (k: 167969696 t: 56), t10 (k: 5 t: 14), 0 (k: 3 t: 14)
	if4 (r11) goto .BB1 ;
	# emit "&" operands: t11 (k: 5 t: 14), kdtree.istr2 (k: 7 t: 18)
	call r12, kdtree.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r13, prints, (r12) ;
	# emit "&" operands: t13 (k: 5 t: 14), kdtree.istr3 (k: 7 t: 18)
	call r14, kdtree.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r15, prints, (r14) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r17, 1 ;
	call r16, mincexit, (r17) ;
.BB1:
	# emit "+" operands: t17 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*=" operands: t17 (k: 5 t: 14), 0 (k: 3 t: 14)
	mov4 r18, 0 ;
	mov4 [r2 + 4], r18 ;
	# emit "*" operands: t19 (k: 5 t: 14), t17 (k: 5 t: 14)
	mov4 r19, [r2 + 4] ;
	# emit "*=" operands: r2 (k: 4 t: 14), t19 (k: 5 t: 14)
	mov4 [r2], r19 ;
	# emit "+" operands: t21 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t22 (k: 5 t: 14), t21 (k: 5 t: 14)
	mov4 r20, [r2 + 8] ;
	# emit "*" operands: t24 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r21, [r1] ;
	# emit "*=" operands: t22 (k: 5 t: 14), t24 (k: 5 t: 4)
	mov4 [r20], r21 ;
	# emit "*" operands: t26 (k: 5 t: 14), t21 (k: 5 t: 14)
	mov4 r22, [r2 + 8] ;
	# emit "+" operands: t27 (k: 5 t: 14), t26 (k: 5 t: 14), 4 (k: 3 t: 4)
	# emit "+" operands: t29 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t30 (k: 5 t: 4), t29 (k: 5 t: 14)
	mov4 r23, [r1 + 4] ;
	# emit "*=" operands: t27 (k: 5 t: 14), t30 (k: 5 t: 4)
	mov4 [r22 + 4], r23 ;
	# emit "jmp"
	goto .BB8
.BB2:
	# emit "<<" operands: t32 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t33 (k: 5 t: 14), r1 (k: 4 t: 14), t32 (k: 5 t: 4)
	mov4 r24, r1 ;
	add4 r24, r3 * 4 ;
	# emit "*" operands: t34 (k: 5 t: 4), t33 (k: 5 t: 14)
	mov4 r25, [r24] ;
	# emit "+" operands: t35 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t36 (k: 5 t: 14), t35 (k: 5 t: 14)
	mov4 r26, [r2 + 8] ;
	# emit "+" operands: t37 (k: 5 t: 14), t36 (k: 5 t: 14), t32 (k: 5 t: 4)
	mov4 r27, r26 ;
	add4 r27, r3 * 4 ;
	# emit "*" operands: t38 (k: 5 t: 4), t37 (k: 5 t: 14)
	mov4 r28, [r27] ;
	# emit ">=" operands:  (k: 167974816 t: 88), t34 (k: 5 t: 4), t38 (k: 5 t: 4)
	mov4 r29, r25 ;
	sub4 r29, r28 ;
	# ~x
	mul4 r29, -1 ;
	add4 r29, -1 ;
	# xor
	mov4 r30, r28 ;
	mov4 r31, r28 ;
	or4 r30, r25 ;
	and4 r31, r25 ;
	sub4 r30, r31 ;
	or4 r30, r29 ;
	# ~x
	mov4 r29, r25 ;
	mul4 r29, -1 ;
	add4 r29, -1 ;
	or4 r29, r28 ;
	and4 r29, r30 ;
	sr4 r29, 31 ;
	if4 (r29) goto .BB5 ;
	# emit "*" operands: t40 (k: 5 t: 14), r2 (k: 4 t: 14)
	mov4 r32, [r2] ;
	# emit "" operands:  (k: 167974960 t: -96), r3 (k: 4 t: 4)
	mov4 r33, r3 ;
	sub4 r33, 1 ;
	# ~x
	mov4 r34, r3 ;
	mul4 r34, -1 ;
	add4 r34, -1 ;
	and4 r33, r34 ;
	sr4 r33, 31 ;
	if4 (r33) goto .BB3 ;
	# emit "=" operands: t41 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r35, 0 ;
	# emit "jmp" operands:  (k: 167974888 t: 56)
	goto .BB4
.BB3:
	# emit "=" operands: t41 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r35, 1 ;
.BB4:
	# emit "call" operands: t42 (k: 5 t: 14), RecursiveInsert (k: 9 t: 19)
	call r36, RecursiveInsert, (r1, r32, r35) ;
	# emit "*=" operands: r2 (k: 4 t: 14), t42 (k: 5 t: 14)
	mov4 [r2], r36 ;
	# emit "jmp"
	goto .BB8
.BB5:
	# emit "+" operands: t44 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t46 (k: 5 t: 14), t44 (k: 5 t: 14)
	mov4 r37, [r2 + 4] ;
	# emit "" operands:  (k: 167976280 t: -56), r3 (k: 4 t: 4)
	mov4 r38, r3 ;
	sub4 r38, 1 ;
	# ~x
	mov4 r39, r3 ;
	mul4 r39, -1 ;
	add4 r39, -1 ;
	and4 r38, r39 ;
	sr4 r38, 31 ;
	if4 (r38) goto .BB6 ;
	# emit "=" operands: t47 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r40, 0 ;
	# emit "jmp" operands:  (k: 167976208 t: 56)
	goto .BB7
.BB6:
	# emit "=" operands: t47 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r40, 1 ;
.BB7:
	# emit "call" operands: t48 (k: 5 t: 14), RecursiveInsert (k: 9 t: 19)
	call r41, RecursiveInsert, (r1, r37, r40) ;
	# emit "*=" operands: t44 (k: 5 t: 14), t48 (k: 5 t: 14)
	mov4 [r2 + 4], r41 ;
.BB8:
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1, r2, r3), r0, (r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41)>

Insert {
	# emit "call" operands: t0 (k: 5 t: 14), RecursiveInsert (k: 9 t: 19)
	mov4 r4, 0 ;
	call r3, RecursiveInsert, (r1, r2, r4) ;
	# emit "ret" operands: t0 (k: 5 t: 14)
	mov4 r0, r3 ;
	ret
} <(r1, r2), r0, (r3, r4)>

RecPrintRange {
	# emit "==", r3 (k: 4 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r3) goto .BB18 ;
	mov4 r5, 1 ;
	goto .BB19
.BB18:
	mov4 r5, 0 ;
.BB19:
	if4 (r5) goto .BB15 ;
	# emit "*" operands: t0 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r6, [r1] ;
	# emit "+" operands: t1 (k: 5 t: 14), r3 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t2 (k: 5 t: 14), t1 (k: 5 t: 14)
	mov4 r7, [r3 + 8] ;
	# emit "*" operands: t3 (k: 5 t: 4), t2 (k: 5 t: 14)
	mov4 r8, [r7] ;
	# emit ">" operands:  (k: 167978560 t: -32), t0 (k: 5 t: 4), t3 (k: 5 t: 4)
	mov4 r9, r8 ;
	sub4 r9, r6 ;
	# xor
	mov4 r10, r8 ;
	mov4 r12, r8 ;
	or4 r10, r6 ;
	and4 r12, r6 ;
	sub4 r10, r12 ;
	# xor
	mov4 r11, r9 ;
	mov4 r13, r9 ;
	or4 r11, r8 ;
	and4 r13, r8 ;
	sub4 r11, r13 ;
	and4 r10, r11 ;
	# xor
	mov4 r11, r9 ;
	mov4 r14, r9 ;
	or4 r11, r10 ;
	and4 r14, r10 ;
	sub4 r11, r14 ;
	sr4 r11, 31 ;
	if4 (r11) goto .BB9 ;
	# emit "+" operands: t4 (k: 5 t: 14), r3 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t5 (k: 5 t: 14), t4 (k: 5 t: 14)
	mov4 r15, [r3 + 8] ;
	# emit "*" operands: t6 (k: 5 t: 4), t5 (k: 5 t: 14)
	mov4 r16, [r15] ;
	# emit "*" operands: t7 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r17, [r2] ;
	# emit ">" operands:  (k: 167978560 t: -32), t6 (k: 5 t: 4), t7 (k: 5 t: 4)
	mov4 r18, r17 ;
	sub4 r18, r16 ;
	# xor
	mov4 r19, r17 ;
	mov4 r21, r17 ;
	or4 r19, r16 ;
	and4 r21, r16 ;
	sub4 r19, r21 ;
	# xor
	mov4 r20, r18 ;
	mov4 r22, r18 ;
	or4 r20, r17 ;
	and4 r22, r17 ;
	sub4 r20, r22 ;
	and4 r19, r20 ;
	# xor
	mov4 r20, r18 ;
	mov4 r23, r18 ;
	or4 r20, r19 ;
	and4 r23, r19 ;
	sub4 r20, r23 ;
	sr4 r20, 31 ;
	if4 (r20) goto .BB9 ;
	# emit "+" operands: t8 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t9 (k: 5 t: 4), t8 (k: 5 t: 14)
	mov4 r24, [r1 + 4] ;
	# emit "+" operands: t10 (k: 5 t: 14), r3 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t11 (k: 5 t: 14), t10 (k: 5 t: 14)
	mov4 r25, [r3 + 8] ;
	# emit "+" operands: t12 (k: 5 t: 14), t11 (k: 5 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t13 (k: 5 t: 4), t12 (k: 5 t: 14)
	mov4 r26, [r25 + 4] ;
	# emit ">" operands:  (k: 167978560 t: -32), t9 (k: 5 t: 4), t13 (k: 5 t: 4)
	mov4 r27, r26 ;
	sub4 r27, r24 ;
	# xor
	mov4 r28, r26 ;
	mov4 r30, r26 ;
	or4 r28, r24 ;
	and4 r30, r24 ;
	sub4 r28, r30 ;
	# xor
	mov4 r29, r27 ;
	mov4 r31, r27 ;
	or4 r29, r26 ;
	and4 r31, r26 ;
	sub4 r29, r31 ;
	and4 r28, r29 ;
	# xor
	mov4 r29, r27 ;
	mov4 r32, r27 ;
	or4 r29, r28 ;
	and4 r32, r28 ;
	sub4 r29, r32 ;
	sr4 r29, 31 ;
	if4 (r29) goto .BB9 ;
	# emit "+" operands: t14 (k: 5 t: 14), r3 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t15 (k: 5 t: 14), t14 (k: 5 t: 14)
	mov4 r33, [r3 + 8] ;
	# emit "+" operands: t16 (k: 5 t: 14), t15 (k: 5 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t17 (k: 5 t: 4), t16 (k: 5 t: 14)
	mov4 r34, [r33 + 4] ;
	# emit "+" operands: t18 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t19 (k: 5 t: 4), t18 (k: 5 t: 14)
	mov4 r35, [r2 + 4] ;
	# emit ">" operands:  (k: 167978560 t: -32), t17 (k: 5 t: 4), t19 (k: 5 t: 4)
	mov4 r36, r35 ;
	sub4 r36, r34 ;
	# xor
	mov4 r37, r35 ;
	mov4 r39, r35 ;
	or4 r37, r34 ;
	and4 r39, r34 ;
	sub4 r37, r39 ;
	# xor
	mov4 r38, r36 ;
	mov4 r40, r36 ;
	or4 r38, r35 ;
	and4 r40, r35 ;
	sub4 r38, r40 ;
	and4 r37, r38 ;
	# xor
	mov4 r38, r36 ;
	mov4 r41, r36 ;
	or4 r38, r37 ;
	and4 r41, r37 ;
	sub4 r38, r41 ;
	sr4 r38, 31 ;
	if4 (r38) goto .BB9 ;
	# emit "&" operands: t20 (k: 5 t: 14), kdtree.istr4 (k: 7 t: 18)
	call r42, kdtree.istr4, () ;
	# emit "call", prints (k: 9 t: 19)
	call r43, prints, (r42) ;
	# emit "+" operands: t22 (k: 5 t: 14), r3 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t23 (k: 5 t: 14), t22 (k: 5 t: 14)
	mov4 r44, [r3 + 8] ;
	# emit "*" operands: t24 (k: 5 t: 4), t23 (k: 5 t: 14)
	mov4 r45, [r44] ;
	# emit "call", print32 (k: 9 t: 19)
	call r46, print32, (r45) ;
	# emit "&" operands: t26 (k: 5 t: 14), kdtree.istr5 (k: 7 t: 18)
	call r47, kdtree.istr5, () ;
	# emit "call", prints (k: 9 t: 19)
	call r48, prints, (r47) ;
	# emit "*" operands: t28 (k: 5 t: 14), t22 (k: 5 t: 14)
	mov4 r49, [r3 + 8] ;
	# emit "+" operands: t29 (k: 5 t: 14), t28 (k: 5 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t30 (k: 5 t: 4), t29 (k: 5 t: 14)
	mov4 r50, [r49 + 4] ;
	# emit "call", print32 (k: 9 t: 19)
	call r51, print32, (r50) ;
	# emit "&" operands: t32 (k: 5 t: 14), kdtree.istr6 (k: 7 t: 18)
	call r52, kdtree.istr6, () ;
	# emit "call", prints (k: 9 t: 19)
	call r53, prints, (r52) ;
.BB9:
	# emit "<<" operands: t34 (k: 5 t: 4), r4 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t35 (k: 5 t: 14), r1 (k: 4 t: 14), t34 (k: 5 t: 4)
	mov4 r54, r1 ;
	add4 r54, r4 * 4 ;
	# emit "*" operands: t36 (k: 5 t: 4), t35 (k: 5 t: 14)
	mov4 r55, [r54] ;
	# emit "+" operands: t37 (k: 5 t: 14), r3 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t38 (k: 5 t: 14), t37 (k: 5 t: 14)
	mov4 r56, [r3 + 8] ;
	# emit "+" operands: t39 (k: 5 t: 14), t38 (k: 5 t: 14), t34 (k: 5 t: 4)
	mov4 r57, r56 ;
	add4 r57, r4 * 4 ;
	# emit "*" operands: t40 (k: 5 t: 4), t39 (k: 5 t: 14)
	mov4 r58, [r57] ;
	# emit ">" operands:  (k: 167985200 t: 40), t36 (k: 5 t: 4), t40 (k: 5 t: 4)
	mov4 r59, r58 ;
	sub4 r59, r55 ;
	# xor
	mov4 r60, r58 ;
	mov4 r62, r58 ;
	or4 r60, r55 ;
	and4 r62, r55 ;
	sub4 r60, r62 ;
	# xor
	mov4 r61, r59 ;
	mov4 r63, r59 ;
	or4 r61, r58 ;
	and4 r63, r58 ;
	sub4 r61, r63 ;
	and4 r60, r61 ;
	# xor
	mov4 r61, r59 ;
	mov4 r64, r59 ;
	or4 r61, r60 ;
	and4 r64, r60 ;
	sub4 r61, r64 ;
	sr4 r61, 31 ;
	if4 (r61) goto .BB12 ;
	# emit "*" operands: t41 (k: 5 t: 14), r3 (k: 4 t: 14)
	mov4 r65, [r3] ;
	# emit "" operands:  (k: 167985344 t: 48), r4 (k: 4 t: 4)
	mov4 r66, r4 ;
	sub4 r66, 1 ;
	# ~x
	mov4 r67, r4 ;
	mul4 r67, -1 ;
	add4 r67, -1 ;
	and4 r66, r67 ;
	sr4 r66, 31 ;
	if4 (r66) goto .BB10 ;
	# emit "=" operands: t42 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r68, 0 ;
	# emit "jmp" operands:  (k: 167985272 t: -104)
	goto .BB11
.BB10:
	# emit "=" operands: t42 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r68, 1 ;
.BB11:
	# emit "call", RecPrintRange (k: 9 t: 19)
	call r69, RecPrintRange, (r1, r2, r65, r68) ;
.BB12:
	# emit "<<" operands: t43 (k: 5 t: 4), r4 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t44 (k: 5 t: 14), r2 (k: 4 t: 14), t43 (k: 5 t: 4)
	mov4 r70, r2 ;
	add4 r70, r4 * 4 ;
	# emit "*" operands: t45 (k: 5 t: 4), t44 (k: 5 t: 14)
	mov4 r71, [r70] ;
	# emit "+" operands: t46 (k: 5 t: 14), r3 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t47 (k: 5 t: 14), t46 (k: 5 t: 14)
	mov4 r72, [r3 + 8] ;
	# emit "+" operands: t48 (k: 5 t: 14), t47 (k: 5 t: 14), t43 (k: 5 t: 4)
	mov4 r73, r72 ;
	add4 r73, r4 * 4 ;
	# emit "*" operands: t49 (k: 5 t: 4), t48 (k: 5 t: 14)
	mov4 r74, [r73] ;
	# emit "<", t45 (k: 5 t: 4), t49 (k: 5 t: 4)
	mov4 r75, r71 ;
	sub4 r75, r74 ;
	# xor
	mov4 r76, r71 ;
	mov4 r78, r71 ;
	or4 r76, r74 ;
	and4 r78, r74 ;
	sub4 r76, r78 ;
	# xor
	mov4 r77, r75 ;
	mov4 r79, r75 ;
	or4 r77, r71 ;
	and4 r79, r71 ;
	sub4 r77, r79 ;
	and4 r76, r77 ;
	# xor
	mov4 r77, r75 ;
	mov4 r80, r75 ;
	or4 r77, r76 ;
	and4 r80, r76 ;
	sub4 r77, r80 ;
	sr4 r77, 31 ;
	if4 (r77) goto .BB15 ;
	# emit "+" operands: t50 (k: 5 t: 14), r3 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t51 (k: 5 t: 14), t50 (k: 5 t: 14)
	mov4 r81, [r3 + 4] ;
	# emit "" operands:  (k: 167987376 t: 32), r4 (k: 4 t: 4)
	mov4 r82, r4 ;
	sub4 r82, 1 ;
	# ~x
	mov4 r83, r4 ;
	mul4 r83, -1 ;
	add4 r83, -1 ;
	and4 r82, r83 ;
	sr4 r82, 31 ;
	if4 (r82) goto .BB13 ;
	# emit "=" operands: t52 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r84, 0 ;
	# emit "jmp" operands:  (k: 167987304 t: 40)
	goto .BB14
.BB13:
	# emit "=" operands: t52 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r84, 1 ;
.BB14:
	# emit "call", RecPrintRange (k: 9 t: 19)
	call r85, RecPrintRange, (r1, r2, r81, r84) ;
.BB15:
	ret
} <(r1, r2, r3, r4), r0, (r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r79, r80, r81, r82, r83, r84, r85)>

PrintRange {
	# emit "call", RecPrintRange (k: 9 t: 19)
	mov4 r5, 0 ;
	call r4, RecPrintRange, (r1, r2, r3, r5) ;
	ret
} <(r1, r2, r3), r0, (r4, r5)>

main {
	# emit "call" operands: r4 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r4, 8 ;
	# emit "call" operands: r5 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r5, 8 ;
	# emit "call" operands: r6 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r6, 8 ;
	# emit "&" operands: t3 (k: 5 t: 14), kdtree.istr7 (k: 7 t: 18)
	call r8, kdtree.istr7, () ;
	# emit "call", prints (k: 9 t: 19)
	call r9, prints, (r8) ;
	# emit "=" operands: r3 (k: 4 t: 14), 0 (k: 3 t: 14)
	mov4 r3, 0 ;
	# emit "=" operands: r7 (k: 4 t: 4), 300 (k: 3 t: 4)
	mov4 r7, 300 ;
	# emit "jmp" operands:  (k: 167989544 t: 0)
	goto .BB17
.BB16:
	# emit "*=" operands: r4 (k: 4 t: 14), r7 (k: 4 t: 4)
	mov4 [r4], r7 ;
	# emit "+" operands: t7 (k: 5 t: 14), r4 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "-" operands: t9 (k: 5 t: 4), 2500 (k: 3 t: 4), r7 (k: 4 t: 4)
	mov4 r10, 2500 ;
	mov4 r11, r10 ;
	sub4 r11, r7 ;
	# emit "*=" operands: t7 (k: 5 t: 14), t9 (k: 5 t: 4)
	mov4 [r4 + 4], r11 ;
	# emit "call" operands: r3 (k: 4 t: 14), Insert (k: 9 t: 19)
	call r3, Insert, (r4, r3) ;
	# emit "++" operands: r7 (k: 4 t: 4)
	add4 r7, 1 ;
.BB17:
	# emit "<" operands:  (k: 167988448 t: -72), r7 (k: 4 t: 4), 370 (k: 3 t: 4)
	mov4 r12, r7 ;
	sub4 r12, 370 ;
	# xor
	mov4 r13, r7 ;
	mov4 r15, r7 ;
	or4 r13, 370 ;
	and4 r15, 370 ;
	sub4 r13, r15 ;
	# xor
	mov4 r14, r12 ;
	mov4 r16, r12 ;
	or4 r14, r7 ;
	and4 r16, r7 ;
	sub4 r14, r16 ;
	and4 r13, r14 ;
	# xor
	mov4 r14, r12 ;
	mov4 r17, r12 ;
	or4 r14, r13 ;
	and4 r17, r13 ;
	sub4 r14, r17 ;
	sr4 r14, 31 ;
	if4 (r14) goto .BB16 ;
	# emit "&" operands: t14 (k: 5 t: 14), kdtree.istr8 (k: 7 t: 18)
	call r18, kdtree.istr8, () ;
	# emit "call", prints (k: 9 t: 19)
	call r19, prints, (r18) ;
	# emit "=" operands: r7 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r7, 1 ;
	# emit "*=" operands: r5 (k: 4 t: 14), 70 (k: 3 t: 4)
	mov4 r20, 70 ;
	mov4 [r5], r20 ;
	# emit "+" operands: t18 (k: 5 t: 14), r5 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*=" operands: t18 (k: 5 t: 14), 2186 (k: 3 t: 4)
	mov4 r21, 2186 ;
	mov4 [r5 + 4], r21 ;
	# emit "*=" operands: r6 (k: 4 t: 14), 1200 (k: 3 t: 4)
	mov4 r22, 1200 ;
	mov4 [r6], r22 ;
	# emit "+" operands: t23 (k: 5 t: 14), r6 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*=" operands: t23 (k: 5 t: 14), 2200 (k: 3 t: 4)
	mov4 r23, 2200 ;
	mov4 [r6 + 4], r23 ;
	# emit "call", PrintRange (k: 9 t: 19)
	call r24, PrintRange, (r5, r6, r3) ;
	# emit "&" operands: t26 (k: 5 t: 14), kdtree.istr9 (k: 7 t: 18)
	call r25, kdtree.istr9, () ;
	# emit "call", prints (k: 9 t: 19)
	call r26, prints, (r25) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26)>

