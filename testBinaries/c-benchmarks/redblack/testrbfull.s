# Code auto-generated by MinxCC

testrb.istr0 {
	mov4 r1, 22 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 73 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testrb.istr1 {
	mov4 r1, 10 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testrb.istr2 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testrb.istr3 {
	mov4 r1, 8 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 77 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testrb.istr4 {
	mov4 r1, 10 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 44 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 77 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 120 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testrb.istr5 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




main {
	# emit "call" operands: r5 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r5, 4 ;
	# emit "=" operands: r7 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r7, 0 ;
	# emit "*=" operands: r5 (k: 4 t: 14), 0 (k: 3 t: 14)
	mov4 r8, 0 ;
	mov4 [r5], r8 ;
	# emit "call" operands: r3 (k: 4 t: 14), Initialize (k: 9 t: 19)
	call r3, Initialize, (r5) ;
	# emit "*" operands: t4 (k: 5 t: 14), r5 (k: 4 t: 14)
	mov4 r9, [r5] ;
	# emit "call" operands: r3 (k: 4 t: 14), MakeEmpty (k: 9 t: 19)
	call r3, MakeEmpty, (r3, r9) ;
	# emit "=" operands: r6 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r6, 0 ;
	# emit "jmp" operands:  (k: 162121136 t: -120)
	goto .BB1
.BB0:
	# emit "*" operands: t6 (k: 5 t: 14), r5 (k: 4 t: 14)
	mov4 r10, [r5] ;
	# emit "call" operands: r3 (k: 4 t: 14), Insert (k: 9 t: 19)
	call r3, Insert, (r7, r3, r10) ;
	# emit "++" operands: r6 (k: 4 t: 4)
	add4 r6, 1 ;
	# emit "+" operands: t10 (k: 5 t: 4), r7 (k: 4 t: 4), 7 (k: 3 t: 4)
	mov4 r11, r7 ;
	add4 r11, 7 ;
	# emit "%" operands: t11 (k: 5 t: 4), t10 (k: 5 t: 4), 50 (k: 3 t: 4)
	mov4 r13, r11 ;
	div4 r13, 50 ;
	mul4 r13, 50 ;
	mov4 r12, r11 ;
	sub4 r12, r13 ;
	# emit "=" operands: r7 (k: 4 t: 4), t11 (k: 5 t: 4)
	mov4 r7, r12 ;
.BB1:
	# emit "<" operands:  (k: 162119720 t: 64), r6 (k: 4 t: 4), 50 (k: 3 t: 4)
	mov4 r14, r6 ;
	sub4 r14, 50 ;
	# xor
	mov4 r15, r6 ;
	mov4 r17, r6 ;
	or4 r15, 50 ;
	and4 r17, 50 ;
	sub4 r15, r17 ;
	# xor
	mov4 r16, r14 ;
	mov4 r18, r14 ;
	or4 r16, r6 ;
	and4 r18, r6 ;
	sub4 r16, r18 ;
	and4 r15, r16 ;
	# xor
	mov4 r16, r14 ;
	mov4 r19, r14 ;
	or4 r16, r15 ;
	and4 r19, r15 ;
	sub4 r16, r19 ;
	sr4 r16, 31 ;
	if4 (r16) goto .BB0 ;
	# emit "&" operands: t12 (k: 5 t: 14), testrb.istr0 (k: 7 t: 18)
	call r20, testrb.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r21, prints, (r20) ;
	# emit "=" operands: r6 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r6, 0 ;
	# emit "jmp" operands:  (k: 162123376 t: -40)
	goto .BB5
.BB2:
	# emit "*" operands: t14 (k: 5 t: 14), r5 (k: 4 t: 14)
	mov4 r22, [r5] ;
	# emit "call" operands: r4 (k: 4 t: 14), Find (k: 9 t: 19)
	call r4, Find, (r6, r3, r22) ;
	# emit "==" operands:  (k: 162123520 t: 112), r4 (k: 4 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r4) goto .BB6 ;
	mov4 r23, 1 ;
	goto .BB7
.BB6:
	mov4 r23, 0 ;
.BB7:
	if4 (r23) goto .BB3 ;
	# emit "call" operands: t16 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r24, Retrieve, (r4) ;
	# emit "==" operands:  (k: 162123448 t: -112), t16 (k: 5 t: 4), r6 (k: 4 t: 4)
	eq4 r25, r24, r6 ;
	if4 (r25) goto .BB4 ;
.BB3:
	# emit "&" operands: t17 (k: 5 t: 14), testrb.istr1 (k: 7 t: 18)
	call r26, testrb.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r27, prints, (r26) ;
	# emit "call", print32 (k: 9 t: 19)
	call r28, print32, (r6) ;
	# emit "&" operands: t20 (k: 5 t: 14), testrb.istr2 (k: 7 t: 18)
	call r29, testrb.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r30, prints, (r29) ;
.BB4:
	# emit "++" operands: r6 (k: 4 t: 4)
	add4 r6, 1 ;
.BB5:
	# emit "<" operands:  (k: 162121352 t: 0), r6 (k: 4 t: 4), 50 (k: 3 t: 4)
	mov4 r31, r6 ;
	sub4 r31, 50 ;
	# xor
	mov4 r32, r6 ;
	mov4 r34, r6 ;
	or4 r32, 50 ;
	and4 r34, 50 ;
	sub4 r32, r34 ;
	# xor
	mov4 r33, r31 ;
	mov4 r35, r31 ;
	or4 r33, r6 ;
	and4 r35, r6 ;
	sub4 r33, r35 ;
	and4 r32, r33 ;
	# xor
	mov4 r33, r31 ;
	mov4 r36, r31 ;
	or4 r33, r32 ;
	and4 r36, r32 ;
	sub4 r33, r36 ;
	sr4 r33, 31 ;
	if4 (r33) goto .BB2 ;
	# emit "&" operands: t24 (k: 5 t: 14), testrb.istr3 (k: 7 t: 18)
	call r37, testrb.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r38, prints, (r37) ;
	# emit "*" operands: t26 (k: 5 t: 14), r5 (k: 4 t: 14)
	mov4 r39, [r5] ;
	# emit "call" operands: t27 (k: 5 t: 14), FindMin (k: 9 t: 19)
	call r40, FindMin, (r3, r39) ;
	# emit "call" operands: t28 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r41, Retrieve, (r40) ;
	# emit "call", print32 (k: 9 t: 19)
	call r42, print32, (r41) ;
	# emit "&" operands: t30 (k: 5 t: 14), testrb.istr4 (k: 7 t: 18)
	call r43, testrb.istr4, () ;
	# emit "call", prints (k: 9 t: 19)
	call r44, prints, (r43) ;
	# emit "*" operands: t32 (k: 5 t: 14), r5 (k: 4 t: 14)
	mov4 r45, [r5] ;
	# emit "call" operands: t33 (k: 5 t: 14), FindMax (k: 9 t: 19)
	call r46, FindMax, (r3, r45) ;
	# emit "call" operands: t34 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r47, Retrieve, (r46) ;
	# emit "call", print32 (k: 9 t: 19)
	call r48, print32, (r47) ;
	# emit "&" operands: t36 (k: 5 t: 14), testrb.istr5 (k: 7 t: 18)
	call r49, testrb.istr5, () ;
	# emit "call", prints (k: 9 t: 19)
	call r50, prints, (r49) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50)>

# Code auto-generated by MinxCC

redblack.istr0 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

redblack.istr1 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

redblack.istr2 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

redblack.istr3 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

redblack.istr4 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

redblack.istr5 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

redblack.istr6 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

redblack.istr7 {
	mov4 r1, 25 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 82 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 118 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 100 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




Initialize {
	# emit "*" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 r3, [r1] ;
	# emit "!=" operands:  (k: 161030040 t: 48), t0 (k: 5 t: 14), 0 (k: 3 t: 14)
	if4 (r3) goto .BB1 ;
	# emit "call" operands: t2 (k: 5 t: 14), malloc (k: 9 t: 19)
	alloc r4, 16 ;
	# emit "*=" operands: r1 (k: 4 t: 14), t2 (k: 5 t: 14)
	mov4 [r1], r4 ;
	# emit "*" operands: t4 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 r5, [r1] ;
	# emit "!=" operands:  (k: 161030112 t: -8), t4 (k: 5 t: 14), 0 (k: 3 t: 14)
	if4 (r5) goto .BB0 ;
	# emit "&" operands: t5 (k: 5 t: 14), redblack.istr0 (k: 7 t: 18)
	call r6, redblack.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r7, prints, (r6) ;
	# emit "&" operands: t7 (k: 5 t: 14), redblack.istr1 (k: 7 t: 18)
	call r8, redblack.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r9, prints, (r8) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r11, 1 ;
	call r10, mincexit, (r11) ;
.BB0:
	# emit "*" operands: t10 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 r12, [r1] ;
	# emit "+" operands: t11 (k: 5 t: 14), t10 (k: 5 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t13 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 r13, [r1] ;
	# emit "+" operands: t14 (k: 5 t: 14), t13 (k: 5 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t16 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 r14, [r1] ;
	# emit "*=" operands: t14 (k: 5 t: 14), t16 (k: 5 t: 14)
	mov4 [r13 + 8], r14 ;
	# emit "*" operands: t17 (k: 5 t: 14), t14 (k: 5 t: 14)
	mov4 r15, [r13 + 8] ;
	# emit "*=" operands: t11 (k: 5 t: 14), t17 (k: 5 t: 14)
	mov4 [r12 + 4], r15 ;
	# emit "*" operands: t19 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 r16, [r1] ;
	# emit "+" operands: t20 (k: 5 t: 14), t19 (k: 5 t: 14), 12 (k: 3 t: 4)
	# emit "*=" operands: t20 (k: 5 t: 14), 1 (k: 3 t: 4)
	mov4 r17, 1 ;
	mov4 [r16 + 12], r17 ;
	# emit "*" operands: t23 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 r18, [r1] ;
	# emit "*=" operands: t23 (k: 5 t: 14), 12345 (k: 3 t: 4)
	mov4 r19, 12345 ;
	mov4 [r18], r19 ;
.BB1:
	# emit "call" operands: r2 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r2, 16 ;
	# emit "!=", r2 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r2) goto .BB2 ;
	# emit "&" operands: t27 (k: 5 t: 14), redblack.istr2 (k: 7 t: 18)
	call r20, redblack.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r21, prints, (r20) ;
	# emit "&" operands: t29 (k: 5 t: 14), redblack.istr3 (k: 7 t: 18)
	call r22, redblack.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r23, prints, (r22) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r25, 1 ;
	call r24, mincexit, (r25) ;
.BB2:
	# emit "*=" operands: r2 (k: 4 t: 14), -10000 (k: 3 t: 4)
	mov4 r26, -10000 ;
	mov4 [r2], r26 ;
	# emit "+" operands: t34 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "+" operands: t36 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t38 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 r27, [r1] ;
	# emit "*=" operands: t36 (k: 5 t: 14), t38 (k: 5 t: 14)
	mov4 [r2 + 8], r27 ;
	# emit "*" operands: t39 (k: 5 t: 14), t36 (k: 5 t: 14)
	mov4 r28, [r2 + 8] ;
	# emit "*=" operands: t34 (k: 5 t: 14), t39 (k: 5 t: 14)
	mov4 [r2 + 4], r28 ;
	# emit "+" operands: t41 (k: 5 t: 14), r2 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*=" operands: t41 (k: 5 t: 14), 1 (k: 3 t: 4)
	mov4 r29, 1 ;
	mov4 [r2 + 12], r29 ;
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29)>

Output {
	# emit "call", print32 (k: 9 t: 19)
	call r2, print32, (r1) ;
	# emit "&" operands: t1 (k: 5 t: 14), redblack.istr4 (k: 7 t: 18)
	call r3, redblack.istr4, () ;
	# emit "call", prints (k: 9 t: 19)
	call r4, prints, (r3) ;
	ret
} <(r1), r0, (r2, r3, r4)>

DoPrint {
	# emit "==", r1 (k: 4 t: 14), r2 (k: 4 t: 14)
	eq4 r3, r1, r2 ;
	if4 (r3) goto .BB3 ;
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r4, [r1 + 4] ;
	# emit "call", DoPrint (k: 9 t: 19)
	call r5, DoPrint, (r4, r2) ;
	# emit "*" operands: t2 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r6, [r1] ;
	# emit "call", Output (k: 9 t: 19)
	call r7, Output, (r6) ;
	# emit "+" operands: t3 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t4 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 r8, [r1 + 8] ;
	# emit "call", DoPrint (k: 9 t: 19)
	call r9, DoPrint, (r8, r2) ;
.BB3:
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9)>

PrintTree {
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r3, [r1 + 8] ;
	# emit "call", DoPrint (k: 9 t: 19)
	call r4, DoPrint, (r3, r2) ;
	ret
} <(r1, r2), r0, (r3, r4)>

MakeEmptyRec {
	# emit "==", r1 (k: 4 t: 14), r2 (k: 4 t: 14)
	eq4 r3, r1, r2 ;
	if4 (r3) goto .BB4 ;
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r4, [r1 + 4] ;
	# emit "call", MakeEmptyRec (k: 9 t: 19)
	call r5, MakeEmptyRec, (r4, r2) ;
	# emit "+" operands: t3 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t4 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 r6, [r1 + 8] ;
	# emit "call", MakeEmptyRec (k: 9 t: 19)
	call r7, MakeEmptyRec, (r6, r2) ;
.BB4:
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7)>

MakeEmpty {
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t2 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r3, [r1 + 8] ;
	# emit "call" operands: t3 (k: 5 t: 14), MakeEmptyRec (k: 9 t: 19)
	call r4, MakeEmptyRec, (r3, r2) ;
	# emit "*=" operands: t0 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 [r1 + 8], r4 ;
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	ret
} <(r1, r2), r0, (r3, r4)>

Find {
	# emit "!=" operands:  (k: 161046520 t: 112), r2 (k: 4 t: 14), r3 (k: 4 t: 14)
	eq4 r4, r2, r3 ;
	# outputjz
	if4 (r4) goto .BB36 ;
	mov4 r5, 1 ;
	goto .BB37
.BB36:
	mov4 r5, 0 ;
.BB37:
	if4 (r5) goto .BB5 ;
	# emit "ret" operands: r3 (k: 4 t: 14)
	mov4 r0, r3 ;
	# emit "jmp"
	goto .BB8
.BB5:
	# emit "*" operands: t0 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r6, [r2] ;
	# emit ">=" operands:  (k: 161047816 t: -56), r1 (k: 4 t: 4), t0 (k: 5 t: 4)
	mov4 r7, r1 ;
	sub4 r7, r6 ;
	# ~x
	mul4 r7, -1 ;
	add4 r7, -1 ;
	# xor
	mov4 r8, r6 ;
	mov4 r9, r6 ;
	or4 r8, r1 ;
	and4 r9, r1 ;
	sub4 r8, r9 ;
	or4 r8, r7 ;
	# ~x
	mov4 r7, r1 ;
	mul4 r7, -1 ;
	add4 r7, -1 ;
	or4 r7, r6 ;
	and4 r7, r8 ;
	sr4 r7, 31 ;
	if4 (r7) goto .BB6 ;
	# emit "+" operands: t1 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t2 (k: 5 t: 14), t1 (k: 5 t: 14)
	mov4 r10, [r2 + 4] ;
	# emit "call" operands: t3 (k: 5 t: 14), Find (k: 9 t: 19)
	call r11, Find, (r1, r10, r3) ;
	# emit "ret" operands: t3 (k: 5 t: 14)
	mov4 r0, r11 ;
	# emit "jmp"
	goto .BB8
.BB6:
	# emit "*" operands: t4 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r12, [r2] ;
	# emit "<=" operands:  (k: 161048880 t: 104), r1 (k: 4 t: 4), t4 (k: 5 t: 4)
	mov4 r13, r12 ;
	sub4 r13, r1 ;
	# ~x
	mul4 r13, -1 ;
	add4 r13, -1 ;
	# xor
	mov4 r14, r1 ;
	mov4 r15, r1 ;
	or4 r14, r12 ;
	and4 r15, r12 ;
	sub4 r14, r15 ;
	or4 r14, r13 ;
	# ~x
	mov4 r13, r12 ;
	mul4 r13, -1 ;
	add4 r13, -1 ;
	or4 r13, r1 ;
	and4 r13, r14 ;
	sr4 r13, 31 ;
	if4 (r13) goto .BB7 ;
	# emit "+" operands: t5 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t6 (k: 5 t: 14), t5 (k: 5 t: 14)
	mov4 r16, [r2 + 8] ;
	# emit "call" operands: t7 (k: 5 t: 14), Find (k: 9 t: 19)
	call r17, Find, (r1, r16, r3) ;
	# emit "ret" operands: t7 (k: 5 t: 14)
	mov4 r0, r17 ;
	# emit "jmp"
	goto .BB8
.BB7:
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
.BB8:
	ret
} <(r1, r2, r3), r0, (r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17)>

FindMin {
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r3, [r1 + 8] ;
	# emit "=" operands: r1 (k: 4 t: 14), t1 (k: 5 t: 14)
	mov4 r1, r3 ;
	# emit "jmp" operands:  (k: 161049912 t: -56)
	goto .BB10
.BB9:
	# emit "+" operands: t2 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t3 (k: 5 t: 14), t2 (k: 5 t: 14)
	mov4 r4, [r1 + 4] ;
	# emit "=" operands: r1 (k: 4 t: 14), t3 (k: 5 t: 14)
	mov4 r1, r4 ;
.BB10:
	# emit "+" operands: t4 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t5 (k: 5 t: 14), t4 (k: 5 t: 14)
	mov4 r5, [r1 + 4] ;
	# emit "!=" operands:  (k: 161049472 t: -128), t5 (k: 5 t: 14), r2 (k: 4 t: 14)
	eq4 r6, r5, r2 ;
	# outputjz
	if4 (r6) goto .BB38 ;
	mov4 r7, 1 ;
	goto .BB39
.BB38:
	mov4 r7, 0 ;
.BB39:
	if4 (r7) goto .BB9 ;
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7)>

FindMax {
	# emit "jmp" operands:  (k: 161051280 t: 32)
	goto .BB12
.BB11:
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r3, [r1 + 8] ;
	# emit "=" operands: r1 (k: 4 t: 14), t1 (k: 5 t: 14)
	mov4 r1, r3 ;
.BB12:
	# emit "+" operands: t2 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t3 (k: 5 t: 14), t2 (k: 5 t: 14)
	mov4 r4, [r1 + 8] ;
	# emit "!=" operands:  (k: 161051096 t: -40), t3 (k: 5 t: 14), r2 (k: 4 t: 14)
	eq4 r5, r4, r2 ;
	# outputjz
	if4 (r5) goto .BB40 ;
	mov4 r6, 1 ;
	goto .BB41
.BB40:
	mov4 r6, 0 ;
.BB41:
	if4 (r6) goto .BB11 ;
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6)>

SingleRotateWithLeft {
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r3, [r1 + 4] ;
	# emit "=" operands: r2 (k: 4 t: 14), t1 (k: 5 t: 14)
	mov4 r2, r3 ;
	# emit "+" operands: t3 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t4 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 r4, [r2 + 8] ;
	# emit "*=" operands: t0 (k: 5 t: 14), t4 (k: 5 t: 14)
	mov4 [r1 + 4], r4 ;
	# emit "*=" operands: t3 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 [r2 + 8], r1 ;
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1), r0, (r2, r3, r4)>

SingleRotateWithRight {
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r3, [r1 + 8] ;
	# emit "=" operands: r2 (k: 4 t: 14), t1 (k: 5 t: 14)
	mov4 r2, r3 ;
	# emit "+" operands: t3 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t4 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 r4, [r2 + 4] ;
	# emit "*=" operands: t0 (k: 5 t: 14), t4 (k: 5 t: 14)
	mov4 [r1 + 8], r4 ;
	# emit "*=" operands: t3 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 [r2 + 4], r1 ;
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1), r0, (r2, r3, r4)>

Rotate {
	# emit "*" operands: t0 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r3, [r2] ;
	# emit ">=" operands:  (k: 161058112 t: 80), r1 (k: 4 t: 4), t0 (k: 5 t: 4)
	mov4 r4, r1 ;
	sub4 r4, r3 ;
	# ~x
	mul4 r4, -1 ;
	add4 r4, -1 ;
	# xor
	mov4 r5, r3 ;
	mov4 r6, r3 ;
	or4 r5, r1 ;
	and4 r6, r1 ;
	sub4 r5, r6 ;
	or4 r5, r4 ;
	# ~x
	mov4 r4, r1 ;
	mul4 r4, -1 ;
	add4 r4, -1 ;
	or4 r4, r3 ;
	and4 r4, r5 ;
	sr4 r4, 31 ;
	if4 (r4) goto .BB15 ;
	# emit "+" operands: t1 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t4 (k: 5 t: 14), t1 (k: 5 t: 14)
	mov4 r7, [r2 + 4] ;
	# emit "*" operands: t5 (k: 5 t: 4), t4 (k: 5 t: 14)
	mov4 r8, [r7] ;
	# emit "<" operands:  (k: 161056368 t: -72), r1 (k: 4 t: 4), t5 (k: 5 t: 4)
	mov4 r9, r1 ;
	sub4 r9, r8 ;
	# xor
	mov4 r10, r1 ;
	mov4 r12, r1 ;
	or4 r10, r8 ;
	and4 r12, r8 ;
	sub4 r10, r12 ;
	# xor
	mov4 r11, r9 ;
	mov4 r13, r9 ;
	or4 r11, r1 ;
	and4 r13, r1 ;
	sub4 r11, r13 ;
	and4 r10, r11 ;
	# xor
	mov4 r11, r9 ;
	mov4 r14, r9 ;
	or4 r11, r10 ;
	and4 r14, r10 ;
	sub4 r11, r14 ;
	sr4 r11, 31 ;
	if4 (r11) goto .BB13 ;
	# emit "+" operands: t6 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t7 (k: 5 t: 14), t6 (k: 5 t: 14)
	mov4 r15, [r2 + 4] ;
	# emit "call" operands: t3 (k: 5 t: 14), SingleRotateWithRight (k: 9 t: 19)
	call r16, SingleRotateWithRight, (r15) ;
	# emit "jmp" operands:  (k: 161056296 t: -16)
	goto .BB14
.BB13:
	# emit "+" operands: t9 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t10 (k: 5 t: 14), t9 (k: 5 t: 14)
	mov4 r17, [r2 + 4] ;
	# emit "call" operands: t3 (k: 5 t: 14), SingleRotateWithLeft (k: 9 t: 19)
	call r16, SingleRotateWithLeft, (r17) ;
.BB14:
	# emit "*=" operands: t1 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 [r2 + 4], r16 ;
	# emit "*" operands: t12 (k: 5 t: 14), t1 (k: 5 t: 14)
	mov4 r18, [r2 + 4] ;
	# emit "ret" operands: t12 (k: 5 t: 14)
	mov4 r0, r18 ;
	# emit "jmp"
	goto .BB18
.BB15:
	# emit "+" operands: t13 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t16 (k: 5 t: 14), t13 (k: 5 t: 14)
	mov4 r19, [r2 + 8] ;
	# emit "*" operands: t17 (k: 5 t: 4), t16 (k: 5 t: 14)
	mov4 r20, [r19] ;
	# emit "<" operands:  (k: 161058640 t: -104), r1 (k: 4 t: 4), t17 (k: 5 t: 4)
	mov4 r21, r1 ;
	sub4 r21, r20 ;
	# xor
	mov4 r22, r1 ;
	mov4 r24, r1 ;
	or4 r22, r20 ;
	and4 r24, r20 ;
	sub4 r22, r24 ;
	# xor
	mov4 r23, r21 ;
	mov4 r25, r21 ;
	or4 r23, r1 ;
	and4 r25, r1 ;
	sub4 r23, r25 ;
	and4 r22, r23 ;
	# xor
	mov4 r23, r21 ;
	mov4 r26, r21 ;
	or4 r23, r22 ;
	and4 r26, r22 ;
	sub4 r23, r26 ;
	sr4 r23, 31 ;
	if4 (r23) goto .BB16 ;
	# emit "+" operands: t18 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t19 (k: 5 t: 14), t18 (k: 5 t: 14)
	mov4 r27, [r2 + 8] ;
	# emit "call" operands: t15 (k: 5 t: 14), SingleRotateWithRight (k: 9 t: 19)
	call r28, SingleRotateWithRight, (r27) ;
	# emit "jmp" operands:  (k: 161058568 t: -16)
	goto .BB17
.BB16:
	# emit "+" operands: t21 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t22 (k: 5 t: 14), t21 (k: 5 t: 14)
	mov4 r29, [r2 + 8] ;
	# emit "call" operands: t15 (k: 5 t: 14), SingleRotateWithLeft (k: 9 t: 19)
	call r28, SingleRotateWithLeft, (r29) ;
.BB17:
	# emit "*=" operands: t13 (k: 5 t: 14), t15 (k: 5 t: 14)
	mov4 [r2 + 8], r28 ;
	# emit "*" operands: t24 (k: 5 t: 14), t13 (k: 5 t: 14)
	mov4 r30, [r2 + 8] ;
	# emit "ret" operands: t24 (k: 5 t: 14)
	mov4 r0, r30 ;
.BB18:
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30)>

HandleReorient {
	# emit "+" operands: t0 (k: 5 t: 14), r3 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*=" operands: t0 (k: 5 t: 14), 0 (k: 3 t: 4)
	mov4 r7, 0 ;
	mov4 [r3 + 12], r7 ;
	# emit "+" operands: t3 (k: 5 t: 14), r3 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t4 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 r8, [r3 + 4] ;
	# emit "+" operands: t5 (k: 5 t: 14), t4 (k: 5 t: 14), 12 (k: 3 t: 4)
	# emit "*=" operands: t5 (k: 5 t: 14), 1 (k: 3 t: 4)
	mov4 r9, 1 ;
	mov4 [r8 + 12], r9 ;
	# emit "+" operands: t8 (k: 5 t: 14), r3 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t9 (k: 5 t: 14), t8 (k: 5 t: 14)
	mov4 r10, [r3 + 8] ;
	# emit "+" operands: t10 (k: 5 t: 14), t9 (k: 5 t: 14), 12 (k: 3 t: 4)
	# emit "*=" operands: t10 (k: 5 t: 14), 1 (k: 3 t: 4)
	mov4 r11, 1 ;
	mov4 [r10 + 12], r11 ;
	# emit "+" operands: t13 (k: 5 t: 14), r4 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t14 (k: 5 t: 10), t13 (k: 5 t: 14)
	mov4 r12, [r4 + 12] ;
	# emit "!=", t14 (k: 5 t: 10), 0 (k: 3 t: 4)
	if4 (r12) goto .BB24 ;
	# emit "+" operands: t15 (k: 5 t: 14), r5 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*=" operands: t15 (k: 5 t: 14), 0 (k: 3 t: 4)
	mov4 r13, 0 ;
	mov4 [r5 + 12], r13 ;
	# emit "*" operands: t19 (k: 5 t: 4), r5 (k: 4 t: 14)
	mov4 r14, [r5] ;
	# emit "<" operands:  (k: 161064184 t: 104), r1 (k: 4 t: 4), t19 (k: 5 t: 4)
	mov4 r15, r1 ;
	sub4 r15, r14 ;
	# xor
	mov4 r16, r1 ;
	mov4 r18, r1 ;
	or4 r16, r14 ;
	and4 r18, r14 ;
	sub4 r16, r18 ;
	# xor
	mov4 r17, r15 ;
	mov4 r19, r15 ;
	or4 r17, r1 ;
	and4 r19, r1 ;
	sub4 r17, r19 ;
	and4 r16, r17 ;
	# xor
	mov4 r17, r15 ;
	mov4 r20, r15 ;
	or4 r17, r16 ;
	and4 r20, r16 ;
	sub4 r17, r20 ;
	sr4 r17, 31 ;
	if4 (r17) goto .BB19 ;
	# emit "=" operands: t18 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r21, 0 ;
	# emit "jmp" operands:  (k: 161064112 t: -112)
	goto .BB20
.BB19:
	# emit "=" operands: t18 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r21, 1 ;
.BB20:
	# emit "*" operands: t21 (k: 5 t: 4), r4 (k: 4 t: 14)
	mov4 r22, [r4] ;
	# emit "<" operands:  (k: 161064848 t: 0), r1 (k: 4 t: 4), t21 (k: 5 t: 4)
	mov4 r23, r1 ;
	sub4 r23, r22 ;
	# xor
	mov4 r24, r1 ;
	mov4 r26, r1 ;
	or4 r24, r22 ;
	and4 r26, r22 ;
	sub4 r24, r26 ;
	# xor
	mov4 r25, r23 ;
	mov4 r27, r23 ;
	or4 r25, r1 ;
	and4 r27, r1 ;
	sub4 r25, r27 ;
	and4 r24, r25 ;
	# xor
	mov4 r25, r23 ;
	mov4 r28, r23 ;
	or4 r25, r24 ;
	and4 r28, r24 ;
	sub4 r25, r28 ;
	sr4 r25, 31 ;
	if4 (r25) goto .BB21 ;
	# emit "=" operands: t20 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r29, 0 ;
	# emit "jmp" operands:  (k: 161064776 t: -40)
	goto .BB22
.BB21:
	# emit "=" operands: t20 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r29, 1 ;
.BB22:
	# emit "==" operands:  (k: 161063896 t: -24), t18 (k: 5 t: 4), t20 (k: 5 t: 4)
	eq4 r30, r21, r29 ;
	if4 (r30) goto .BB23 ;
	# emit "call" operands: r4 (k: 4 t: 14), Rotate (k: 9 t: 19)
	call r4, Rotate, (r1, r5) ;
.BB23:
	# emit "call" operands: r3 (k: 4 t: 14), Rotate (k: 9 t: 19)
	call r3, Rotate, (r1, r6) ;
	# emit "+" operands: t24 (k: 5 t: 14), r3 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*=" operands: t24 (k: 5 t: 14), 1 (k: 3 t: 4)
	mov4 r31, 1 ;
	mov4 [r3 + 12], r31 ;
.BB24:
	# emit "+" operands: t27 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t28 (k: 5 t: 14), t27 (k: 5 t: 14)
	mov4 r32, [r2 + 8] ;
	# emit "+" operands: t29 (k: 5 t: 14), t28 (k: 5 t: 14), 12 (k: 3 t: 4)
	# emit "*=" operands: t29 (k: 5 t: 14), 1 (k: 3 t: 4)
	mov4 r33, 1 ;
	mov4 [r32 + 12], r33 ;
	ret
} <(r1, r2, r3, r4, r5, r6), r0, (r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33)>

Insert {
	# emit "=" operands: r6 (k: 4 t: 14), r2 (k: 4 t: 14)
	mov4 r6, r2 ;
	# emit "=" operands: r5 (k: 4 t: 14), r6 (k: 4 t: 14)
	mov4 r5, r6 ;
	# emit "=" operands: r4 (k: 4 t: 14), r5 (k: 4 t: 14)
	mov4 r4, r5 ;
	# emit "*=" operands: r3 (k: 4 t: 14), r1 (k: 4 t: 4)
	mov4 [r3], r1 ;
	# emit "jmp" operands:  (k: 161069376 t: -16)
	goto .BB28
.BB25:
	# emit "=" operands: r7 (k: 4 t: 14), r6 (k: 4 t: 14)
	mov4 r7, r6 ;
	# emit "=" operands: r6 (k: 4 t: 14), r5 (k: 4 t: 14)
	mov4 r6, r5 ;
	# emit "=" operands: r5 (k: 4 t: 14), r4 (k: 4 t: 14)
	mov4 r5, r4 ;
	# emit "*" operands: t2 (k: 5 t: 4), r4 (k: 4 t: 14)
	mov4 r8, [r4] ;
	# emit ">=" operands:  (k: 161068304 t: -56), r1 (k: 4 t: 4), t2 (k: 5 t: 4)
	mov4 r9, r1 ;
	sub4 r9, r8 ;
	# ~x
	mul4 r9, -1 ;
	add4 r9, -1 ;
	# xor
	mov4 r10, r8 ;
	mov4 r11, r8 ;
	or4 r10, r1 ;
	and4 r11, r1 ;
	sub4 r10, r11 ;
	or4 r10, r9 ;
	# ~x
	mov4 r9, r1 ;
	mul4 r9, -1 ;
	add4 r9, -1 ;
	or4 r9, r8 ;
	and4 r9, r10 ;
	sr4 r9, 31 ;
	if4 (r9) goto .BB26 ;
	# emit "+" operands: t3 (k: 5 t: 14), r4 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t4 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 r12, [r4 + 4] ;
	# emit "=" operands: r4 (k: 4 t: 14), t4 (k: 5 t: 14)
	mov4 r4, r12 ;
	# emit "jmp" operands:  (k: 161068376 t: -88)
	goto .BB27
.BB26:
	# emit "+" operands: t5 (k: 5 t: 14), r4 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t6 (k: 5 t: 14), t5 (k: 5 t: 14)
	mov4 r13, [r4 + 8] ;
	# emit "=" operands: r4 (k: 4 t: 14), t6 (k: 5 t: 14)
	mov4 r4, r13 ;
.BB27:
	# emit "+" operands: t7 (k: 5 t: 14), r4 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t8 (k: 5 t: 14), t7 (k: 5 t: 14)
	mov4 r14, [r4 + 4] ;
	# emit "+" operands: t9 (k: 5 t: 14), t8 (k: 5 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t10 (k: 5 t: 10), t9 (k: 5 t: 14)
	mov4 r15, [r14 + 12] ;
	# emit "!=" operands:  (k: 161069376 t: -16), t10 (k: 5 t: 10), 0 (k: 3 t: 4)
	if4 (r15) goto .BB28 ;
	# emit "+" operands: t11 (k: 5 t: 14), r4 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t12 (k: 5 t: 14), t11 (k: 5 t: 14)
	mov4 r16, [r4 + 8] ;
	# emit "+" operands: t13 (k: 5 t: 14), t12 (k: 5 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t14 (k: 5 t: 10), t13 (k: 5 t: 14)
	mov4 r17, [r16 + 12] ;
	# emit "!=" operands:  (k: 161069376 t: -16), t14 (k: 5 t: 10), 0 (k: 3 t: 4)
	if4 (r17) goto .BB28 ;
	# emit "call", HandleReorient (k: 9 t: 19)
	call r18, HandleReorient, (r1, r2, r4, r5, r6, r7) ;
.BB28:
	# emit "*" operands: t15 (k: 5 t: 4), r4 (k: 4 t: 14)
	mov4 r19, [r4] ;
	# emit "!=" operands:  (k: 161067264 t: 16), t15 (k: 5 t: 4), r1 (k: 4 t: 4)
	eq4 r20, r19, r1 ;
	# outputjz
	if4 (r20) goto .BB42 ;
	mov4 r21, 1 ;
	goto .BB43
.BB42:
	mov4 r21, 0 ;
.BB43:
	if4 (r21) goto .BB25 ;
	# emit "==" operands:  (k: 161071136 t: 96), r4 (k: 4 t: 14), r3 (k: 4 t: 14)
	eq4 r22, r4, r3 ;
	if4 (r22) goto .BB29 ;
	# emit "ret" operands: r3 (k: 4 t: 14)
	mov4 r0, r3 ;
	# emit "jmp"
	goto .BB33
.BB29:
	# emit "call" operands: r4 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r4, 16 ;
	# emit "!=" operands:  (k: 161071712 t: -24), r4 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r4) goto .BB30 ;
	# emit "&" operands: t17 (k: 5 t: 14), redblack.istr5 (k: 7 t: 18)
	call r23, redblack.istr5, () ;
	# emit "call", prints (k: 9 t: 19)
	call r24, prints, (r23) ;
	# emit "&" operands: t19 (k: 5 t: 14), redblack.istr6 (k: 7 t: 18)
	call r25, redblack.istr6, () ;
	# emit "call", prints (k: 9 t: 19)
	call r26, prints, (r25) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r28, 1 ;
	call r27, mincexit, (r28) ;
.BB30:
	# emit "*=" operands: r4 (k: 4 t: 14), r1 (k: 4 t: 4)
	mov4 [r4], r1 ;
	# emit "+" operands: t24 (k: 5 t: 14), r4 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "+" operands: t26 (k: 5 t: 14), r4 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*=" operands: t26 (k: 5 t: 14), r3 (k: 4 t: 14)
	mov4 [r4 + 8], r3 ;
	# emit "*" operands: t28 (k: 5 t: 14), t26 (k: 5 t: 14)
	mov4 r29, [r4 + 8] ;
	# emit "*=" operands: t24 (k: 5 t: 14), t28 (k: 5 t: 14)
	mov4 [r4 + 4], r29 ;
	# emit "*" operands: t30 (k: 5 t: 4), r5 (k: 4 t: 14)
	mov4 r30, [r5] ;
	# emit ">=" operands:  (k: 161073896 t: -96), r1 (k: 4 t: 4), t30 (k: 5 t: 4)
	mov4 r31, r1 ;
	sub4 r31, r30 ;
	# ~x
	mul4 r31, -1 ;
	add4 r31, -1 ;
	# xor
	mov4 r32, r30 ;
	mov4 r33, r30 ;
	or4 r32, r1 ;
	and4 r33, r1 ;
	sub4 r32, r33 ;
	or4 r32, r31 ;
	# ~x
	mov4 r31, r1 ;
	mul4 r31, -1 ;
	add4 r31, -1 ;
	or4 r31, r30 ;
	and4 r31, r32 ;
	sr4 r31, 31 ;
	if4 (r31) goto .BB31 ;
	# emit "+" operands: t31 (k: 5 t: 14), r5 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*=" operands: t31 (k: 5 t: 14), r4 (k: 4 t: 14)
	mov4 [r5 + 4], r4 ;
	# emit "jmp" operands:  (k: 161073968 t: 72)
	goto .BB32
.BB31:
	# emit "+" operands: t34 (k: 5 t: 14), r5 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*=" operands: t34 (k: 5 t: 14), r4 (k: 4 t: 14)
	mov4 [r5 + 8], r4 ;
.BB32:
	# emit "call", HandleReorient (k: 9 t: 19)
	call r34, HandleReorient, (r1, r2, r4, r5, r6, r7) ;
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
.BB33:
	ret
} <(r1, r2, r3), r0, (r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34)>

Remove {
	# emit "&" operands: t0 (k: 5 t: 14), redblack.istr7 (k: 7 t: 18)
	call r3, redblack.istr7, () ;
	# emit "call", prints (k: 9 t: 19)
	call r4, prints, (r3) ;
	# emit "" operands:  (k: 161076616 t: 120), r1 (k: 4 t: 4)
	mov4 r5, r1 ;
	sub4 r5, 1 ;
	# ~x
	mov4 r6, r1 ;
	mul4 r6, -1 ;
	add4 r6, -1 ;
	and4 r5, r6 ;
	sr4 r5, 31 ;
	if4 (r5) goto .BB34 ;
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	# emit "jmp"
	goto .BB35
.BB34:
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
.BB35:
	ret
} <(r1, r2), r0, (r3, r4, r5, r6)>

Retrieve {
	# emit "*" operands: t0 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r2, [r1] ;
	# emit "ret" operands: t0 (k: 5 t: 4)
	mov4 r0, r2 ;
	ret
} <(r1), r0, (r2)>

