# Code auto-generated by MinxCC

testtrp.istr0 {
	mov4 r1, 11 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 49 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testtrp.istr1 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testtrp.istr2 {
	mov4 r1, 11 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 50 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testtrp.istr3 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testtrp.istr4 {
	mov4 r1, 11 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 51 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testtrp.istr5 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testtrp.istr6 {
	mov4 r1, 8 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 77 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testtrp.istr7 {
	mov4 r1, 10 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 44 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 77 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 120 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testtrp.istr8 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




main {
	# emit "=" operands: r7 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r7, 0 ;
	# emit "call" operands: r5 (k: 4 t: 14), Initialize (k: 9 t: 19)
	call r5, Initialize, () ;
	# emit "=" operands: r3 (k: 4 t: 14), r5 (k: 4 t: 14)
	mov4 r3, r5 ;
	# emit "call" operands: r3 (k: 4 t: 14), MakeEmpty (k: 9 t: 19)
	call r3, MakeEmpty, (r3, r5) ;
	# emit "=" operands: r6 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r6, 0 ;
	# emit "jmp" operands:  (k: 164712104 t: -128)
	goto .BB1
.BB0:
	# emit "call" operands: r3 (k: 4 t: 14), Insert (k: 9 t: 19)
	call r3, Insert, (r7, r3, r5) ;
	# emit "++" operands: r6 (k: 4 t: 4)
	add4 r6, 1 ;
	# emit "+" operands: t5 (k: 5 t: 4), r7 (k: 4 t: 4), 7 (k: 3 t: 4)
	mov4 r8, r7 ;
	add4 r8, 7 ;
	# emit "%" operands: t6 (k: 5 t: 4), t5 (k: 5 t: 4), 10 (k: 3 t: 4)
	mov4 r10, r8 ;
	div4 r10, 10 ;
	mul4 r10, 10 ;
	mov4 r9, r8 ;
	sub4 r9, r10 ;
	# emit "=" operands: r7 (k: 4 t: 4), t6 (k: 5 t: 4)
	mov4 r7, r9 ;
.BB1:
	# emit "<" operands:  (k: 164711440 t: 56), r6 (k: 4 t: 4), 10 (k: 3 t: 4)
	mov4 r11, r6 ;
	sub4 r11, 10 ;
	# xor
	mov4 r12, r6 ;
	mov4 r14, r6 ;
	or4 r12, 10 ;
	and4 r14, 10 ;
	sub4 r12, r14 ;
	# xor
	mov4 r13, r11 ;
	mov4 r15, r11 ;
	or4 r13, r6 ;
	and4 r15, r6 ;
	sub4 r13, r15 ;
	and4 r12, r13 ;
	# xor
	mov4 r13, r11 ;
	mov4 r16, r11 ;
	or4 r13, r12 ;
	and4 r16, r12 ;
	sub4 r13, r16 ;
	sr4 r13, 31 ;
	if4 (r13) goto .BB0 ;
	# emit "=" operands: r6 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r6, 0 ;
	# emit "jmp" operands:  (k: 164713912 t: 32)
	goto .BB5
.BB2:
	# emit "call" operands: r4 (k: 4 t: 14), Find (k: 9 t: 19)
	call r4, Find, (r6, r3, r5) ;
	# emit "==" operands:  (k: 164714056 t: -72), r4 (k: 4 t: 14), r5 (k: 4 t: 14)
	eq4 r17, r4, r5 ;
	if4 (r17) goto .BB3 ;
	# emit "call" operands: t8 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r18, Retrieve, (r4) ;
	# emit "==" operands:  (k: 164713984 t: -40), t8 (k: 5 t: 4), r6 (k: 4 t: 4)
	eq4 r19, r18, r6 ;
	if4 (r19) goto .BB4 ;
.BB3:
	# emit "&" operands: t9 (k: 5 t: 14), testtrp.istr0 (k: 7 t: 18)
	call r20, testtrp.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r21, prints, (r20) ;
	# emit "call", print32 (k: 9 t: 19)
	call r22, print32, (r6) ;
	# emit "&" operands: t12 (k: 5 t: 14), testtrp.istr1 (k: 7 t: 18)
	call r23, testtrp.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r24, prints, (r23) ;
.BB4:
	# emit "++" operands: r6 (k: 4 t: 4)
	add4 r6, 1 ;
.BB5:
	# emit "<" operands:  (k: 164712320 t: 72), r6 (k: 4 t: 4), 10 (k: 3 t: 4)
	mov4 r25, r6 ;
	sub4 r25, 10 ;
	# xor
	mov4 r26, r6 ;
	mov4 r28, r6 ;
	or4 r26, 10 ;
	and4 r28, 10 ;
	sub4 r26, r28 ;
	# xor
	mov4 r27, r25 ;
	mov4 r29, r25 ;
	or4 r27, r6 ;
	and4 r29, r6 ;
	sub4 r27, r29 ;
	and4 r26, r27 ;
	# xor
	mov4 r27, r25 ;
	mov4 r30, r25 ;
	or4 r27, r26 ;
	and4 r30, r26 ;
	sub4 r27, r30 ;
	sr4 r27, 31 ;
	if4 (r27) goto .BB2 ;
	# emit "=" operands: r6 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r6, 0 ;
	# emit "jmp" operands:  (k: 164715832 t: 16)
	goto .BB7
.BB6:
	# emit "call" operands: r3 (k: 4 t: 14), Remove (k: 9 t: 19)
	call r3, Remove, (r6, r3, r5) ;
	# emit "+" operands: t17 (k: 5 t: 4), r6 (k: 4 t: 4), 2 (k: 3 t: 4)
	mov4 r31, r6 ;
	add4 r31, 2 ;
	# emit "=" operands: r6 (k: 4 t: 4), t17 (k: 5 t: 4)
	mov4 r6, r31 ;
.BB7:
	# emit "<" operands:  (k: 164713760 t: -56), r6 (k: 4 t: 4), 10 (k: 3 t: 4)
	mov4 r32, r6 ;
	sub4 r32, 10 ;
	# xor
	mov4 r33, r6 ;
	mov4 r35, r6 ;
	or4 r33, 10 ;
	and4 r35, 10 ;
	sub4 r33, r35 ;
	# xor
	mov4 r34, r32 ;
	mov4 r36, r32 ;
	or4 r34, r6 ;
	and4 r36, r6 ;
	sub4 r34, r36 ;
	and4 r33, r34 ;
	# xor
	mov4 r34, r32 ;
	mov4 r37, r32 ;
	or4 r34, r33 ;
	and4 r37, r33 ;
	sub4 r34, r37 ;
	sr4 r34, 31 ;
	if4 (r34) goto .BB6 ;
	# emit "=" operands: r6 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r6, 1 ;
	# emit "jmp" operands:  (k: 164717104 t: -104)
	goto .BB11
.BB8:
	# emit "call" operands: r4 (k: 4 t: 14), Find (k: 9 t: 19)
	call r4, Find, (r6, r3, r5) ;
	# emit "==" operands:  (k: 164717248 t: 48), r4 (k: 4 t: 14), r5 (k: 4 t: 14)
	eq4 r38, r4, r5 ;
	if4 (r38) goto .BB9 ;
	# emit "call" operands: t19 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r39, Retrieve, (r4) ;
	# emit "==" operands:  (k: 164717176 t: 80), t19 (k: 5 t: 4), r6 (k: 4 t: 4)
	eq4 r40, r39, r6 ;
	if4 (r40) goto .BB10 ;
.BB9:
	# emit "&" operands: t20 (k: 5 t: 14), testtrp.istr2 (k: 7 t: 18)
	call r41, testtrp.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r42, prints, (r41) ;
	# emit "call", print32 (k: 9 t: 19)
	call r43, print32, (r6) ;
	# emit "&" operands: t23 (k: 5 t: 14), testtrp.istr3 (k: 7 t: 18)
	call r44, testtrp.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r45, prints, (r44) ;
.BB10:
	# emit "+" operands: t25 (k: 5 t: 4), r6 (k: 4 t: 4), 2 (k: 3 t: 4)
	mov4 r46, r6 ;
	add4 r46, 2 ;
	# emit "=" operands: r6 (k: 4 t: 4), t25 (k: 5 t: 4)
	mov4 r6, r46 ;
.BB11:
	# emit "<" operands:  (k: 164716048 t: -64), r6 (k: 4 t: 4), 10 (k: 3 t: 4)
	mov4 r47, r6 ;
	sub4 r47, 10 ;
	# xor
	mov4 r48, r6 ;
	mov4 r50, r6 ;
	or4 r48, 10 ;
	and4 r50, 10 ;
	sub4 r48, r50 ;
	# xor
	mov4 r49, r47 ;
	mov4 r51, r47 ;
	or4 r49, r6 ;
	and4 r51, r6 ;
	sub4 r49, r51 ;
	and4 r48, r49 ;
	# xor
	mov4 r49, r47 ;
	mov4 r52, r47 ;
	or4 r49, r48 ;
	and4 r52, r48 ;
	sub4 r49, r52 ;
	sr4 r49, 31 ;
	if4 (r49) goto .BB8 ;
	# emit "=" operands: r6 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r6, 0 ;
	# emit "jmp" operands:  (k: 164719328 t: 72)
	goto .BB14
.BB12:
	# emit "call" operands: r4 (k: 4 t: 14), Find (k: 9 t: 19)
	call r4, Find, (r6, r3, r5) ;
	# emit "==" operands:  (k: 164719400 t: 0), r4 (k: 4 t: 14), r5 (k: 4 t: 14)
	eq4 r53, r4, r5 ;
	if4 (r53) goto .BB13 ;
	# emit "&" operands: t27 (k: 5 t: 14), testtrp.istr4 (k: 7 t: 18)
	call r54, testtrp.istr4, () ;
	# emit "call", prints (k: 9 t: 19)
	call r55, prints, (r54) ;
	# emit "call", print32 (k: 9 t: 19)
	call r56, print32, (r6) ;
	# emit "&" operands: t30 (k: 5 t: 14), testtrp.istr5 (k: 7 t: 18)
	call r57, testtrp.istr5, () ;
	# emit "call", prints (k: 9 t: 19)
	call r58, prints, (r57) ;
.BB13:
	# emit "+" operands: t32 (k: 5 t: 4), r6 (k: 4 t: 4), 2 (k: 3 t: 4)
	mov4 r59, r6 ;
	add4 r59, 2 ;
	# emit "=" operands: r6 (k: 4 t: 4), t32 (k: 5 t: 4)
	mov4 r6, r59 ;
.BB14:
	# emit "<" operands:  (k: 164716952 t: 40), r6 (k: 4 t: 4), 10 (k: 3 t: 4)
	mov4 r60, r6 ;
	sub4 r60, 10 ;
	# xor
	mov4 r61, r6 ;
	mov4 r63, r6 ;
	or4 r61, 10 ;
	and4 r63, 10 ;
	sub4 r61, r63 ;
	# xor
	mov4 r62, r60 ;
	mov4 r64, r60 ;
	or4 r62, r6 ;
	and4 r64, r6 ;
	sub4 r62, r64 ;
	and4 r61, r62 ;
	# xor
	mov4 r62, r60 ;
	mov4 r65, r60 ;
	or4 r62, r61 ;
	and4 r65, r61 ;
	sub4 r62, r65 ;
	sr4 r62, 31 ;
	if4 (r62) goto .BB12 ;
	# emit "&" operands: t33 (k: 5 t: 14), testtrp.istr6 (k: 7 t: 18)
	call r66, testtrp.istr6, () ;
	# emit "call", prints (k: 9 t: 19)
	call r67, prints, (r66) ;
	# emit "call" operands: t35 (k: 5 t: 14), FindMin (k: 9 t: 19)
	call r68, FindMin, (r3, r5) ;
	# emit "call" operands: t36 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r69, Retrieve, (r68) ;
	# emit "call", print32 (k: 9 t: 19)
	call r70, print32, (r69) ;
	# emit "&" operands: t38 (k: 5 t: 14), testtrp.istr7 (k: 7 t: 18)
	call r71, testtrp.istr7, () ;
	# emit "call", prints (k: 9 t: 19)
	call r72, prints, (r71) ;
	# emit "call" operands: t40 (k: 5 t: 14), FindMax (k: 9 t: 19)
	call r73, FindMax, (r3, r5) ;
	# emit "call" operands: t41 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r74, Retrieve, (r73) ;
	# emit "call", print32 (k: 9 t: 19)
	call r75, print32, (r74) ;
	# emit "&" operands: t43 (k: 5 t: 14), testtrp.istr8 (k: 7 t: 18)
	call r76, testtrp.istr8, () ;
	# emit "call", prints (k: 9 t: 19)
	call r77, prints, (r76) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77)>

