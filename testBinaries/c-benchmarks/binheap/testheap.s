# Code auto-generated by MinxCC

testheap.istr0 {
	mov4 r1, 21 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 68 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 77 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 44 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testheap.istr1 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testheap.istr2 {
	mov4 r1, 9 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 68 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 46 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 46 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 46 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




main {
	# emit "call" operands: r3 (k: 4 t: 14), Initialize (k: 9 t: 19)
	mov4 r6, 1000 ;
	call r3, Initialize, (r6) ;
	# emit "=" operands: r4 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r4, 0 ;
	# emit "=" operands: r5 (k: 4 t: 4), 500 (k: 3 t: 4)
	mov4 r5, 500 ;
	# emit "jmp" operands:  (k: 149241096 t: -32)
	goto .BB1
.BB0:
	# emit "call", Insert (k: 9 t: 19)
	call r7, Insert, (r5, r3) ;
	# emit "++" operands: r4 (k: 4 t: 4)
	add4 r4, 1 ;
	# emit "+" operands: t3 (k: 5 t: 4), r5 (k: 4 t: 4), 71 (k: 3 t: 4)
	mov4 r8, r5 ;
	add4 r8, 71 ;
	# emit "%" operands: t4 (k: 5 t: 4), t3 (k: 5 t: 4), 1000 (k: 3 t: 4)
	mov4 r10, r8 ;
	div4 r10, 1000 ;
	mul4 r10, 1000 ;
	mov4 r9, r8 ;
	sub4 r9, r10 ;
	# emit "=" operands: r5 (k: 4 t: 4), t4 (k: 5 t: 4)
	mov4 r5, r9 ;
.BB1:
	# emit "<" operands:  (k: 149240696 t: -104), r4 (k: 4 t: 4), 1000 (k: 3 t: 4)
	mov4 r11, r4 ;
	sub4 r11, 1000 ;
	# xor
	mov4 r12, r4 ;
	mov4 r14, r4 ;
	or4 r12, 1000 ;
	and4 r14, 1000 ;
	sub4 r12, r14 ;
	# xor
	mov4 r13, r11 ;
	mov4 r15, r11 ;
	or4 r13, r4 ;
	and4 r15, r4 ;
	sub4 r13, r15 ;
	and4 r12, r13 ;
	# xor
	mov4 r13, r11 ;
	mov4 r16, r11 ;
	or4 r13, r12 ;
	and4 r16, r12 ;
	sub4 r13, r16 ;
	sr4 r13, 31 ;
	if4 (r13) goto .BB0 ;
	# emit "=" operands: r5 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "jmp" operands:  (k: 149242856 t: 40)
	goto .BB3
.BB2:
	# emit "call" operands: t5 (k: 5 t: 4), DeleteMin (k: 9 t: 19)
	call r17, DeleteMin, (r3) ;
	# emit "=" operands: t6 (k: 5 t: 4), r5 (k: 4 t: 4)
	mov4 r18, r5 ;
	# emit "++" operands: r5 (k: 4 t: 4)
	add4 r5, 1 ;
	# emit "==" operands:  (k: 149242856 t: 40), t5 (k: 5 t: 4), t6 (k: 5 t: 4)
	eq4 r19, r17, r18 ;
	if4 (r19) goto .BB3 ;
	# emit "&" operands: t8 (k: 5 t: 14), testheap.istr0 (k: 7 t: 18)
	call r20, testheap.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r21, prints, (r20) ;
	# emit "call", print32 (k: 9 t: 19)
	call r22, print32, (r5) ;
	# emit "&" operands: t11 (k: 5 t: 14), testheap.istr1 (k: 7 t: 18)
	call r23, testheap.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r24, prints, (r23) ;
.BB3:
	# emit "call" operands: t13 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r25, IsEmpty, (r3) ;
	# emit "" operands:  (k: 149241312 t: -32), t13 (k: 5 t: 4)
	mov4 r26, r25 ;
	sub4 r26, 1 ;
	# ~x
	mov4 r27, r25 ;
	mul4 r27, -1 ;
	add4 r27, -1 ;
	and4 r26, r27 ;
	sr4 r26, 31 ;
	if4 (r26) goto .BB2 ;
	# emit "&" operands: t14 (k: 5 t: 14), testheap.istr2 (k: 7 t: 18)
	call r28, testheap.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r29, prints, (r28) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29)>

