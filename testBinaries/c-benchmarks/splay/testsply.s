# Code auto-generated by MinxCC

testsply.istr0 {
	mov4 r1, 11 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 49 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testsply.istr1 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testsply.istr2 {
	mov4 r1, 17 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 103 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 118 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testsply.istr3 {
	mov4 r1, 11 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 50 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testsply.istr4 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testsply.istr5 {
	mov4 r1, 11 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 51 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testsply.istr6 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testsply.istr7 {
	mov4 r1, 8 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 77 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testsply.istr8 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testsply.istr9 {
	mov4 r1, 8 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 77 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 120 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testsply.istr10 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




main {
	# emit "call" operands: r5 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r5, 12 ;
	# emit "=" operands: r7 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r7, 0 ;
	# emit "call" operands: r4 (k: 4 t: 14), Initialize (k: 9 t: 19)
	call r4, Initialize, () ;
	# emit "=" operands: r3 (k: 4 t: 14), r4 (k: 4 t: 14)
	mov4 r3, r4 ;
	# emit "call" operands: r3 (k: 4 t: 14), MakeEmpty (k: 9 t: 19)
	call r3, MakeEmpty, (r3, r4) ;
	# emit "=" operands: r6 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r6, 0 ;
	# emit "jmp" operands:  (k: 135058000 t: 40)
	goto .BB1
.BB0:
	# emit "call" operands: r3 (k: 4 t: 14), Insert (k: 9 t: 19)
	call r3, Insert, (r7, r3, r4, r5) ;
	# emit "++" operands: r6 (k: 4 t: 4)
	add4 r6, 1 ;
	# emit "+" operands: t6 (k: 5 t: 4), r7 (k: 4 t: 4), 7 (k: 3 t: 4)
	mov4 r8, r7 ;
	add4 r8, 7 ;
	# emit "%" operands: t7 (k: 5 t: 4), t6 (k: 5 t: 4), 500 (k: 3 t: 4)
	mov4 r10, r8 ;
	div4 r10, 500 ;
	mul4 r10, 500 ;
	mov4 r9, r8 ;
	sub4 r9, r10 ;
	# emit "=" operands: r7 (k: 4 t: 4), t7 (k: 5 t: 4)
	mov4 r7, r9 ;
.BB1:
	# emit "<" operands:  (k: 135057080 t: -32), r6 (k: 4 t: 4), 500 (k: 3 t: 4)
	mov4 r11, r6 ;
	sub4 r11, 500 ;
	# xor
	mov4 r12, r6 ;
	mov4 r14, r6 ;
	or4 r12, 500 ;
	and4 r14, 500 ;
	sub4 r12, r14 ;
	# xor
	mov4 r13, r11 ;
	mov4 r15, r11 ;
	or4 r13, r6 ;
	and4 r15, r6 ;
	sub4 r13, r15 ;
	and4 r12, r13 ;
	# xor
	mov4 r13, r11 ;
	mov4 r16, r11 ;
	or4 r13, r12 ;
	and4 r16, r12 ;
	sub4 r13, r16 ;
	sr4 r13, 31 ;
	if4 (r13) goto .BB0 ;
	# emit "=" operands: r7 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r7, 0 ;
	# emit "jmp" operands:  (k: 135059520 t: -48)
	goto .BB6
.BB2:
	# emit "=" operands: r6 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r6, 0 ;
	# emit "jmp" operands:  (k: 135060480 t: 64)
	goto .BB5
.BB3:
	# emit "call" operands: r3 (k: 4 t: 14), Find (k: 9 t: 19)
	call r3, Find, (r6, r3, r4, r5) ;
	# emit "call" operands: t9 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r17, Retrieve, (r3) ;
	# emit "==" operands:  (k: 135060552 t: 64), t9 (k: 5 t: 4), r6 (k: 4 t: 4)
	eq4 r18, r17, r6 ;
	if4 (r18) goto .BB4 ;
	# emit "&" operands: t10 (k: 5 t: 14), testsply.istr0 (k: 7 t: 18)
	call r19, testsply.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r20, prints, (r19) ;
	# emit "call", print32 (k: 9 t: 19)
	call r21, print32, (r6) ;
	# emit "&" operands: t13 (k: 5 t: 14), testsply.istr1 (k: 7 t: 18)
	call r22, testsply.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r23, prints, (r22) ;
.BB4:
	# emit "++" operands: r6 (k: 4 t: 4)
	add4 r6, 1 ;
.BB5:
	# emit "<" operands:  (k: 135059448 t: 72), r6 (k: 4 t: 4), 500 (k: 3 t: 4)
	mov4 r24, r6 ;
	sub4 r24, 500 ;
	# xor
	mov4 r25, r6 ;
	mov4 r27, r6 ;
	or4 r25, 500 ;
	and4 r27, 500 ;
	sub4 r25, r27 ;
	# xor
	mov4 r26, r24 ;
	mov4 r28, r24 ;
	or4 r26, r6 ;
	and4 r28, r6 ;
	sub4 r26, r28 ;
	and4 r25, r26 ;
	# xor
	mov4 r26, r24 ;
	mov4 r29, r24 ;
	or4 r26, r25 ;
	and4 r29, r25 ;
	sub4 r26, r29 ;
	sr4 r26, 31 ;
	if4 (r26) goto .BB3 ;
	# emit "++" operands: r7 (k: 4 t: 4)
	add4 r7, 1 ;
.BB6:
	# emit "<" operands:  (k: 135058216 t: 64), r7 (k: 4 t: 4), 2 (k: 3 t: 4)
	mov4 r30, r7 ;
	sub4 r30, 2 ;
	# xor
	mov4 r31, r7 ;
	mov4 r33, r7 ;
	or4 r31, 2 ;
	and4 r33, 2 ;
	sub4 r31, r33 ;
	# xor
	mov4 r32, r30 ;
	mov4 r34, r30 ;
	or4 r32, r7 ;
	and4 r34, r7 ;
	sub4 r32, r34 ;
	and4 r31, r32 ;
	# xor
	mov4 r32, r30 ;
	mov4 r35, r30 ;
	or4 r32, r31 ;
	and4 r35, r31 ;
	sub4 r32, r35 ;
	sr4 r32, 31 ;
	if4 (r32) goto .BB2 ;
	# emit "&" operands: t19 (k: 5 t: 14), testsply.istr2 (k: 7 t: 18)
	call r36, testsply.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r37, prints, (r36) ;
	# emit "=" operands: r6 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r6, 0 ;
	# emit "jmp" operands:  (k: 135062768 t: -56)
	goto .BB8
.BB7:
	# emit "call" operands: r3 (k: 4 t: 14), Remove (k: 9 t: 19)
	call r3, Remove, (r6, r3, r4, r5) ;
	# emit "+" operands: t22 (k: 5 t: 4), r6 (k: 4 t: 4), 2 (k: 3 t: 4)
	mov4 r38, r6 ;
	add4 r38, 2 ;
	# emit "=" operands: r6 (k: 4 t: 4), t22 (k: 5 t: 4)
	mov4 r6, r38 ;
.BB8:
	# emit "<" operands:  (k: 135059664 t: -128), r6 (k: 4 t: 4), 500 (k: 3 t: 4)
	mov4 r39, r6 ;
	sub4 r39, 500 ;
	# xor
	mov4 r40, r6 ;
	mov4 r42, r6 ;
	or4 r40, 500 ;
	and4 r42, 500 ;
	sub4 r40, r42 ;
	# xor
	mov4 r41, r39 ;
	mov4 r43, r39 ;
	or4 r41, r6 ;
	and4 r43, r6 ;
	sub4 r41, r43 ;
	and4 r40, r41 ;
	# xor
	mov4 r41, r39 ;
	mov4 r44, r39 ;
	or4 r41, r40 ;
	and4 r44, r40 ;
	sub4 r41, r44 ;
	sr4 r41, 31 ;
	if4 (r41) goto .BB7 ;
	# emit "=" operands: r6 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r6, 1 ;
	# emit "jmp" operands:  (k: 135064256 t: 32)
	goto .BB11
.BB9:
	# emit "call" operands: r3 (k: 4 t: 14), Find (k: 9 t: 19)
	call r3, Find, (r6, r3, r4, r5) ;
	# emit "call" operands: t24 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r45, Retrieve, (r3) ;
	# emit "==" operands:  (k: 135064328 t: -40), t24 (k: 5 t: 4), r6 (k: 4 t: 4)
	eq4 r46, r45, r6 ;
	if4 (r46) goto .BB10 ;
	# emit "&" operands: t25 (k: 5 t: 14), testsply.istr3 (k: 7 t: 18)
	call r47, testsply.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r48, prints, (r47) ;
	# emit "call", print32 (k: 9 t: 19)
	call r49, print32, (r6) ;
	# emit "&" operands: t28 (k: 5 t: 14), testsply.istr4 (k: 7 t: 18)
	call r50, testsply.istr4, () ;
	# emit "call", prints (k: 9 t: 19)
	call r51, prints, (r50) ;
.BB10:
	# emit "+" operands: t30 (k: 5 t: 4), r6 (k: 4 t: 4), 2 (k: 3 t: 4)
	mov4 r52, r6 ;
	add4 r52, 2 ;
	# emit "=" operands: r6 (k: 4 t: 4), t30 (k: 5 t: 4)
	mov4 r6, r52 ;
.BB11:
	# emit "<" operands:  (k: 135062984 t: 8), r6 (k: 4 t: 4), 500 (k: 3 t: 4)
	mov4 r53, r6 ;
	sub4 r53, 500 ;
	# xor
	mov4 r54, r6 ;
	mov4 r56, r6 ;
	or4 r54, 500 ;
	and4 r56, 500 ;
	sub4 r54, r56 ;
	# xor
	mov4 r55, r53 ;
	mov4 r57, r53 ;
	or4 r55, r6 ;
	and4 r57, r6 ;
	sub4 r55, r57 ;
	and4 r54, r55 ;
	# xor
	mov4 r55, r53 ;
	mov4 r58, r53 ;
	or4 r55, r54 ;
	and4 r58, r54 ;
	sub4 r55, r58 ;
	sr4 r55, 31 ;
	if4 (r55) goto .BB9 ;
	# emit "=" operands: r6 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r6, 0 ;
	# emit "jmp" operands:  (k: 135066264 t: 32)
	goto .BB14
.BB12:
	# emit "call" operands: r3 (k: 4 t: 14), Find (k: 9 t: 19)
	call r3, Find, (r6, r3, r4, r5) ;
	# emit "call" operands: t32 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r59, Retrieve, (r3) ;
	# emit "!=" operands:  (k: 135066336 t: -40), t32 (k: 5 t: 4), r6 (k: 4 t: 4)
	eq4 r60, r59, r6 ;
	# outputjz
	if4 (r60) goto .BB15 ;
	mov4 r61, 1 ;
	goto .BB16
.BB15:
	mov4 r61, 0 ;
.BB16:
	if4 (r61) goto .BB13 ;
	# emit "&" operands: t33 (k: 5 t: 14), testsply.istr5 (k: 7 t: 18)
	call r62, testsply.istr5, () ;
	# emit "call", prints (k: 9 t: 19)
	call r63, prints, (r62) ;
	# emit "call", print32 (k: 9 t: 19)
	call r64, print32, (r6) ;
	# emit "&" operands: t36 (k: 5 t: 14), testsply.istr6 (k: 7 t: 18)
	call r65, testsply.istr6, () ;
	# emit "call", prints (k: 9 t: 19)
	call r66, prints, (r65) ;
.BB13:
	# emit "+" operands: t38 (k: 5 t: 4), r6 (k: 4 t: 4), 2 (k: 3 t: 4)
	mov4 r67, r6 ;
	add4 r67, 2 ;
	# emit "=" operands: r6 (k: 4 t: 4), t38 (k: 5 t: 4)
	mov4 r6, r67 ;
.BB14:
	# emit "<" operands:  (k: 135063840 t: -32), r6 (k: 4 t: 4), 500 (k: 3 t: 4)
	mov4 r68, r6 ;
	sub4 r68, 500 ;
	# xor
	mov4 r69, r6 ;
	mov4 r71, r6 ;
	or4 r69, 500 ;
	and4 r71, 500 ;
	sub4 r69, r71 ;
	# xor
	mov4 r70, r68 ;
	mov4 r72, r68 ;
	or4 r70, r6 ;
	and4 r72, r6 ;
	sub4 r70, r72 ;
	and4 r69, r70 ;
	# xor
	mov4 r70, r68 ;
	mov4 r73, r68 ;
	or4 r70, r69 ;
	and4 r73, r69 ;
	sub4 r70, r73 ;
	sr4 r70, 31 ;
	if4 (r70) goto .BB12 ;
	# emit "&" operands: t39 (k: 5 t: 14), testsply.istr7 (k: 7 t: 18)
	call r74, testsply.istr7, () ;
	# emit "call", prints (k: 9 t: 19)
	call r75, prints, (r74) ;
	# emit "call" operands: r3 (k: 4 t: 14), FindMin (k: 9 t: 19)
	call r3, FindMin, (r3, r4, r5) ;
	# emit "call" operands: t42 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r76, Retrieve, (r3) ;
	# emit "call", print32 (k: 9 t: 19)
	call r77, print32, (r76) ;
	# emit "&" operands: t44 (k: 5 t: 14), testsply.istr8 (k: 7 t: 18)
	call r78, testsply.istr8, () ;
	# emit "call", prints (k: 9 t: 19)
	call r79, prints, (r78) ;
	# emit "&" operands: t46 (k: 5 t: 14), testsply.istr9 (k: 7 t: 18)
	call r80, testsply.istr9, () ;
	# emit "call", prints (k: 9 t: 19)
	call r81, prints, (r80) ;
	# emit "call" operands: r3 (k: 4 t: 14), FindMax (k: 9 t: 19)
	call r3, FindMax, (r3, r4, r5) ;
	# emit "call" operands: t49 (k: 5 t: 4), Retrieve (k: 9 t: 19)
	call r82, Retrieve, (r3) ;
	# emit "call", print32 (k: 9 t: 19)
	call r83, print32, (r82) ;
	# emit "&" operands: t51 (k: 5 t: 14), testsply.istr10 (k: 7 t: 18)
	call r84, testsply.istr10, () ;
	# emit "call", prints (k: 9 t: 19)
	call r85, prints, (r84) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r79, r80, r81, r82, r83, r84, r85)>

