# Code auto-generated by MinxCC

mergesort.istr0 {
	mov4 r1, 9 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 76 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 103 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 104 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 58 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

mergesort.istr1 {
	mov4 r1, 10 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 44 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 82 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 103 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 58 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

mergesort.istr2 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

mergesort.istr3 {
	mov4 r1, 6 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 73 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 58 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

mergesort.istr4 {
	mov4 r1, 35 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 78 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 103 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 103 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 104 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 62 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 50 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 48 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 48 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

mergesort.istr5 {
	mov4 r1, 6 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 58 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

mergesort.istr6 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

mergesort.istr7 {
	mov4 r1, 9 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 40 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

mergesort.istr8 {
	mov4 r1, 3 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 41 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




main {
	# emit "=" operands: r4 (k: 4 t: 4), 30 (k: 3 t: 4)
	mov4 r4, 30 ;
	# emit "=" operands: r5 (k: 4 t: 4), 1000 (k: 3 t: 4)
	mov4 r5, 1000 ;
	# emit "<=" operands:  (k: 151738512 t: 8), r1 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r6, 1 ;
	sub4 r6, r1 ;
	# ~x
	mul4 r6, -1 ;
	add4 r6, -1 ;
	# xor
	mov4 r7, r1 ;
	mov4 r8, r1 ;
	or4 r7, 1 ;
	and4 r8, 1 ;
	sub4 r7, r8 ;
	or4 r7, r6 ;
	# ~x
	mov4 r6, 1 ;
	mul4 r6, -1 ;
	add4 r6, -1 ;
	or4 r6, r1 ;
	and4 r6, r7 ;
	sr4 r6, 31 ;
	if4 (r6) goto .BB0 ;
	# emit "+" operands: t0 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r9, [r2 + 4] ;
	# emit "call" operands: r4 (k: 4 t: 4), atoi (k: 9 t: 19)
	call r4, atoi, (r9) ;
.BB0:
	# emit "<=" operands:  (k: 151739400 t: -64), r1 (k: 4 t: 4), 2 (k: 3 t: 4)
	mov4 r10, 2 ;
	sub4 r10, r1 ;
	# ~x
	mul4 r10, -1 ;
	add4 r10, -1 ;
	# xor
	mov4 r11, r1 ;
	mov4 r12, r1 ;
	or4 r11, 2 ;
	and4 r12, 2 ;
	sub4 r11, r12 ;
	or4 r11, r10 ;
	# ~x
	mov4 r10, 2 ;
	mul4 r10, -1 ;
	add4 r10, -1 ;
	or4 r10, r1 ;
	and4 r10, r11 ;
	sr4 r10, 31 ;
	if4 (r10) goto .BB1 ;
	# emit "+" operands: t3 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t4 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 r13, [r2 + 8] ;
	# emit "call" operands: r5 (k: 4 t: 4), atoi (k: 9 t: 19)
	call r5, atoi, (r13) ;
.BB1:
	# emit "&" operands: t6 (k: 5 t: 14), mergesort.istr0 (k: 7 t: 18)
	call r14, mergesort.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r15, prints, (r14) ;
	# emit "call", print32 (k: 9 t: 19)
	call r16, print32, (r4) ;
	# emit "&" operands: t9 (k: 5 t: 14), mergesort.istr1 (k: 7 t: 18)
	call r17, mergesort.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r18, prints, (r17) ;
	# emit "call", print32 (k: 9 t: 19)
	call r19, print32, (r5) ;
	# emit "&" operands: t12 (k: 5 t: 14), mergesort.istr2 (k: 7 t: 18)
	call r20, mergesort.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r21, prints, (r20) ;
	# emit "call" operands: r3 (k: 4 t: 14), buildlist (k: 9 t: 19)
	call r3, buildlist, (r4, r5) ;
	# emit ">" operands:  (k: 151741632 t: 120), r4 (k: 4 t: 4), 200 (k: 3 t: 4)
	mov4 r22, 200 ;
	sub4 r22, r4 ;
	# xor
	mov4 r23, 200 ;
	mov4 r25, 200 ;
	or4 r23, r4 ;
	and4 r25, r4 ;
	sub4 r23, r25 ;
	# xor
	mov4 r24, r22 ;
	mov4 r26, r22 ;
	or4 r24, 200 ;
	and4 r26, 200 ;
	sub4 r24, r26 ;
	and4 r23, r24 ;
	# xor
	mov4 r24, r22 ;
	mov4 r27, r22 ;
	or4 r24, r23 ;
	and4 r27, r23 ;
	sub4 r24, r27 ;
	sr4 r24, 31 ;
	if4 (r24) goto .BB2 ;
	# emit "&" operands: t15 (k: 5 t: 14), mergesort.istr3 (k: 7 t: 18)
	call r28, mergesort.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r29, prints, (r28) ;
	# emit "call", printlist (k: 9 t: 19)
	call r30, printlist, (r3) ;
	# emit "jmp" operands:  (k: 151741704 t: -80)
	goto .BB3
.BB2:
	# emit "&" operands: t17 (k: 5 t: 14), mergesort.istr4 (k: 7 t: 18)
	call r31, mergesort.istr4, () ;
	# emit "call", prints (k: 9 t: 19)
	call r32, prints, (r31) ;
.BB3:
	# emit "call" operands: r3 (k: 4 t: 14), mergeSort (k: 9 t: 19)
	call r3, mergeSort, (r3) ;
	# emit ">", r4 (k: 4 t: 4), 200 (k: 3 t: 4)
	mov4 r33, 200 ;
	sub4 r33, r4 ;
	# xor
	mov4 r34, 200 ;
	mov4 r36, 200 ;
	or4 r34, r4 ;
	and4 r36, r4 ;
	sub4 r34, r36 ;
	# xor
	mov4 r35, r33 ;
	mov4 r37, r33 ;
	or4 r35, 200 ;
	and4 r37, 200 ;
	sub4 r35, r37 ;
	and4 r34, r35 ;
	# xor
	mov4 r35, r33 ;
	mov4 r38, r33 ;
	or4 r35, r34 ;
	and4 r38, r34 ;
	sub4 r35, r38 ;
	sr4 r35, 31 ;
	if4 (r35) goto .BB4 ;
	# emit "&" operands: t20 (k: 5 t: 14), mergesort.istr5 (k: 7 t: 18)
	call r39, mergesort.istr5, () ;
	# emit "call", prints (k: 9 t: 19)
	call r40, prints, (r39) ;
	# emit "call", printlist (k: 9 t: 19)
	call r41, printlist, (r3) ;
.BB4:
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41)>

mergeSort {
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r3, [r1 + 4] ;
	# emit "!=" operands:  (k: 151744176 t: 32), t1 (k: 5 t: 14), 0 (k: 3 t: 14)
	if4 (r3) goto .BB5 ;
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	# emit "jmp"
	goto .BB6
.BB5:
	# emit "call" operands: r2 (k: 4 t: 14), split (k: 9 t: 19)
	call r2, split, (r1) ;
	# emit "call" operands: t3 (k: 5 t: 14), mergeSort (k: 9 t: 19)
	call r4, mergeSort, (r1) ;
	# emit "call" operands: t4 (k: 5 t: 14), mergeSort (k: 9 t: 19)
	call r5, mergeSort, (r2) ;
	# emit "call" operands: t5 (k: 5 t: 14), merge (k: 9 t: 19)
	call r6, merge, (r4, r5) ;
	# emit "ret" operands: t5 (k: 5 t: 14)
	mov4 r0, r6 ;
.BB6:
	ret
} <(r1), r0, (r2, r3, r4, r5, r6)>

merge {
	# emit "!=" operands:  (k: 151746296 t: -72), r1 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r1) goto .BB7 ;
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	# emit "jmp"
	goto .BB10
.BB7:
	# emit "!=" operands:  (k: 151746776 t: -104), r2 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r2) goto .BB8 ;
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	# emit "jmp"
	goto .BB10
.BB8:
	# emit "*" operands: t0 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r3, [r1] ;
	# emit "*" operands: t1 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r4, [r2] ;
	# emit "<=" operands:  (k: 151747728 t: 72), t0 (k: 5 t: 4), t1 (k: 5 t: 4)
	mov4 r5, r4 ;
	sub4 r5, r3 ;
	# ~x
	mul4 r5, -1 ;
	add4 r5, -1 ;
	# xor
	mov4 r6, r3 ;
	mov4 r7, r3 ;
	or4 r6, r4 ;
	and4 r7, r4 ;
	sub4 r6, r7 ;
	or4 r6, r5 ;
	# ~x
	mov4 r5, r4 ;
	mul4 r5, -1 ;
	add4 r5, -1 ;
	or4 r5, r3 ;
	and4 r5, r6 ;
	sr4 r5, 31 ;
	if4 (r5) goto .BB9 ;
	# emit "call" operands: t2 (k: 5 t: 14), merge (k: 9 t: 19)
	call r8, merge, (r2, r1) ;
	# emit "ret" operands: t2 (k: 5 t: 14)
	mov4 r0, r8 ;
	# emit "jmp"
	goto .BB10
.BB9:
	# emit "+" operands: t3 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t5 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 r9, [r1 + 4] ;
	# emit "call" operands: t6 (k: 5 t: 14), merge (k: 9 t: 19)
	call r10, merge, (r9, r2) ;
	# emit "*=" operands: t3 (k: 5 t: 14), t6 (k: 5 t: 14)
	mov4 [r1 + 4], r10 ;
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
.BB10:
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10)>

split {
	# emit "==" operands:  (k: 151749400 t: 64), r1 (k: 4 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r1) goto .BB18 ;
	mov4 r3, 1 ;
	goto .BB19
.BB18:
	mov4 r3, 0 ;
.BB19:
	if4 (r3) goto .BB11 ;
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r4, [r1 + 4] ;
	# emit "!=" operands:  (k: 151749328 t: 64), t1 (k: 5 t: 14), 0 (k: 3 t: 14)
	if4 (r4) goto .BB12 ;
.BB11:
	# emit "ret" operands: 0 (k: 3 t: 14)
	mov4 r0, 0 ;
	# emit "jmp"
	goto .BB13
.BB12:
	# emit "+" operands: t2 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t3 (k: 5 t: 14), t2 (k: 5 t: 14)
	mov4 r5, [r1 + 4] ;
	# emit "=" operands: r2 (k: 4 t: 14), t3 (k: 5 t: 14)
	mov4 r2, r5 ;
	# emit "+" operands: t5 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t6 (k: 5 t: 14), t5 (k: 5 t: 14)
	mov4 r6, [r2 + 4] ;
	# emit "*=" operands: t2 (k: 5 t: 14), t6 (k: 5 t: 14)
	mov4 [r1 + 4], r6 ;
	# emit "*" operands: t9 (k: 5 t: 14), t2 (k: 5 t: 14)
	mov4 r7, [r1 + 4] ;
	# emit "call" operands: t10 (k: 5 t: 14), split (k: 9 t: 19)
	call r8, split, (r7) ;
	# emit "*=" operands: t5 (k: 5 t: 14), t10 (k: 5 t: 14)
	mov4 [r2 + 4], r8 ;
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
.BB13:
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8)>

buildlist {
	# emit "!" operands:  (k: 151756232 t: 56), r1 (k: 4 t: 4)
	if4 (r1) goto .BB14 ;
	# emit "ret" operands: 0 (k: 3 t: 14)
	mov4 r0, 0 ;
	# emit "jmp"
	goto .BB15
.BB14:
	# emit "call" operands: r3 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r3, 8 ;
	# emit "*" operands: t2 (k: 5 t: 4), 20 (k: 3 t: 4), r1 (k: 4 t: 4)
	mov4 r4, 20 ;
	mov4 r5, r4 ;
	mul4 r5, r1 ;
	# emit "+" operands: t3 (k: 5 t: 4), t2 (k: 5 t: 4), -3 (k: 3 t: 4)
	mov4 r6, r5 ;
	add4 r6, -3 ;
	# emit "%" operands: t4 (k: 5 t: 4), t3 (k: 5 t: 4), 56 (k: 3 t: 4)
	mov4 r8, r6 ;
	div4 r8, 56 ;
	mul4 r8, 56 ;
	mov4 r7, r6 ;
	sub4 r7, r8 ;
	# emit "*=" operands: r3 (k: 4 t: 14), t4 (k: 5 t: 4)
	mov4 [r3], r7 ;
	# emit "+" operands: t6 (k: 5 t: 14), r3 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "+" operands: t8 (k: 5 t: 4), r1 (k: 4 t: 4), -1 (k: 3 t: 4)
	mov4 r9, r1 ;
	add4 r9, -1 ;
	# emit "call" operands: t9 (k: 5 t: 14), buildlist (k: 9 t: 19)
	call r10, buildlist, (r9, r2) ;
	# emit "*=" operands: t6 (k: 5 t: 14), t9 (k: 5 t: 14)
	mov4 [r3 + 4], r10 ;
	# emit "ret" operands: r3 (k: 4 t: 14)
	mov4 r0, r3 ;
.BB15:
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10)>

printlist {
	# emit "=" operands: r2 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r2, 0 ;
	# emit "=" operands: r3 (k: 4 t: 14), r1 (k: 4 t: 14)
	mov4 r3, r1 ;
	# emit "jmp" operands:  (k: 151758936 t: -24)
	goto .BB17
.BB16:
	# emit "*" operands: t0 (k: 5 t: 4), r3 (k: 4 t: 14)
	mov4 r4, [r3] ;
	# emit "call", print32 (k: 9 t: 19)
	call r5, print32, (r4) ;
	# emit "&" operands: t2 (k: 5 t: 14), mergesort.istr6 (k: 7 t: 18)
	call r6, mergesort.istr6, () ;
	# emit "call", prints (k: 9 t: 19)
	call r7, prints, (r6) ;
	# emit "+" operands: t4 (k: 5 t: 14), r3 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t5 (k: 5 t: 14), t4 (k: 5 t: 14)
	mov4 r8, [r3 + 4] ;
	# emit "=" operands: r3 (k: 4 t: 14), t5 (k: 5 t: 14)
	mov4 r3, r8 ;
	# emit "++" operands: r2 (k: 4 t: 4)
	add4 r2, 1 ;
.BB17:
	# emit "!=" operands:  (k: 151758728 t: -96), r3 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r3) goto .BB16 ;
	# emit "&" operands: t8 (k: 5 t: 14), mergesort.istr7 (k: 7 t: 18)
	call r9, mergesort.istr7, () ;
	# emit "call", prints (k: 9 t: 19)
	call r10, prints, (r9) ;
	# emit "call", print32 (k: 9 t: 19)
	call r11, print32, (r2) ;
	# emit "&" operands: t11 (k: 5 t: 14), mergesort.istr8 (k: 7 t: 18)
	call r12, mergesort.istr8, () ;
	# emit "call", prints (k: 9 t: 19)
	call r13, prints, (r12) ;
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13)>

