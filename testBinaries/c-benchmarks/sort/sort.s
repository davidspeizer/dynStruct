# Code auto-generated by MinxCC

sort.istr0 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 91 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

sort.istr1 {
	mov4 r1, 3 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 44 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

sort.istr2 {
	mov4 r1, 3 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 93 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

sort.istr3 {
	mov4 r1, 26 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 78 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

sort.istr4 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

sort.istr5 {
	mov4 r1, 13 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 83 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 58 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

sort.istr6 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

sort.istr7 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

sort.istr8 {
	mov4 r1, 17 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 67 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 104 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 107 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 100 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

sort.istr9 {
	mov4 r1, 15 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 83 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 58 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

sort.istr10 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

sort.istr11 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

sort.istr12 {
	mov4 r1, 14 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 83 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 119 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 107 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




PrintList {
	# emit "=" operands: r3 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r3, 0 ;
	# emit "&" operands: t0 (k: 5 t: 14), sort.istr0 (k: 7 t: 18)
	call r4, sort.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r5, prints, (r4) ;
	# emit "jmp" operands:  (k: 147684776 t: -128)
	goto .BB1
.BB0:
	# emit "<<" operands: t2 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t3 (k: 5 t: 14), r1 (k: 4 t: 14), t2 (k: 5 t: 4)
	mov4 r6, r1 ;
	add4 r6, r3 * 4 ;
	# emit "*" operands: t4 (k: 5 t: 4), t3 (k: 5 t: 14)
	mov4 r7, [r6] ;
	# emit "call", print32 (k: 9 t: 19)
	call r8, print32, (r7) ;
	# emit "&" operands: t6 (k: 5 t: 14), sort.istr1 (k: 7 t: 18)
	call r9, sort.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r10, prints, (r9) ;
	# emit "++" operands: r3 (k: 4 t: 4)
	add4 r3, 1 ;
.BB1:
	# emit "<" operands:  (k: 147684248 t: 56), r3 (k: 4 t: 4), r2 (k: 4 t: 4)
	mov4 r11, r3 ;
	sub4 r11, r2 ;
	# xor
	mov4 r12, r3 ;
	mov4 r14, r3 ;
	or4 r12, r2 ;
	and4 r14, r2 ;
	sub4 r12, r14 ;
	# xor
	mov4 r13, r11 ;
	mov4 r15, r11 ;
	or4 r13, r3 ;
	and4 r15, r3 ;
	sub4 r13, r15 ;
	and4 r12, r13 ;
	# xor
	mov4 r13, r11 ;
	mov4 r16, r11 ;
	or4 r13, r12 ;
	and4 r16, r12 ;
	sub4 r13, r16 ;
	sr4 r13, 31 ;
	if4 (r13) goto .BB0 ;
	# emit "<<" operands: t10 (k: 5 t: 4), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t11 (k: 5 t: 14), r1 (k: 4 t: 14), t10 (k: 5 t: 4)
	mov4 r17, r1 ;
	add4 r17, r2 * 4 ;
	# emit "*" operands: t12 (k: 5 t: 4), t11 (k: 5 t: 14)
	mov4 r18, [r17] ;
	# emit "call", print32 (k: 9 t: 19)
	call r19, print32, (r18) ;
	# emit "&" operands: t14 (k: 5 t: 14), sort.istr2 (k: 7 t: 18)
	call r20, sort.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r21, prints, (r20) ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21)>

Swap {
	# emit "*" operands: t0 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r4, [r1] ;
	# emit "=" operands: r3 (k: 4 t: 4), t0 (k: 5 t: 4)
	mov4 r3, r4 ;
	# emit "*" operands: t2 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r5, [r2] ;
	# emit "*=" operands: r1 (k: 4 t: 14), t2 (k: 5 t: 4)
	mov4 [r1], r5 ;
	# emit "*=" operands: r2 (k: 4 t: 14), r3 (k: 4 t: 4)
	mov4 [r2], r3 ;
	ret
} <(r1, r2), r0, (r3, r4, r5)>

InsertionSort {
	# emit "=" operands: r4 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r4, 1 ;
	# emit "jmp"
	goto .BB6
.BB2:
	# emit "<<" operands: t0 (k: 5 t: 4), r4 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t1 (k: 5 t: 14), r1 (k: 4 t: 14), t0 (k: 5 t: 4)
	mov4 r6, r1 ;
	add4 r6, r4 * 4 ;
	# emit "*" operands: t2 (k: 5 t: 4), t1 (k: 5 t: 14)
	mov4 r7, [r6] ;
	# emit "=" operands: r5 (k: 4 t: 4), t2 (k: 5 t: 4)
	mov4 r5, r7 ;
	# emit "=" operands: r3 (k: 4 t: 4), r4 (k: 4 t: 4)
	mov4 r3, r4 ;
	# emit "jmp" operands:  (k: 147693800 t: 24)
	goto .BB4
.BB3:
	# emit "<<" operands: t3 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t4 (k: 5 t: 14), r1 (k: 4 t: 14), t3 (k: 5 t: 4)
	mov4 r8, r1 ;
	add4 r8, r3 * 4 ;
	# emit "+" operands: t6 (k: 5 t: 4), r3 (k: 4 t: 4), -1 (k: 3 t: 4)
	mov4 r9, r3 ;
	add4 r9, -1 ;
	# emit "<<" operands: t7 (k: 5 t: 4), t6 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t8 (k: 5 t: 14), r1 (k: 4 t: 14), t7 (k: 5 t: 4)
	mov4 r10, r1 ;
	add4 r10, r9 * 4 ;
	# emit "*" operands: t9 (k: 5 t: 4), t8 (k: 5 t: 14)
	mov4 r11, [r10] ;
	# emit "*=" operands: t4 (k: 5 t: 14), t9 (k: 5 t: 4)
	mov4 [r8], r11 ;
	# emit "+" operands: t12 (k: 5 t: 4), r3 (k: 4 t: 4), -1 (k: 3 t: 4)
	mov4 r12, r3 ;
	add4 r12, -1 ;
	# emit "=" operands: r3 (k: 4 t: 4), t12 (k: 5 t: 4)
	mov4 r3, r12 ;
.BB4:
	# emit "<=" operands:  (k: 147695640 t: 48), r3 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r13, 0 ;
	sub4 r13, r3 ;
	# ~x
	mul4 r13, -1 ;
	add4 r13, -1 ;
	# xor
	mov4 r14, r3 ;
	mov4 r15, r3 ;
	or4 r14, 0 ;
	and4 r15, 0 ;
	sub4 r14, r15 ;
	or4 r14, r13 ;
	# ~x
	mov4 r13, 0 ;
	mul4 r13, -1 ;
	add4 r13, -1 ;
	or4 r13, r3 ;
	and4 r13, r14 ;
	sr4 r13, 31 ;
	if4 (r13) goto .BB5 ;
	# emit "+" operands: t13 (k: 5 t: 4), r3 (k: 4 t: 4), -1 (k: 3 t: 4)
	mov4 r16, r3 ;
	add4 r16, -1 ;
	# emit "<<" operands: t14 (k: 5 t: 4), t13 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t15 (k: 5 t: 14), r1 (k: 4 t: 14), t14 (k: 5 t: 4)
	mov4 r17, r1 ;
	add4 r17, r16 * 4 ;
	# emit "*" operands: t16 (k: 5 t: 4), t15 (k: 5 t: 14)
	mov4 r18, [r17] ;
	# emit ">" operands:  (k: 147692960 t: 120), t16 (k: 5 t: 4), r5 (k: 4 t: 4)
	mov4 r19, r5 ;
	sub4 r19, r18 ;
	# xor
	mov4 r20, r5 ;
	mov4 r22, r5 ;
	or4 r20, r18 ;
	and4 r22, r18 ;
	sub4 r20, r22 ;
	# xor
	mov4 r21, r19 ;
	mov4 r23, r19 ;
	or4 r21, r5 ;
	and4 r23, r5 ;
	sub4 r21, r23 ;
	and4 r20, r21 ;
	# xor
	mov4 r21, r19 ;
	mov4 r24, r19 ;
	or4 r21, r20 ;
	and4 r24, r20 ;
	sub4 r21, r24 ;
	sr4 r21, 31 ;
	if4 (r21) goto .BB3 ;
.BB5:
	# emit "<<" operands: t17 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t18 (k: 5 t: 14), r1 (k: 4 t: 14), t17 (k: 5 t: 4)
	mov4 r25, r1 ;
	add4 r25, r3 * 4 ;
	# emit "*=" operands: t18 (k: 5 t: 14), r5 (k: 4 t: 4)
	mov4 [r25], r5 ;
	# emit "++" operands: r4 (k: 4 t: 4)
	add4 r4, 1 ;
.BB6:
	# emit "<" operands:  (k: 147692816 t: 120), r4 (k: 4 t: 4), r2 (k: 4 t: 4)
	mov4 r26, r4 ;
	sub4 r26, r2 ;
	# xor
	mov4 r27, r4 ;
	mov4 r29, r4 ;
	or4 r27, r2 ;
	and4 r29, r2 ;
	sub4 r27, r29 ;
	# xor
	mov4 r28, r26 ;
	mov4 r30, r26 ;
	or4 r28, r4 ;
	and4 r30, r4 ;
	sub4 r28, r30 ;
	and4 r27, r28 ;
	# xor
	mov4 r28, r26 ;
	mov4 r31, r26 ;
	or4 r28, r27 ;
	and4 r31, r27 ;
	sub4 r28, r31 ;
	sr4 r28, 31 ;
	if4 (r28) goto .BB2 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31)>

Shellsort {
	# emit ">>" operands: t0 (k: 5 t: 4), r2 (k: 4 t: 4), 1 (k: 3 t: 4)
	# signed >>
	mov4 r8, r2 ;
	mov4 r7, -2147483648 ;
	add4 r8, -2147483648 ;
	sr4 r8, 1 ;
	sr4 r7, 1 ;
	sub4 r8, r7 ;
	# emit "=" operands: r5 (k: 4 t: 4), t0 (k: 5 t: 4)
	mov4 r5, r8 ;
	# emit "jmp"
	goto .BB14
.BB7:
	# emit "=" operands: r3 (k: 4 t: 4), r5 (k: 4 t: 4)
	mov4 r3, r5 ;
	# emit "jmp" operands:  (k: 147699368 t: -56)
	goto .BB13
.BB8:
	# emit "<<" operands: t1 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t2 (k: 5 t: 14), r1 (k: 4 t: 14), t1 (k: 5 t: 4)
	mov4 r9, r1 ;
	add4 r9, r3 * 4 ;
	# emit "*" operands: t3 (k: 5 t: 4), t2 (k: 5 t: 14)
	mov4 r10, [r9] ;
	# emit "=" operands: r6 (k: 4 t: 4), t3 (k: 5 t: 4)
	mov4 r6, r10 ;
	# emit "=" operands: r4 (k: 4 t: 4), r3 (k: 4 t: 4)
	mov4 r4, r3 ;
	# emit "jmp" operands:  (k: 147699520 t: -88)
	goto .BB11
.BB9:
	# emit "-" operands: t4 (k: 5 t: 4), r4 (k: 4 t: 4), r5 (k: 4 t: 4)
	mov4 r11, r4 ;
	sub4 r11, r5 ;
	# emit "<<" operands: t5 (k: 5 t: 4), t4 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t6 (k: 5 t: 14), r1 (k: 4 t: 14), t5 (k: 5 t: 4)
	mov4 r12, r1 ;
	add4 r12, r11 * 4 ;
	# emit "*" operands: t7 (k: 5 t: 4), t6 (k: 5 t: 14)
	mov4 r13, [r12] ;
	# emit ">=" operands:  (k: 147699296 t: 64), r6 (k: 4 t: 4), t7 (k: 5 t: 4)
	mov4 r14, r6 ;
	sub4 r14, r13 ;
	# ~x
	mul4 r14, -1 ;
	add4 r14, -1 ;
	# xor
	mov4 r15, r13 ;
	mov4 r16, r13 ;
	or4 r15, r6 ;
	and4 r16, r6 ;
	sub4 r15, r16 ;
	or4 r15, r14 ;
	# ~x
	mov4 r14, r6 ;
	mul4 r14, -1 ;
	add4 r14, -1 ;
	or4 r14, r13 ;
	and4 r14, r15 ;
	sr4 r14, 31 ;
	if4 (r14) goto .BB12 ;
	# emit "<<" operands: t8 (k: 5 t: 4), r4 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t9 (k: 5 t: 14), r1 (k: 4 t: 14), t8 (k: 5 t: 4)
	mov4 r17, r1 ;
	add4 r17, r4 * 4 ;
	# emit "-" operands: t11 (k: 5 t: 4), r4 (k: 4 t: 4), r5 (k: 4 t: 4)
	mov4 r18, r4 ;
	sub4 r18, r5 ;
	# emit "<<" operands: t12 (k: 5 t: 4), t11 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t13 (k: 5 t: 14), r1 (k: 4 t: 14), t12 (k: 5 t: 4)
	mov4 r19, r1 ;
	add4 r19, r18 * 4 ;
	# emit "*" operands: t14 (k: 5 t: 4), t13 (k: 5 t: 14)
	mov4 r20, [r19] ;
	# emit "*=" operands: t9 (k: 5 t: 14), t14 (k: 5 t: 4)
	mov4 [r17], r20 ;
	# emit "jmp" operands:  (k: 147699664 t: 96)
	goto .BB10
.BB10:
	# emit "-" operands: t16 (k: 5 t: 4), r4 (k: 4 t: 4), r5 (k: 4 t: 4)
	mov4 r21, r4 ;
	sub4 r21, r5 ;
	# emit "=" operands: r4 (k: 4 t: 4), t16 (k: 5 t: 4)
	mov4 r4, r21 ;
.BB11:
	# emit ">=" operands:  (k: 147698352 t: -120), r4 (k: 4 t: 4), r5 (k: 4 t: 4)
	mov4 r22, r4 ;
	sub4 r22, r5 ;
	# ~x
	mul4 r22, -1 ;
	add4 r22, -1 ;
	# xor
	mov4 r23, r5 ;
	mov4 r24, r5 ;
	or4 r23, r4 ;
	and4 r24, r4 ;
	sub4 r23, r24 ;
	or4 r23, r22 ;
	# ~x
	mov4 r22, r4 ;
	mul4 r22, -1 ;
	add4 r22, -1 ;
	or4 r22, r5 ;
	and4 r22, r23 ;
	sr4 r22, 31 ;
	if4 (r22) goto .BB9 ;
.BB12:
	# emit "<<" operands: t17 (k: 5 t: 4), r4 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t18 (k: 5 t: 14), r1 (k: 4 t: 14), t17 (k: 5 t: 4)
	mov4 r25, r1 ;
	add4 r25, r4 * 4 ;
	# emit "*=" operands: t18 (k: 5 t: 14), r6 (k: 4 t: 4)
	mov4 [r25], r6 ;
	# emit "++" operands: r3 (k: 4 t: 4)
	add4 r3, 1 ;
.BB13:
	# emit "<" operands:  (k: 147697792 t: 96), r3 (k: 4 t: 4), r2 (k: 4 t: 4)
	mov4 r26, r3 ;
	sub4 r26, r2 ;
	# xor
	mov4 r27, r3 ;
	mov4 r29, r3 ;
	or4 r27, r2 ;
	and4 r29, r2 ;
	sub4 r27, r29 ;
	# xor
	mov4 r28, r26 ;
	mov4 r30, r26 ;
	or4 r28, r3 ;
	and4 r30, r3 ;
	sub4 r28, r30 ;
	and4 r27, r28 ;
	# xor
	mov4 r28, r26 ;
	mov4 r31, r26 ;
	or4 r28, r27 ;
	and4 r31, r27 ;
	sub4 r28, r31 ;
	sr4 r28, 31 ;
	if4 (r28) goto .BB8 ;
	# emit ">>" operands: t23 (k: 5 t: 4), r5 (k: 4 t: 4), 1 (k: 3 t: 4)
	# signed >>
	mov4 r33, r5 ;
	mov4 r32, -2147483648 ;
	add4 r33, -2147483648 ;
	sr4 r33, 1 ;
	sr4 r32, 1 ;
	sub4 r33, r32 ;
	# emit "=" operands: r5 (k: 4 t: 4), t23 (k: 5 t: 4)
	mov4 r5, r33 ;
.BB14:
	# emit ">" operands:  (k: 147697648 t: 64), r5 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r34, 0 ;
	sub4 r34, r5 ;
	# xor
	mov4 r35, 0 ;
	mov4 r37, 0 ;
	or4 r35, r5 ;
	and4 r37, r5 ;
	sub4 r35, r37 ;
	# xor
	mov4 r36, r34 ;
	mov4 r38, r34 ;
	or4 r36, 0 ;
	and4 r38, 0 ;
	sub4 r36, r38 ;
	and4 r35, r36 ;
	# xor
	mov4 r36, r34 ;
	mov4 r39, r34 ;
	or4 r36, r35 ;
	and4 r39, r35 ;
	sub4 r36, r39 ;
	sr4 r36, 31 ;
	if4 (r36) goto .BB7 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39)>

PercDown {
	# emit "<<" operands: t0 (k: 5 t: 4), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t1 (k: 5 t: 14), r1 (k: 4 t: 14), t0 (k: 5 t: 4)
	mov4 r6, r1 ;
	add4 r6, r2 * 4 ;
	# emit "*" operands: t2 (k: 5 t: 4), t1 (k: 5 t: 14)
	mov4 r7, [r6] ;
	# emit "=" operands: r5 (k: 4 t: 4), t2 (k: 5 t: 4)
	mov4 r5, r7 ;
	# emit "jmp" operands:  (k: 147706616 t: -56)
	goto .BB18
.BB15:
	# emit "*" operands: t3 (k: 5 t: 4), 2 (k: 3 t: 4), r2 (k: 4 t: 4)
	mov4 r8, 2 ;
	mov4 r9, r8 ;
	mul4 r9, r2 ;
	# emit "+" operands: t4 (k: 5 t: 4), t3 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r10, r9 ;
	add4 r10, 1 ;
	# emit "=" operands: r4 (k: 4 t: 4), t4 (k: 5 t: 4)
	mov4 r4, r10 ;
	# emit "+" operands: t5 (k: 5 t: 4), r3 (k: 4 t: 4), -1 (k: 3 t: 4)
	mov4 r11, r3 ;
	add4 r11, -1 ;
	# emit "==" operands:  (k: 147704928 t: 64), r4 (k: 4 t: 4), t5 (k: 5 t: 4)
	eq4 r12, r4, r11 ;
	if4 (r12) goto .BB16 ;
	# emit "+" operands: t6 (k: 5 t: 4), r4 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r13, r4 ;
	add4 r13, 1 ;
	# emit "<<" operands: t7 (k: 5 t: 4), t6 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t8 (k: 5 t: 14), r1 (k: 4 t: 14), t7 (k: 5 t: 4)
	mov4 r14, r1 ;
	add4 r14, r13 * 4 ;
	# emit "*" operands: t9 (k: 5 t: 4), t8 (k: 5 t: 14)
	mov4 r15, [r14] ;
	# emit "<<" operands: t10 (k: 5 t: 4), r4 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t11 (k: 5 t: 14), r1 (k: 4 t: 14), t10 (k: 5 t: 4)
	mov4 r16, r1 ;
	add4 r16, r4 * 4 ;
	# emit "*" operands: t12 (k: 5 t: 4), t11 (k: 5 t: 14)
	mov4 r17, [r16] ;
	# emit "<=" operands:  (k: 147704928 t: 64), t9 (k: 5 t: 4), t12 (k: 5 t: 4)
	mov4 r18, r17 ;
	sub4 r18, r15 ;
	# ~x
	mul4 r18, -1 ;
	add4 r18, -1 ;
	# xor
	mov4 r19, r15 ;
	mov4 r20, r15 ;
	or4 r19, r17 ;
	and4 r20, r17 ;
	sub4 r19, r20 ;
	or4 r19, r18 ;
	# ~x
	mov4 r18, r17 ;
	mul4 r18, -1 ;
	add4 r18, -1 ;
	or4 r18, r15 ;
	and4 r18, r19 ;
	sr4 r18, 31 ;
	if4 (r18) goto .BB16 ;
	# emit "++" operands: r4 (k: 4 t: 4)
	add4 r4, 1 ;
.BB16:
	# emit "<<" operands: t15 (k: 5 t: 4), r4 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t16 (k: 5 t: 14), r1 (k: 4 t: 14), t15 (k: 5 t: 4)
	mov4 r21, r1 ;
	add4 r21, r4 * 4 ;
	# emit "*" operands: t17 (k: 5 t: 4), t16 (k: 5 t: 14)
	mov4 r22, [r21] ;
	# emit ">=", r5 (k: 4 t: 4), t17 (k: 5 t: 4)
	mov4 r23, r5 ;
	sub4 r23, r22 ;
	# ~x
	mul4 r23, -1 ;
	add4 r23, -1 ;
	# xor
	mov4 r24, r22 ;
	mov4 r25, r22 ;
	or4 r24, r5 ;
	and4 r25, r5 ;
	sub4 r24, r25 ;
	or4 r24, r23 ;
	# ~x
	mov4 r23, r5 ;
	mul4 r23, -1 ;
	add4 r23, -1 ;
	or4 r23, r22 ;
	and4 r23, r24 ;
	sr4 r23, 31 ;
	if4 (r23) goto .BB19 ;
	# emit "<<" operands: t18 (k: 5 t: 4), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t19 (k: 5 t: 14), r1 (k: 4 t: 14), t18 (k: 5 t: 4)
	mov4 r26, r1 ;
	add4 r26, r2 * 4 ;
	# emit "<<" operands: t21 (k: 5 t: 4), r4 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t22 (k: 5 t: 14), r1 (k: 4 t: 14), t21 (k: 5 t: 4)
	mov4 r27, r1 ;
	add4 r27, r4 * 4 ;
	# emit "*" operands: t23 (k: 5 t: 4), t22 (k: 5 t: 14)
	mov4 r28, [r27] ;
	# emit "*=" operands: t19 (k: 5 t: 14), t23 (k: 5 t: 4)
	mov4 [r26], r28 ;
	# emit "jmp" operands:  (k: 147706760 t: -128)
	goto .BB17
.BB17:
	# emit "=" operands: r2 (k: 4 t: 4), r4 (k: 4 t: 4)
	mov4 r2, r4 ;
.BB18:
	# emit "*" operands: t25 (k: 5 t: 4), 2 (k: 3 t: 4), r2 (k: 4 t: 4)
	mov4 r29, 2 ;
	mov4 r30, r29 ;
	mul4 r30, r2 ;
	# emit "+" operands: t26 (k: 5 t: 4), t25 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r31, r30 ;
	add4 r31, 1 ;
	# emit "<" operands:  (k: 147703648 t: -88), t26 (k: 5 t: 4), r3 (k: 4 t: 4)
	mov4 r32, r31 ;
	sub4 r32, r3 ;
	# xor
	mov4 r33, r31 ;
	mov4 r35, r31 ;
	or4 r33, r3 ;
	and4 r35, r3 ;
	sub4 r33, r35 ;
	# xor
	mov4 r34, r32 ;
	mov4 r36, r32 ;
	or4 r34, r31 ;
	and4 r36, r31 ;
	sub4 r34, r36 ;
	and4 r33, r34 ;
	# xor
	mov4 r34, r32 ;
	mov4 r37, r32 ;
	or4 r34, r33 ;
	and4 r37, r33 ;
	sub4 r34, r37 ;
	sr4 r34, 31 ;
	if4 (r34) goto .BB15 ;
.BB19:
	# emit "<<" operands: t27 (k: 5 t: 4), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t28 (k: 5 t: 14), r1 (k: 4 t: 14), t27 (k: 5 t: 4)
	mov4 r38, r1 ;
	add4 r38, r2 * 4 ;
	# emit "*=" operands: t28 (k: 5 t: 14), r5 (k: 4 t: 4)
	mov4 [r38], r5 ;
	ret
} <(r1, r2, r3), r0, (r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38)>

Heapsort {
	# emit ">>" operands: t0 (k: 5 t: 4), r2 (k: 4 t: 4), 1 (k: 3 t: 4)
	# signed >>
	mov4 r5, r2 ;
	mov4 r4, -2147483648 ;
	add4 r5, -2147483648 ;
	sr4 r5, 1 ;
	sr4 r4, 1 ;
	sub4 r5, r4 ;
	# emit "=" operands: r3 (k: 4 t: 4), t0 (k: 5 t: 4)
	mov4 r3, r5 ;
	# emit "jmp" operands:  (k: 147709848 t: 112)
	goto .BB21
.BB20:
	# emit "call", PercDown (k: 9 t: 19)
	call r6, PercDown, (r1, r3, r2) ;
	# emit "+" operands: t2 (k: 5 t: 4), r3 (k: 4 t: 4), -1 (k: 3 t: 4)
	mov4 r7, r3 ;
	add4 r7, -1 ;
	# emit "=" operands: r3 (k: 4 t: 4), t2 (k: 5 t: 4)
	mov4 r3, r7 ;
.BB21:
	# emit ">=" operands:  (k: 147709704 t: 40), r3 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r8, r3 ;
	sub4 r8, 0 ;
	# ~x
	mul4 r8, -1 ;
	add4 r8, -1 ;
	# xor
	mov4 r9, 0 ;
	mov4 r10, 0 ;
	or4 r9, r3 ;
	and4 r10, r3 ;
	sub4 r9, r10 ;
	or4 r9, r8 ;
	# ~x
	mov4 r8, r3 ;
	mul4 r8, -1 ;
	add4 r8, -1 ;
	or4 r8, 0 ;
	and4 r8, r9 ;
	sr4 r8, 31 ;
	if4 (r8) goto .BB20 ;
	# emit "+" operands: t3 (k: 5 t: 4), r2 (k: 4 t: 4), -1 (k: 3 t: 4)
	mov4 r11, r2 ;
	add4 r11, -1 ;
	# emit "=" operands: r3 (k: 4 t: 4), t3 (k: 5 t: 4)
	mov4 r3, r11 ;
	# emit "jmp"
	goto .BB23
.BB22:
	# emit "<<" operands: t4 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t5 (k: 5 t: 14), r1 (k: 4 t: 14), t4 (k: 5 t: 4)
	mov4 r12, r1 ;
	add4 r12, r3 * 4 ;
	# emit "call", Swap (k: 9 t: 19)
	call r13, Swap, (r1, r12) ;
	# emit "call", PercDown (k: 9 t: 19)
	mov4 r15, 0 ;
	call r14, PercDown, (r1, r15, r3) ;
	# emit "+" operands: t7 (k: 5 t: 4), r3 (k: 4 t: 4), -1 (k: 3 t: 4)
	mov4 r16, r3 ;
	add4 r16, -1 ;
	# emit "=" operands: r3 (k: 4 t: 4), t7 (k: 5 t: 4)
	mov4 r3, r16 ;
.BB23:
	# emit ">" operands:  (k: 147710064 t: 72), r3 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r17, 0 ;
	sub4 r17, r3 ;
	# xor
	mov4 r18, 0 ;
	mov4 r20, 0 ;
	or4 r18, r3 ;
	and4 r20, r3 ;
	sub4 r18, r20 ;
	# xor
	mov4 r19, r17 ;
	mov4 r21, r17 ;
	or4 r19, 0 ;
	and4 r21, 0 ;
	sub4 r19, r21 ;
	and4 r18, r19 ;
	# xor
	mov4 r19, r17 ;
	mov4 r22, r17 ;
	or4 r19, r18 ;
	and4 r22, r18 ;
	sub4 r19, r22 ;
	sr4 r19, 31 ;
	if4 (r19) goto .BB22 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22)>

Merge {
	# emit "+" operands: t0 (k: 5 t: 4), r4 (k: 4 t: 4), -1 (k: 3 t: 4)
	mov4 r10, r4 ;
	add4 r10, -1 ;
	# emit "=" operands: r7 (k: 4 t: 4), t0 (k: 5 t: 4)
	mov4 r7, r10 ;
	# emit "=" operands: r9 (k: 4 t: 4), r3 (k: 4 t: 4)
	mov4 r9, r3 ;
	# emit "-" operands: t1 (k: 5 t: 4), r5 (k: 4 t: 4), r3 (k: 4 t: 4)
	mov4 r11, r5 ;
	sub4 r11, r3 ;
	# emit "+" operands: t2 (k: 5 t: 4), t1 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r12, r11 ;
	add4 r12, 1 ;
	# emit "=" operands: r8 (k: 4 t: 4), t2 (k: 5 t: 4)
	mov4 r8, r12 ;
	# emit "jmp" operands:  (k: 147713568 t: 112)
	goto .BB26
.BB24:
	# emit "<<" operands: t3 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t4 (k: 5 t: 14), r1 (k: 4 t: 14), t3 (k: 5 t: 4)
	mov4 r13, r1 ;
	add4 r13, r3 * 4 ;
	# emit "*" operands: t5 (k: 5 t: 4), t4 (k: 5 t: 14)
	mov4 r14, [r13] ;
	# emit "<<" operands: t6 (k: 5 t: 4), r4 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t7 (k: 5 t: 14), r1 (k: 4 t: 14), t6 (k: 5 t: 4)
	mov4 r15, r1 ;
	add4 r15, r4 * 4 ;
	# emit "*" operands: t8 (k: 5 t: 4), t7 (k: 5 t: 14)
	mov4 r16, [r15] ;
	# emit ">" operands:  (k: 147713496 t: -48), t5 (k: 5 t: 4), t8 (k: 5 t: 4)
	mov4 r17, r16 ;
	sub4 r17, r14 ;
	# xor
	mov4 r18, r16 ;
	mov4 r20, r16 ;
	or4 r18, r14 ;
	and4 r20, r14 ;
	sub4 r18, r20 ;
	# xor
	mov4 r19, r17 ;
	mov4 r21, r17 ;
	or4 r19, r16 ;
	and4 r21, r16 ;
	sub4 r19, r21 ;
	and4 r18, r19 ;
	# xor
	mov4 r19, r17 ;
	mov4 r22, r17 ;
	or4 r19, r18 ;
	and4 r22, r18 ;
	sub4 r19, r22 ;
	sr4 r19, 31 ;
	if4 (r19) goto .BB25 ;
	# emit "=" operands: t9 (k: 5 t: 4), r9 (k: 4 t: 4)
	mov4 r23, r9 ;
	# emit "++" operands: r9 (k: 4 t: 4)
	add4 r9, 1 ;
	# emit "<<" operands: t11 (k: 5 t: 4), t9 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t12 (k: 5 t: 14), r2 (k: 4 t: 14), t11 (k: 5 t: 4)
	mov4 r24, r2 ;
	add4 r24, r23 * 4 ;
	# emit "=" operands: t14 (k: 5 t: 4), r3 (k: 4 t: 4)
	mov4 r25, r3 ;
	# emit "++" operands: r3 (k: 4 t: 4)
	add4 r3, 1 ;
	# emit "<<" operands: t16 (k: 5 t: 4), t14 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t17 (k: 5 t: 14), r1 (k: 4 t: 14), t16 (k: 5 t: 4)
	mov4 r26, r1 ;
	add4 r26, r25 * 4 ;
	# emit "*" operands: t18 (k: 5 t: 4), t17 (k: 5 t: 14)
	mov4 r27, [r26] ;
	# emit "*=" operands: t12 (k: 5 t: 14), t18 (k: 5 t: 4)
	mov4 [r24], r27 ;
	# emit "jmp" operands:  (k: 147713568 t: 112)
	goto .BB26
.BB25:
	# emit "=" operands: t20 (k: 5 t: 4), r9 (k: 4 t: 4)
	mov4 r28, r9 ;
	# emit "++" operands: r9 (k: 4 t: 4)
	add4 r9, 1 ;
	# emit "<<" operands: t22 (k: 5 t: 4), t20 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t23 (k: 5 t: 14), r2 (k: 4 t: 14), t22 (k: 5 t: 4)
	mov4 r29, r2 ;
	add4 r29, r28 * 4 ;
	# emit "=" operands: t25 (k: 5 t: 4), r4 (k: 4 t: 4)
	mov4 r30, r4 ;
	# emit "++" operands: r4 (k: 4 t: 4)
	add4 r4, 1 ;
	# emit "<<" operands: t27 (k: 5 t: 4), t25 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t28 (k: 5 t: 14), r1 (k: 4 t: 14), t27 (k: 5 t: 4)
	mov4 r31, r1 ;
	add4 r31, r30 * 4 ;
	# emit "*" operands: t29 (k: 5 t: 4), t28 (k: 5 t: 14)
	mov4 r32, [r31] ;
	# emit "*=" operands: t23 (k: 5 t: 14), t29 (k: 5 t: 4)
	mov4 [r29], r32 ;
.BB26:
	# emit ">" operands:  (k: 147717944 t: -56), r3 (k: 4 t: 4), r7 (k: 4 t: 4)
	mov4 r33, r7 ;
	sub4 r33, r3 ;
	# xor
	mov4 r34, r7 ;
	mov4 r36, r7 ;
	or4 r34, r3 ;
	and4 r36, r3 ;
	sub4 r34, r36 ;
	# xor
	mov4 r35, r33 ;
	mov4 r37, r33 ;
	or4 r35, r7 ;
	and4 r37, r7 ;
	sub4 r35, r37 ;
	and4 r34, r35 ;
	# xor
	mov4 r35, r33 ;
	mov4 r38, r33 ;
	or4 r35, r34 ;
	and4 r38, r34 ;
	sub4 r35, r38 ;
	sr4 r35, 31 ;
	if4 (r35) goto .BB28 ;
	# emit "<=" operands:  (k: 147712512 t: -40), r4 (k: 4 t: 4), r5 (k: 4 t: 4)
	mov4 r39, r5 ;
	sub4 r39, r4 ;
	# ~x
	mul4 r39, -1 ;
	add4 r39, -1 ;
	# xor
	mov4 r40, r4 ;
	mov4 r41, r4 ;
	or4 r40, r5 ;
	and4 r41, r5 ;
	sub4 r40, r41 ;
	or4 r40, r39 ;
	# ~x
	mov4 r39, r5 ;
	mul4 r39, -1 ;
	add4 r39, -1 ;
	or4 r39, r4 ;
	and4 r39, r40 ;
	sr4 r39, 31 ;
	if4 (r39) goto .BB24 ;
	# emit "jmp" operands:  (k: 147717944 t: -56)
	goto .BB28
.BB27:
	# emit "=" operands: t31 (k: 5 t: 4), r9 (k: 4 t: 4)
	mov4 r42, r9 ;
	# emit "++" operands: r9 (k: 4 t: 4)
	add4 r9, 1 ;
	# emit "<<" operands: t33 (k: 5 t: 4), t31 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t34 (k: 5 t: 14), r2 (k: 4 t: 14), t33 (k: 5 t: 4)
	mov4 r43, r2 ;
	add4 r43, r42 * 4 ;
	# emit "=" operands: t36 (k: 5 t: 4), r3 (k: 4 t: 4)
	mov4 r44, r3 ;
	# emit "++" operands: r3 (k: 4 t: 4)
	add4 r3, 1 ;
	# emit "<<" operands: t38 (k: 5 t: 4), t36 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t39 (k: 5 t: 14), r1 (k: 4 t: 14), t38 (k: 5 t: 4)
	mov4 r45, r1 ;
	add4 r45, r44 * 4 ;
	# emit "*" operands: t40 (k: 5 t: 4), t39 (k: 5 t: 14)
	mov4 r46, [r45] ;
	# emit "*=" operands: t34 (k: 5 t: 14), t40 (k: 5 t: 4)
	mov4 [r43], r46 ;
.BB28:
	# emit "<=" operands:  (k: 147713304 t: -128), r3 (k: 4 t: 4), r7 (k: 4 t: 4)
	mov4 r47, r7 ;
	sub4 r47, r3 ;
	# ~x
	mul4 r47, -1 ;
	add4 r47, -1 ;
	# xor
	mov4 r48, r3 ;
	mov4 r49, r3 ;
	or4 r48, r7 ;
	and4 r49, r7 ;
	sub4 r48, r49 ;
	or4 r48, r47 ;
	# ~x
	mov4 r47, r7 ;
	mul4 r47, -1 ;
	add4 r47, -1 ;
	or4 r47, r3 ;
	and4 r47, r48 ;
	sr4 r47, 31 ;
	if4 (r47) goto .BB27 ;
	# emit "jmp" operands:  (k: 147719864 t: 72)
	goto .BB30
.BB29:
	# emit "=" operands: t42 (k: 5 t: 4), r9 (k: 4 t: 4)
	mov4 r50, r9 ;
	# emit "++" operands: r9 (k: 4 t: 4)
	add4 r9, 1 ;
	# emit "<<" operands: t44 (k: 5 t: 4), t42 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t45 (k: 5 t: 14), r2 (k: 4 t: 14), t44 (k: 5 t: 4)
	mov4 r51, r2 ;
	add4 r51, r50 * 4 ;
	# emit "=" operands: t47 (k: 5 t: 4), r4 (k: 4 t: 4)
	mov4 r52, r4 ;
	# emit "++" operands: r4 (k: 4 t: 4)
	add4 r4, 1 ;
	# emit "<<" operands: t49 (k: 5 t: 4), t47 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t50 (k: 5 t: 14), r1 (k: 4 t: 14), t49 (k: 5 t: 4)
	mov4 r53, r1 ;
	add4 r53, r52 * 4 ;
	# emit "*" operands: t51 (k: 5 t: 4), t50 (k: 5 t: 14)
	mov4 r54, [r53] ;
	# emit "*=" operands: t45 (k: 5 t: 14), t51 (k: 5 t: 4)
	mov4 [r51], r54 ;
.BB30:
	# emit "<=" operands:  (k: 147718088 t: 0), r4 (k: 4 t: 4), r5 (k: 4 t: 4)
	mov4 r55, r5 ;
	sub4 r55, r4 ;
	# ~x
	mul4 r55, -1 ;
	add4 r55, -1 ;
	# xor
	mov4 r56, r4 ;
	mov4 r57, r4 ;
	or4 r56, r5 ;
	and4 r57, r5 ;
	sub4 r56, r57 ;
	or4 r56, r55 ;
	# ~x
	mov4 r55, r5 ;
	mul4 r55, -1 ;
	add4 r55, -1 ;
	or4 r55, r4 ;
	and4 r55, r56 ;
	sr4 r55, 31 ;
	if4 (r55) goto .BB29 ;
	# emit "=" operands: r6 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r6, 0 ;
	# emit "jmp"
	goto .BB32
.BB31:
	# emit "<<" operands: t53 (k: 5 t: 4), r5 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t54 (k: 5 t: 14), r1 (k: 4 t: 14), t53 (k: 5 t: 4)
	mov4 r58, r1 ;
	add4 r58, r5 * 4 ;
	# emit "+" operands: t56 (k: 5 t: 14), r2 (k: 4 t: 14), t53 (k: 5 t: 4)
	mov4 r59, r2 ;
	add4 r59, r5 * 4 ;
	# emit "*" operands: t57 (k: 5 t: 4), t56 (k: 5 t: 14)
	mov4 r60, [r59] ;
	# emit "*=" operands: t54 (k: 5 t: 14), t57 (k: 5 t: 4)
	mov4 [r58], r60 ;
	# emit "++" operands: r6 (k: 4 t: 4)
	add4 r6, 1 ;
	# emit "+" operands: t62 (k: 5 t: 4), r5 (k: 4 t: 4), -1 (k: 3 t: 4)
	mov4 r61, r5 ;
	add4 r61, -1 ;
	# emit "=" operands: r5 (k: 4 t: 4), t62 (k: 5 t: 4)
	mov4 r5, r61 ;
.BB32:
	# emit "<" operands:  (k: 147720008 t: -96), r6 (k: 4 t: 4), r8 (k: 4 t: 4)
	mov4 r62, r6 ;
	sub4 r62, r8 ;
	# xor
	mov4 r63, r6 ;
	mov4 r65, r6 ;
	or4 r63, r8 ;
	and4 r65, r8 ;
	sub4 r63, r65 ;
	# xor
	mov4 r64, r62 ;
	mov4 r66, r62 ;
	or4 r64, r6 ;
	and4 r66, r6 ;
	sub4 r64, r66 ;
	and4 r63, r64 ;
	# xor
	mov4 r64, r62 ;
	mov4 r67, r62 ;
	or4 r64, r63 ;
	and4 r67, r63 ;
	sub4 r64, r67 ;
	sr4 r64, 31 ;
	if4 (r64) goto .BB31 ;
	ret
} <(r1, r2, r3, r4, r5), r0, (r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67)>

MSort {
	# emit ">=", r3 (k: 4 t: 4), r4 (k: 4 t: 4)
	mov4 r6, r3 ;
	sub4 r6, r4 ;
	# ~x
	mul4 r6, -1 ;
	add4 r6, -1 ;
	# xor
	mov4 r7, r4 ;
	mov4 r8, r4 ;
	or4 r7, r3 ;
	and4 r8, r3 ;
	sub4 r7, r8 ;
	or4 r7, r6 ;
	# ~x
	mov4 r6, r3 ;
	mul4 r6, -1 ;
	add4 r6, -1 ;
	or4 r6, r4 ;
	and4 r6, r7 ;
	sr4 r6, 31 ;
	if4 (r6) goto .BB33 ;
	# emit "+" operands: t0 (k: 5 t: 4), r3 (k: 4 t: 4), r4 (k: 4 t: 4)
	mov4 r9, r3 ;
	add4 r9, r4 ;
	# emit ">>" operands: t1 (k: 5 t: 4), t0 (k: 5 t: 4), 1 (k: 3 t: 4)
	# signed >>
	mov4 r11, r9 ;
	mov4 r10, -2147483648 ;
	add4 r11, -2147483648 ;
	sr4 r11, 1 ;
	sr4 r10, 1 ;
	sub4 r11, r10 ;
	# emit "=" operands: r5 (k: 4 t: 4), t1 (k: 5 t: 4)
	mov4 r5, r11 ;
	# emit "call", MSort (k: 9 t: 19)
	call r12, MSort, (r1, r2, r3, r5) ;
	# emit "+" operands: t2 (k: 5 t: 4), r5 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r13, r5 ;
	add4 r13, 1 ;
	# emit "call", MSort (k: 9 t: 19)
	call r14, MSort, (r1, r2, r13, r4) ;
	# emit "call", Merge (k: 9 t: 19)
	call r15, Merge, (r1, r2, r3, r13, r4) ;
.BB33:
	ret
} <(r1, r2, r3, r4), r0, (r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15)>

Mergesort {
	# emit "<<" operands: t0 (k: 5 t: 5), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "call" operands: r3 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r3, r2 * 4;
	# emit "==" operands:  (k: 147726000 t: 104), r3 (k: 4 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r3) goto .BB66 ;
	mov4 r4, 1 ;
	goto .BB67
.BB66:
	mov4 r4, 0 ;
.BB67:
	if4 (r4) goto .BB34 ;
	# emit "+" operands: t2 (k: 5 t: 4), r2 (k: 4 t: 4), -1 (k: 3 t: 4)
	mov4 r5, r2 ;
	add4 r5, -1 ;
	# emit "call", MSort (k: 9 t: 19)
	mov4 r7, 0 ;
	call r6, MSort, (r1, r3, r7, r5) ;
	# emit "jmp"
	goto .BB35
.BB34:
	# emit "&" operands: t3 (k: 5 t: 14), sort.istr3 (k: 7 t: 18)
	call r8, sort.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r9, prints, (r8) ;
	# emit "&" operands: t5 (k: 5 t: 14), sort.istr4 (k: 7 t: 18)
	call r10, sort.istr4, () ;
	# emit "call", prints (k: 9 t: 19)
	call r11, prints, (r10) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r13, 1 ;
	call r12, mincexit, (r13) ;
.BB35:
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13)>

Median3 {
	# emit "+" operands: t0 (k: 5 t: 4), r2 (k: 4 t: 4), r3 (k: 4 t: 4)
	mov4 r5, r2 ;
	add4 r5, r3 ;
	# emit ">>" operands: t1 (k: 5 t: 4), t0 (k: 5 t: 4), 1 (k: 3 t: 4)
	# signed >>
	mov4 r7, r5 ;
	mov4 r6, -2147483648 ;
	add4 r7, -2147483648 ;
	sr4 r7, 1 ;
	sr4 r6, 1 ;
	sub4 r7, r6 ;
	# emit "=" operands: r4 (k: 4 t: 4), t1 (k: 5 t: 4)
	mov4 r4, r7 ;
	# emit "<<" operands: t2 (k: 5 t: 4), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t3 (k: 5 t: 14), r1 (k: 4 t: 14), t2 (k: 5 t: 4)
	mov4 r8, r1 ;
	add4 r8, r2 * 4 ;
	# emit "*" operands: t4 (k: 5 t: 4), t3 (k: 5 t: 14)
	mov4 r9, [r8] ;
	# emit "<<" operands: t5 (k: 5 t: 4), r4 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t6 (k: 5 t: 14), r1 (k: 4 t: 14), t5 (k: 5 t: 4)
	mov4 r10, r1 ;
	add4 r10, r4 * 4 ;
	# emit "*" operands: t7 (k: 5 t: 4), t6 (k: 5 t: 14)
	mov4 r11, [r10] ;
	# emit "<=" operands:  (k: 147728000 t: -16), t4 (k: 5 t: 4), t7 (k: 5 t: 4)
	mov4 r12, r11 ;
	sub4 r12, r9 ;
	# ~x
	mul4 r12, -1 ;
	add4 r12, -1 ;
	# xor
	mov4 r13, r9 ;
	mov4 r14, r9 ;
	or4 r13, r11 ;
	and4 r14, r11 ;
	sub4 r13, r14 ;
	or4 r13, r12 ;
	# ~x
	mov4 r12, r11 ;
	mul4 r12, -1 ;
	add4 r12, -1 ;
	or4 r12, r9 ;
	and4 r12, r13 ;
	sr4 r12, 31 ;
	if4 (r12) goto .BB36 ;
	# emit "<<" operands: t8 (k: 5 t: 4), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t9 (k: 5 t: 14), r1 (k: 4 t: 14), t8 (k: 5 t: 4)
	mov4 r15, r1 ;
	add4 r15, r2 * 4 ;
	# emit "<<" operands: t10 (k: 5 t: 4), r4 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t11 (k: 5 t: 14), r1 (k: 4 t: 14), t10 (k: 5 t: 4)
	mov4 r16, r1 ;
	add4 r16, r4 * 4 ;
	# emit "call", Swap (k: 9 t: 19)
	call r17, Swap, (r15, r16) ;
.BB36:
	# emit "<<" operands: t12 (k: 5 t: 4), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t13 (k: 5 t: 14), r1 (k: 4 t: 14), t12 (k: 5 t: 4)
	mov4 r18, r1 ;
	add4 r18, r2 * 4 ;
	# emit "*" operands: t14 (k: 5 t: 4), t13 (k: 5 t: 14)
	mov4 r19, [r18] ;
	# emit "<<" operands: t15 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t16 (k: 5 t: 14), r1 (k: 4 t: 14), t15 (k: 5 t: 4)
	mov4 r20, r1 ;
	add4 r20, r3 * 4 ;
	# emit "*" operands: t17 (k: 5 t: 4), t16 (k: 5 t: 14)
	mov4 r21, [r20] ;
	# emit "<=" operands:  (k: 147729648 t: 96), t14 (k: 5 t: 4), t17 (k: 5 t: 4)
	mov4 r22, r21 ;
	sub4 r22, r19 ;
	# ~x
	mul4 r22, -1 ;
	add4 r22, -1 ;
	# xor
	mov4 r23, r19 ;
	mov4 r24, r19 ;
	or4 r23, r21 ;
	and4 r24, r21 ;
	sub4 r23, r24 ;
	or4 r23, r22 ;
	# ~x
	mov4 r22, r21 ;
	mul4 r22, -1 ;
	add4 r22, -1 ;
	or4 r22, r19 ;
	and4 r22, r23 ;
	sr4 r22, 31 ;
	if4 (r22) goto .BB37 ;
	# emit "<<" operands: t18 (k: 5 t: 4), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t19 (k: 5 t: 14), r1 (k: 4 t: 14), t18 (k: 5 t: 4)
	mov4 r25, r1 ;
	add4 r25, r2 * 4 ;
	# emit "<<" operands: t20 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t21 (k: 5 t: 14), r1 (k: 4 t: 14), t20 (k: 5 t: 4)
	mov4 r26, r1 ;
	add4 r26, r3 * 4 ;
	# emit "call", Swap (k: 9 t: 19)
	call r27, Swap, (r25, r26) ;
.BB37:
	# emit "<<" operands: t22 (k: 5 t: 4), r4 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t23 (k: 5 t: 14), r1 (k: 4 t: 14), t22 (k: 5 t: 4)
	mov4 r28, r1 ;
	add4 r28, r4 * 4 ;
	# emit "*" operands: t24 (k: 5 t: 4), t23 (k: 5 t: 14)
	mov4 r29, [r28] ;
	# emit "<<" operands: t25 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t26 (k: 5 t: 14), r1 (k: 4 t: 14), t25 (k: 5 t: 4)
	mov4 r30, r1 ;
	add4 r30, r3 * 4 ;
	# emit "*" operands: t27 (k: 5 t: 4), t26 (k: 5 t: 14)
	mov4 r31, [r30] ;
	# emit "<=", t24 (k: 5 t: 4), t27 (k: 5 t: 4)
	mov4 r32, r31 ;
	sub4 r32, r29 ;
	# ~x
	mul4 r32, -1 ;
	add4 r32, -1 ;
	# xor
	mov4 r33, r29 ;
	mov4 r34, r29 ;
	or4 r33, r31 ;
	and4 r34, r31 ;
	sub4 r33, r34 ;
	or4 r33, r32 ;
	# ~x
	mov4 r32, r31 ;
	mul4 r32, -1 ;
	add4 r32, -1 ;
	or4 r32, r29 ;
	and4 r32, r33 ;
	sr4 r32, 31 ;
	if4 (r32) goto .BB38 ;
	# emit "<<" operands: t28 (k: 5 t: 4), r4 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t29 (k: 5 t: 14), r1 (k: 4 t: 14), t28 (k: 5 t: 4)
	mov4 r35, r1 ;
	add4 r35, r4 * 4 ;
	# emit "<<" operands: t30 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t31 (k: 5 t: 14), r1 (k: 4 t: 14), t30 (k: 5 t: 4)
	mov4 r36, r1 ;
	add4 r36, r3 * 4 ;
	# emit "call", Swap (k: 9 t: 19)
	call r37, Swap, (r35, r36) ;
.BB38:
	# emit "<<" operands: t32 (k: 5 t: 4), r4 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t33 (k: 5 t: 14), r1 (k: 4 t: 14), t32 (k: 5 t: 4)
	mov4 r38, r1 ;
	add4 r38, r4 * 4 ;
	# emit "+" operands: t34 (k: 5 t: 4), r3 (k: 4 t: 4), -1 (k: 3 t: 4)
	mov4 r39, r3 ;
	add4 r39, -1 ;
	# emit "<<" operands: t35 (k: 5 t: 4), t34 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t36 (k: 5 t: 14), r1 (k: 4 t: 14), t35 (k: 5 t: 4)
	mov4 r40, r1 ;
	add4 r40, r39 * 4 ;
	# emit "call", Swap (k: 9 t: 19)
	call r41, Swap, (r38, r40) ;
	# emit "*" operands: t37 (k: 5 t: 4), t36 (k: 5 t: 14)
	mov4 r42, [r40] ;
	# emit "ret" operands: t37 (k: 5 t: 4)
	mov4 r0, r42 ;
	ret
} <(r1, r2, r3), r0, (r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42)>

Qsort {
	# emit "+" operands: t0 (k: 5 t: 4), r2 (k: 4 t: 4), 3 (k: 3 t: 4)
	mov4 r7, r2 ;
	add4 r7, 3 ;
	# emit ">" operands:  (k: 147735368 t: -8), t0 (k: 5 t: 4), r3 (k: 4 t: 4)
	mov4 r8, r3 ;
	sub4 r8, r7 ;
	# xor
	mov4 r9, r3 ;
	mov4 r11, r3 ;
	or4 r9, r7 ;
	and4 r11, r7 ;
	sub4 r9, r11 ;
	# xor
	mov4 r10, r8 ;
	mov4 r12, r8 ;
	or4 r10, r3 ;
	and4 r12, r3 ;
	sub4 r10, r12 ;
	and4 r9, r10 ;
	# xor
	mov4 r10, r8 ;
	mov4 r13, r8 ;
	or4 r10, r9 ;
	and4 r13, r9 ;
	sub4 r10, r13 ;
	sr4 r10, 31 ;
	if4 (r10) goto .BB43 ;
	# emit "call" operands: r6 (k: 4 t: 4), Median3 (k: 9 t: 19)
	call r6, Median3, (r1, r2, r3) ;
	# emit "=" operands: r4 (k: 4 t: 4), r2 (k: 4 t: 4)
	mov4 r4, r2 ;
	# emit "+" operands: t2 (k: 5 t: 4), r3 (k: 4 t: 4), -1 (k: 3 t: 4)
	mov4 r14, r3 ;
	add4 r14, -1 ;
	# emit "=" operands: r5 (k: 4 t: 4), t2 (k: 5 t: 4)
	mov4 r5, r14 ;
.BB39:
	# emit "++" operands: r4 (k: 4 t: 4)
	add4 r4, 1 ;
	# emit "<<" operands: t4 (k: 5 t: 4), r4 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t5 (k: 5 t: 14), r1 (k: 4 t: 14), t4 (k: 5 t: 4)
	mov4 r15, r1 ;
	add4 r15, r4 * 4 ;
	# emit "*" operands: t6 (k: 5 t: 4), t5 (k: 5 t: 14)
	mov4 r16, [r15] ;
	# emit "<" operands:  (k: 147734336 t: -72), t6 (k: 5 t: 4), r6 (k: 4 t: 4)
	mov4 r17, r16 ;
	sub4 r17, r6 ;
	# xor
	mov4 r18, r16 ;
	mov4 r20, r16 ;
	or4 r18, r6 ;
	and4 r20, r6 ;
	sub4 r18, r20 ;
	# xor
	mov4 r19, r17 ;
	mov4 r21, r17 ;
	or4 r19, r16 ;
	and4 r21, r16 ;
	sub4 r19, r21 ;
	and4 r18, r19 ;
	# xor
	mov4 r19, r17 ;
	mov4 r22, r17 ;
	or4 r19, r18 ;
	and4 r22, r18 ;
	sub4 r19, r22 ;
	sr4 r19, 31 ;
	if4 (r19) goto .BB39 ;
.BB40:
	# emit "+" operands: t7 (k: 5 t: 4), r5 (k: 4 t: 4), -1 (k: 3 t: 4)
	mov4 r23, r5 ;
	add4 r23, -1 ;
	# emit "=" operands: r5 (k: 4 t: 4), t7 (k: 5 t: 4)
	mov4 r5, r23 ;
	# emit "<<" operands: t8 (k: 5 t: 4), r5 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t9 (k: 5 t: 14), r1 (k: 4 t: 14), t8 (k: 5 t: 4)
	mov4 r24, r1 ;
	add4 r24, r5 * 4 ;
	# emit "*" operands: t10 (k: 5 t: 4), t9 (k: 5 t: 14)
	mov4 r25, [r24] ;
	# emit ">" operands:  (k: 147735592 t: -72), t10 (k: 5 t: 4), r6 (k: 4 t: 4)
	mov4 r26, r6 ;
	sub4 r26, r25 ;
	# xor
	mov4 r27, r6 ;
	mov4 r29, r6 ;
	or4 r27, r25 ;
	and4 r29, r25 ;
	sub4 r27, r29 ;
	# xor
	mov4 r28, r26 ;
	mov4 r30, r26 ;
	or4 r28, r6 ;
	and4 r30, r6 ;
	sub4 r28, r30 ;
	and4 r27, r28 ;
	# xor
	mov4 r28, r26 ;
	mov4 r31, r26 ;
	or4 r28, r27 ;
	and4 r31, r27 ;
	sub4 r28, r31 ;
	sr4 r28, 31 ;
	if4 (r28) goto .BB40 ;
	# emit ">=" operands:  (k: 147737344 t: -8), r4 (k: 4 t: 4), r5 (k: 4 t: 4)
	mov4 r32, r4 ;
	sub4 r32, r5 ;
	# ~x
	mul4 r32, -1 ;
	add4 r32, -1 ;
	# xor
	mov4 r33, r5 ;
	mov4 r34, r5 ;
	or4 r33, r4 ;
	and4 r34, r4 ;
	sub4 r33, r34 ;
	or4 r33, r32 ;
	# ~x
	mov4 r32, r4 ;
	mul4 r32, -1 ;
	add4 r32, -1 ;
	or4 r32, r5 ;
	and4 r32, r33 ;
	sr4 r32, 31 ;
	if4 (r32) goto .BB42 ;
	# emit "<<" operands: t11 (k: 5 t: 4), r4 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t12 (k: 5 t: 14), r1 (k: 4 t: 14), t11 (k: 5 t: 4)
	mov4 r35, r1 ;
	add4 r35, r4 * 4 ;
	# emit "<<" operands: t13 (k: 5 t: 4), r5 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t14 (k: 5 t: 14), r1 (k: 4 t: 14), t13 (k: 5 t: 4)
	mov4 r36, r1 ;
	add4 r36, r5 * 4 ;
	# emit "call", Swap (k: 9 t: 19)
	call r37, Swap, (r35, r36) ;
	# emit "jmp" operands:  (k: 147737488 t: 40)
	goto .BB41
.BB41:
	# emit "jmp" operands:  (k: 147734336 t: -72)
	goto .BB39
.BB42:
	# emit "<<" operands: t15 (k: 5 t: 4), r4 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t16 (k: 5 t: 14), r1 (k: 4 t: 14), t15 (k: 5 t: 4)
	mov4 r38, r1 ;
	add4 r38, r4 * 4 ;
	# emit "+" operands: t17 (k: 5 t: 4), r3 (k: 4 t: 4), -1 (k: 3 t: 4)
	mov4 r39, r3 ;
	add4 r39, -1 ;
	# emit "<<" operands: t18 (k: 5 t: 4), t17 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t19 (k: 5 t: 14), r1 (k: 4 t: 14), t18 (k: 5 t: 4)
	mov4 r40, r1 ;
	add4 r40, r39 * 4 ;
	# emit "call", Swap (k: 9 t: 19)
	call r41, Swap, (r38, r40) ;
	# emit "+" operands: t20 (k: 5 t: 4), r4 (k: 4 t: 4), -1 (k: 3 t: 4)
	mov4 r42, r4 ;
	add4 r42, -1 ;
	# emit "call", Qsort (k: 9 t: 19)
	call r43, Qsort, (r1, r2, r42) ;
	# emit "+" operands: t21 (k: 5 t: 4), r4 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r44, r4 ;
	add4 r44, 1 ;
	# emit "call", Qsort (k: 9 t: 19)
	call r45, Qsort, (r1, r44, r3) ;
	# emit "jmp"
	goto .BB44
.BB43:
	# emit "<<" operands: t22 (k: 5 t: 4), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t23 (k: 5 t: 14), r1 (k: 4 t: 14), t22 (k: 5 t: 4)
	mov4 r46, r1 ;
	add4 r46, r2 * 4 ;
	# emit "-" operands: t24 (k: 5 t: 4), r3 (k: 4 t: 4), r2 (k: 4 t: 4)
	mov4 r47, r3 ;
	sub4 r47, r2 ;
	# emit "+" operands: t25 (k: 5 t: 4), t24 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r48, r47 ;
	add4 r48, 1 ;
	# emit "call", InsertionSort (k: 9 t: 19)
	call r49, InsertionSort, (r46, r48) ;
.BB44:
	ret
} <(r1, r2, r3), r0, (r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49)>

Quicksort {
	# emit "+" operands: t0 (k: 5 t: 4), r2 (k: 4 t: 4), -1 (k: 3 t: 4)
	mov4 r3, r2 ;
	add4 r3, -1 ;
	# emit "call", Qsort (k: 9 t: 19)
	mov4 r5, 0 ;
	call r4, Qsort, (r1, r5, r3) ;
	ret
} <(r1, r2), r0, (r3, r4, r5)>

Qselect {
	# emit "+" operands: t0 (k: 5 t: 4), r3 (k: 4 t: 4), 3 (k: 3 t: 4)
	mov4 r8, r3 ;
	add4 r8, 3 ;
	# emit ">" operands:  (k: 147746896 t: -40), t0 (k: 5 t: 4), r4 (k: 4 t: 4)
	mov4 r9, r4 ;
	sub4 r9, r8 ;
	# xor
	mov4 r10, r4 ;
	mov4 r12, r4 ;
	or4 r10, r8 ;
	and4 r12, r8 ;
	sub4 r10, r12 ;
	# xor
	mov4 r11, r9 ;
	mov4 r13, r9 ;
	or4 r11, r4 ;
	and4 r13, r4 ;
	sub4 r11, r13 ;
	and4 r10, r11 ;
	# xor
	mov4 r11, r9 ;
	mov4 r14, r9 ;
	or4 r11, r10 ;
	and4 r14, r10 ;
	sub4 r11, r14 ;
	sr4 r11, 31 ;
	if4 (r11) goto .BB51 ;
	# emit "call" operands: r7 (k: 4 t: 4), Median3 (k: 9 t: 19)
	call r7, Median3, (r1, r3, r4) ;
	# emit "=" operands: r5 (k: 4 t: 4), r3 (k: 4 t: 4)
	mov4 r5, r3 ;
	# emit "+" operands: t2 (k: 5 t: 4), r4 (k: 4 t: 4), -1 (k: 3 t: 4)
	mov4 r15, r4 ;
	add4 r15, -1 ;
	# emit "=" operands: r6 (k: 4 t: 4), t2 (k: 5 t: 4)
	mov4 r6, r15 ;
.BB45:
	# emit "++" operands: r5 (k: 4 t: 4)
	add4 r5, 1 ;
	# emit "<<" operands: t4 (k: 5 t: 4), r5 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t5 (k: 5 t: 14), r1 (k: 4 t: 14), t4 (k: 5 t: 4)
	mov4 r16, r1 ;
	add4 r16, r5 * 4 ;
	# emit "*" operands: t6 (k: 5 t: 4), t5 (k: 5 t: 14)
	mov4 r17, [r16] ;
	# emit "<" operands:  (k: 147741472 t: 64), t6 (k: 5 t: 4), r7 (k: 4 t: 4)
	mov4 r18, r17 ;
	sub4 r18, r7 ;
	# xor
	mov4 r19, r17 ;
	mov4 r21, r17 ;
	or4 r19, r7 ;
	and4 r21, r7 ;
	sub4 r19, r21 ;
	# xor
	mov4 r20, r18 ;
	mov4 r22, r18 ;
	or4 r20, r17 ;
	and4 r22, r17 ;
	sub4 r20, r22 ;
	and4 r19, r20 ;
	# xor
	mov4 r20, r18 ;
	mov4 r23, r18 ;
	or4 r20, r19 ;
	and4 r23, r19 ;
	sub4 r20, r23 ;
	sr4 r20, 31 ;
	if4 (r20) goto .BB45 ;
.BB46:
	# emit "+" operands: t7 (k: 5 t: 4), r6 (k: 4 t: 4), -1 (k: 3 t: 4)
	mov4 r24, r6 ;
	add4 r24, -1 ;
	# emit "=" operands: r6 (k: 4 t: 4), t7 (k: 5 t: 4)
	mov4 r6, r24 ;
	# emit "<<" operands: t8 (k: 5 t: 4), r6 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t9 (k: 5 t: 14), r1 (k: 4 t: 14), t8 (k: 5 t: 4)
	mov4 r25, r1 ;
	add4 r25, r6 * 4 ;
	# emit "*" operands: t10 (k: 5 t: 4), t9 (k: 5 t: 14)
	mov4 r26, [r25] ;
	# emit ">" operands:  (k: 147742640 t: 64), t10 (k: 5 t: 4), r7 (k: 4 t: 4)
	mov4 r27, r7 ;
	sub4 r27, r26 ;
	# xor
	mov4 r28, r7 ;
	mov4 r30, r7 ;
	or4 r28, r26 ;
	and4 r30, r26 ;
	sub4 r28, r30 ;
	# xor
	mov4 r29, r27 ;
	mov4 r31, r27 ;
	or4 r29, r7 ;
	and4 r31, r7 ;
	sub4 r29, r31 ;
	and4 r28, r29 ;
	# xor
	mov4 r29, r27 ;
	mov4 r32, r27 ;
	or4 r29, r28 ;
	and4 r32, r28 ;
	sub4 r29, r32 ;
	sr4 r29, 31 ;
	if4 (r29) goto .BB46 ;
	# emit ">=" operands:  (k: 147744416 t: 104), r5 (k: 4 t: 4), r6 (k: 4 t: 4)
	mov4 r33, r5 ;
	sub4 r33, r6 ;
	# ~x
	mul4 r33, -1 ;
	add4 r33, -1 ;
	# xor
	mov4 r34, r6 ;
	mov4 r35, r6 ;
	or4 r34, r5 ;
	and4 r35, r5 ;
	sub4 r34, r35 ;
	or4 r34, r33 ;
	# ~x
	mov4 r33, r5 ;
	mul4 r33, -1 ;
	add4 r33, -1 ;
	or4 r33, r6 ;
	and4 r33, r34 ;
	sr4 r33, 31 ;
	if4 (r33) goto .BB48 ;
	# emit "<<" operands: t11 (k: 5 t: 4), r5 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t12 (k: 5 t: 14), r1 (k: 4 t: 14), t11 (k: 5 t: 4)
	mov4 r36, r1 ;
	add4 r36, r5 * 4 ;
	# emit "<<" operands: t13 (k: 5 t: 4), r6 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t14 (k: 5 t: 14), r1 (k: 4 t: 14), t13 (k: 5 t: 4)
	mov4 r37, r1 ;
	add4 r37, r6 * 4 ;
	# emit "call", Swap (k: 9 t: 19)
	call r38, Swap, (r36, r37) ;
	# emit "jmp" operands:  (k: 147744560 t: -80)
	goto .BB47
.BB47:
	# emit "jmp" operands:  (k: 147741472 t: 64)
	goto .BB45
.BB48:
	# emit "<<" operands: t15 (k: 5 t: 4), r5 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t16 (k: 5 t: 14), r1 (k: 4 t: 14), t15 (k: 5 t: 4)
	mov4 r39, r1 ;
	add4 r39, r5 * 4 ;
	# emit "+" operands: t17 (k: 5 t: 4), r4 (k: 4 t: 4), -1 (k: 3 t: 4)
	mov4 r40, r4 ;
	add4 r40, -1 ;
	# emit "<<" operands: t18 (k: 5 t: 4), t17 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t19 (k: 5 t: 14), r1 (k: 4 t: 14), t18 (k: 5 t: 4)
	mov4 r41, r1 ;
	add4 r41, r40 * 4 ;
	# emit "call", Swap (k: 9 t: 19)
	call r42, Swap, (r39, r41) ;
	# emit ">" operands:  (k: 147746408 t: -104), r2 (k: 4 t: 4), r5 (k: 4 t: 4)
	mov4 r43, r5 ;
	sub4 r43, r2 ;
	# xor
	mov4 r44, r5 ;
	mov4 r46, r5 ;
	or4 r44, r2 ;
	and4 r46, r2 ;
	sub4 r44, r46 ;
	# xor
	mov4 r45, r43 ;
	mov4 r47, r43 ;
	or4 r45, r5 ;
	and4 r47, r5 ;
	sub4 r45, r47 ;
	and4 r44, r45 ;
	# xor
	mov4 r45, r43 ;
	mov4 r48, r43 ;
	or4 r45, r44 ;
	and4 r48, r44 ;
	sub4 r45, r48 ;
	sr4 r45, 31 ;
	if4 (r45) goto .BB49 ;
	# emit "+" operands: t20 (k: 5 t: 4), r5 (k: 4 t: 4), -1 (k: 3 t: 4)
	mov4 r49, r5 ;
	add4 r49, -1 ;
	# emit "call", Qselect (k: 9 t: 19)
	call r50, Qselect, (r1, r2, r3, r49) ;
	# emit "jmp"
	goto .BB52
.BB49:
	# emit "+" operands: t21 (k: 5 t: 4), r5 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r51, r5 ;
	add4 r51, 1 ;
	# emit "<=" operands:  (k: 147746968 t: -40), r2 (k: 4 t: 4), t21 (k: 5 t: 4)
	mov4 r52, r51 ;
	sub4 r52, r2 ;
	# ~x
	mul4 r52, -1 ;
	add4 r52, -1 ;
	# xor
	mov4 r53, r2 ;
	mov4 r54, r2 ;
	or4 r53, r51 ;
	and4 r54, r51 ;
	sub4 r53, r54 ;
	or4 r53, r52 ;
	# ~x
	mov4 r52, r51 ;
	mul4 r52, -1 ;
	add4 r52, -1 ;
	or4 r52, r2 ;
	and4 r52, r53 ;
	sr4 r52, 31 ;
	if4 (r52) goto .BB50 ;
	# emit "+" operands: t22 (k: 5 t: 4), r5 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r55, r5 ;
	add4 r55, 1 ;
	# emit "call", Qselect (k: 9 t: 19)
	call r56, Qselect, (r1, r2, r55, r4) ;
.BB50:
	# emit "jmp"
	goto .BB52
.BB51:
	# emit "<<" operands: t23 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t24 (k: 5 t: 14), r1 (k: 4 t: 14), t23 (k: 5 t: 4)
	mov4 r57, r1 ;
	add4 r57, r3 * 4 ;
	# emit "-" operands: t25 (k: 5 t: 4), r4 (k: 4 t: 4), r3 (k: 4 t: 4)
	mov4 r58, r4 ;
	sub4 r58, r3 ;
	# emit "+" operands: t26 (k: 5 t: 4), t25 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r59, r58 ;
	add4 r59, 1 ;
	# emit "call", InsertionSort (k: 9 t: 19)
	call r60, InsertionSort, (r57, r59) ;
.BB52:
	ret
} <(r1, r2, r3, r4), r0, (r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60)>

Permute {
	# emit "=" operands: r3 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r3, 0 ;
	# emit "jmp" operands:  (k: 147748968 t: 64)
	goto .BB54
.BB53:
	# emit "<<" operands: t0 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t1 (k: 5 t: 14), r1 (k: 4 t: 14), t0 (k: 5 t: 4)
	mov4 r4, r1 ;
	add4 r4, r3 * 4 ;
	# emit "*=" operands: t1 (k: 5 t: 14), r3 (k: 4 t: 4)
	mov4 [r4], r3 ;
	# emit "++" operands: r3 (k: 4 t: 4)
	add4 r3, 1 ;
.BB54:
	# emit "<" operands:  (k: 147748824 t: -8), r3 (k: 4 t: 4), r2 (k: 4 t: 4)
	mov4 r5, r3 ;
	sub4 r5, r2 ;
	# xor
	mov4 r6, r3 ;
	mov4 r8, r3 ;
	or4 r6, r2 ;
	and4 r8, r2 ;
	sub4 r6, r8 ;
	# xor
	mov4 r7, r5 ;
	mov4 r9, r5 ;
	or4 r7, r3 ;
	and4 r9, r3 ;
	sub4 r7, r9 ;
	and4 r6, r7 ;
	# xor
	mov4 r7, r5 ;
	mov4 r10, r5 ;
	or4 r7, r6 ;
	and4 r10, r6 ;
	sub4 r7, r10 ;
	sr4 r7, 31 ;
	if4 (r7) goto .BB53 ;
	# emit "=" operands: r3 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r3, 1 ;
	# emit "jmp"
	goto .BB56
.BB55:
	# emit "<<" operands: t6 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t7 (k: 5 t: 14), r1 (k: 4 t: 14), t6 (k: 5 t: 4)
	mov4 r11, r1 ;
	add4 r11, r3 * 4 ;
	# emit "call" operands: t8 (k: 5 t: 4), rand (k: 9 t: 19)
	call r12, rand, () ;
	# emit "+" operands: t9 (k: 5 t: 4), r3 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r13, r3 ;
	add4 r13, 1 ;
	# emit "%" operands: t10 (k: 5 t: 4), t8 (k: 5 t: 4), t9 (k: 5 t: 4)
	mov4 r15, r12 ;
	div4 r15, r13 ;
	mul4 r15, r13 ;
	mov4 r14, r12 ;
	sub4 r14, r15 ;
	# emit "<<" operands: t11 (k: 5 t: 4), t10 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t12 (k: 5 t: 14), r1 (k: 4 t: 14), t11 (k: 5 t: 4)
	mov4 r16, r1 ;
	add4 r16, r14 * 4 ;
	# emit "call", Swap (k: 9 t: 19)
	call r17, Swap, (r11, r16) ;
	# emit "++" operands: r3 (k: 4 t: 4)
	add4 r3, 1 ;
.BB56:
	# emit "<" operands:  (k: 147749184 t: 32), r3 (k: 4 t: 4), r2 (k: 4 t: 4)
	mov4 r18, r3 ;
	sub4 r18, r2 ;
	# xor
	mov4 r19, r3 ;
	mov4 r21, r3 ;
	or4 r19, r2 ;
	and4 r21, r2 ;
	sub4 r19, r21 ;
	# xor
	mov4 r20, r18 ;
	mov4 r22, r18 ;
	or4 r20, r3 ;
	and4 r22, r3 ;
	sub4 r20, r22 ;
	and4 r19, r20 ;
	# xor
	mov4 r20, r18 ;
	mov4 r23, r18 ;
	or4 r20, r19 ;
	and4 r23, r19 ;
	sub4 r20, r23 ;
	sr4 r20, 31 ;
	if4 (r20) goto .BB55 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23)>

Checksort {
	# emit "=" operands: r3 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r3, 0 ;
	# emit "jmp" operands:  (k: 147752944 t: 88)
	goto .BB59
.BB57:
	# emit "<<" operands: t0 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t1 (k: 5 t: 14), r1 (k: 4 t: 14), t0 (k: 5 t: 4)
	mov4 r4, r1 ;
	add4 r4, r3 * 4 ;
	# emit "*" operands: t2 (k: 5 t: 4), t1 (k: 5 t: 14)
	mov4 r5, [r4] ;
	# emit "==" operands:  (k: 147753016 t: 16), t2 (k: 5 t: 4), r3 (k: 4 t: 4)
	eq4 r6, r5, r3 ;
	if4 (r6) goto .BB58 ;
	# emit "&" operands: t3 (k: 5 t: 14), sort.istr5 (k: 7 t: 18)
	call r7, sort.istr5, () ;
	# emit "call", prints (k: 9 t: 19)
	call r8, prints, (r7) ;
	# emit "call", print32 (k: 9 t: 19)
	call r9, print32, (r3) ;
	# emit "&" operands: t6 (k: 5 t: 14), sort.istr6 (k: 7 t: 18)
	call r10, sort.istr6, () ;
	# emit "call", prints (k: 9 t: 19)
	call r11, prints, (r10) ;
	# emit "<<" operands: t8 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t9 (k: 5 t: 14), r1 (k: 4 t: 14), t8 (k: 5 t: 4)
	mov4 r12, r1 ;
	add4 r12, r3 * 4 ;
	# emit "*" operands: t10 (k: 5 t: 4), t9 (k: 5 t: 14)
	mov4 r13, [r12] ;
	# emit "call", print32 (k: 9 t: 19)
	call r14, print32, (r13) ;
	# emit "&" operands: t12 (k: 5 t: 14), sort.istr7 (k: 7 t: 18)
	call r15, sort.istr7, () ;
	# emit "call", prints (k: 9 t: 19)
	call r16, prints, (r15) ;
.BB58:
	# emit "++" operands: r3 (k: 4 t: 4)
	add4 r3, 1 ;
.BB59:
	# emit "<" operands:  (k: 147752432 t: 56), r3 (k: 4 t: 4), r2 (k: 4 t: 4)
	mov4 r17, r3 ;
	sub4 r17, r2 ;
	# xor
	mov4 r18, r3 ;
	mov4 r20, r3 ;
	or4 r18, r2 ;
	and4 r20, r2 ;
	sub4 r18, r20 ;
	# xor
	mov4 r19, r17 ;
	mov4 r21, r17 ;
	or4 r19, r3 ;
	and4 r21, r3 ;
	sub4 r19, r21 ;
	and4 r18, r19 ;
	# xor
	mov4 r19, r17 ;
	mov4 r22, r17 ;
	or4 r19, r18 ;
	and4 r22, r18 ;
	sub4 r19, r22 ;
	sr4 r19, 31 ;
	if4 (r19) goto .BB57 ;
	# emit "&" operands: t16 (k: 5 t: 14), sort.istr8 (k: 7 t: 18)
	call r23, sort.istr8, () ;
	# emit "call", prints (k: 9 t: 19)
	call r24, prints, (r23) ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24)>

Copy {
	# emit "=" operands: r4 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r4, 0 ;
	# emit "jmp"
	goto .BB61
.BB60:
	# emit "<<" operands: t0 (k: 5 t: 4), r4 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t1 (k: 5 t: 14), r1 (k: 4 t: 14), t0 (k: 5 t: 4)
	mov4 r5, r1 ;
	add4 r5, r4 * 4 ;
	# emit "+" operands: t3 (k: 5 t: 14), r2 (k: 4 t: 14), t0 (k: 5 t: 4)
	mov4 r6, r2 ;
	add4 r6, r4 * 4 ;
	# emit "*" operands: t4 (k: 5 t: 4), t3 (k: 5 t: 14)
	mov4 r7, [r6] ;
	# emit "*=" operands: t1 (k: 5 t: 14), t4 (k: 5 t: 4)
	mov4 [r5], r7 ;
	# emit "++" operands: r4 (k: 4 t: 4)
	add4 r4, 1 ;
.BB61:
	# emit "<" operands:  (k: 147756072 t: -104), r4 (k: 4 t: 4), r3 (k: 4 t: 4)
	mov4 r8, r4 ;
	sub4 r8, r3 ;
	# xor
	mov4 r9, r4 ;
	mov4 r11, r4 ;
	or4 r9, r3 ;
	and4 r11, r3 ;
	sub4 r9, r11 ;
	# xor
	mov4 r10, r8 ;
	mov4 r12, r8 ;
	or4 r10, r4 ;
	and4 r12, r4 ;
	sub4 r10, r12 ;
	and4 r9, r10 ;
	# xor
	mov4 r10, r8 ;
	mov4 r13, r8 ;
	or4 r10, r9 ;
	and4 r13, r9 ;
	sub4 r10, r13 ;
	sr4 r10, 31 ;
	if4 (r10) goto .BB60 ;
	ret
} <(r1, r2, r3), r0, (r4, r5, r6, r7, r8, r9, r10, r11, r12, r13)>

main {
	# emit "call" operands: r3 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r3, 400 ;
	# emit "call" operands: r4 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r4, 400 ;
	# emit "=" operands: r5 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "jmp" operands:  (k: 147760872 t: 0)
	goto .BB65
.BB62:
	# emit "call", Permute (k: 9 t: 19)
	mov4 r7, 100 ;
	call r6, Permute, (r4, r7) ;
	# emit "call", Copy (k: 9 t: 19)
	call r8, Copy, (r3, r4, r7) ;
	# emit "call", InsertionSort (k: 9 t: 19)
	call r9, InsertionSort, (r3, r7) ;
	# emit "call", Checksort (k: 9 t: 19)
	call r10, Checksort, (r3, r7) ;
	# emit "call", Copy (k: 9 t: 19)
	call r11, Copy, (r3, r4, r7) ;
	# emit "call", Shellsort (k: 9 t: 19)
	call r12, Shellsort, (r3, r7) ;
	# emit "call", Checksort (k: 9 t: 19)
	call r13, Checksort, (r3, r7) ;
	# emit "call", Copy (k: 9 t: 19)
	call r14, Copy, (r3, r4, r7) ;
	# emit "call", Heapsort (k: 9 t: 19)
	call r15, Heapsort, (r3, r7) ;
	# emit "call", Checksort (k: 9 t: 19)
	call r16, Checksort, (r3, r7) ;
	# emit "call", Copy (k: 9 t: 19)
	call r17, Copy, (r3, r4, r7) ;
	# emit "call", Mergesort (k: 9 t: 19)
	call r18, Mergesort, (r3, r7) ;
	# emit "call", Checksort (k: 9 t: 19)
	call r19, Checksort, (r3, r7) ;
	# emit "call", Copy (k: 9 t: 19)
	call r20, Copy, (r3, r4, r7) ;
	# emit "call", Quicksort (k: 9 t: 19)
	call r21, Quicksort, (r3, r7) ;
	# emit "call", Checksort (k: 9 t: 19)
	call r22, Checksort, (r3, r7) ;
	# emit "call", Copy (k: 9 t: 19)
	call r23, Copy, (r3, r4, r7) ;
	# emit "+" operands: t2 (k: 5 t: 4), r5 (k: 4 t: 4), 51 (k: 3 t: 4)
	mov4 r24, r5 ;
	add4 r24, 51 ;
	# emit "call", Qselect (k: 9 t: 19)
	mov4 r26, 0 ;
	mov4 r27, 99 ;
	call r25, Qselect, (r3, r24, r26, r27) ;
	# emit "+" operands: t3 (k: 5 t: 4), r5 (k: 4 t: 4), 50 (k: 3 t: 4)
	mov4 r28, r5 ;
	add4 r28, 50 ;
	# emit "<<" operands: t4 (k: 5 t: 4), t3 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t5 (k: 5 t: 14), r3 (k: 4 t: 14), t4 (k: 5 t: 4)
	mov4 r29, r3 ;
	add4 r29, r28 * 4 ;
	# emit "*" operands: t6 (k: 5 t: 4), t5 (k: 5 t: 14)
	mov4 r30, [r29] ;
	# emit "==" operands:  (k: 147760944 t: -24), t6 (k: 5 t: 4), t3 (k: 5 t: 4)
	eq4 r31, r30, r28 ;
	if4 (r31) goto .BB63 ;
	# emit "&" operands: t7 (k: 5 t: 14), sort.istr9 (k: 7 t: 18)
	call r32, sort.istr9, () ;
	# emit "call", prints (k: 9 t: 19)
	call r33, prints, (r32) ;
	# emit "+" operands: t9 (k: 5 t: 4), r5 (k: 4 t: 4), 50 (k: 3 t: 4)
	mov4 r34, r5 ;
	add4 r34, 50 ;
	# emit "call", print32 (k: 9 t: 19)
	call r35, print32, (r34) ;
	# emit "&" operands: t11 (k: 5 t: 14), sort.istr10 (k: 7 t: 18)
	call r36, sort.istr10, () ;
	# emit "call", prints (k: 9 t: 19)
	call r37, prints, (r36) ;
	# emit "<<" operands: t13 (k: 5 t: 4), t9 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t14 (k: 5 t: 14), r3 (k: 4 t: 14), t13 (k: 5 t: 4)
	mov4 r38, r3 ;
	add4 r38, r34 * 4 ;
	# emit "*" operands: t15 (k: 5 t: 4), t14 (k: 5 t: 14)
	mov4 r39, [r38] ;
	# emit "call", print32 (k: 9 t: 19)
	call r40, print32, (r39) ;
	# emit "&" operands: t17 (k: 5 t: 14), sort.istr11 (k: 7 t: 18)
	call r41, sort.istr11, () ;
	# emit "call", prints (k: 9 t: 19)
	call r42, prints, (r41) ;
	# emit "jmp" operands:  (k: 147761016 t: -72)
	goto .BB64
.BB63:
	# emit "&" operands: t19 (k: 5 t: 14), sort.istr12 (k: 7 t: 18)
	call r43, sort.istr12, () ;
	# emit "call", prints (k: 9 t: 19)
	call r44, prints, (r43) ;
.BB64:
	# emit "++" operands: r5 (k: 4 t: 4)
	add4 r5, 1 ;
.BB65:
	# emit "<" operands:  (k: 147758032 t: 48), r5 (k: 4 t: 4), 10 (k: 3 t: 4)
	mov4 r45, r5 ;
	sub4 r45, 10 ;
	# xor
	mov4 r46, r5 ;
	mov4 r48, r5 ;
	or4 r46, 10 ;
	and4 r48, 10 ;
	sub4 r46, r48 ;
	# xor
	mov4 r47, r45 ;
	mov4 r49, r45 ;
	or4 r47, r5 ;
	and4 r49, r5 ;
	sub4 r47, r49 ;
	and4 r46, r47 ;
	# xor
	mov4 r47, r45 ;
	mov4 r50, r45 ;
	or4 r47, r46 ;
	and4 r50, r46 ;
	sub4 r47, r50 ;
	sr4 r47, 31 ;
	if4 (r47) goto .BB62 ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50)>

