# Code auto-generated by MinxCC

testpair.istr0 {
	mov4 r1, 17 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 68 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 103 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testpair.istr1 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 68 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 103 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testpair.istr2 {
	mov4 r1, 21 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 68 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 77 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 44 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testpair.istr3 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testpair.istr4 {
	mov4 r1, 9 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 68 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 46 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 46 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 46 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




sleep {
	# emit "=" operands: r2 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r2, 0 ;
	# emit "jmp" operands:  (k: 150167832 t: -88)
	goto .BB5
.BB0:
	# emit "=" operands: r3 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r3, 0 ;
	# emit "jmp" operands:  (k: 150168256 t: 24)
	goto .BB4
.BB1:
	# emit "=" operands: r4 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r4, 0 ;
	# emit "jmp" operands:  (k: 150168552 t: -64)
	goto .BB3
.BB2:
	# emit "++" operands: r5 (k: 4 t: 4)
	add4 r5, 1 ;
	# emit "++" operands: r4 (k: 4 t: 4)
	add4 r4, 1 ;
.BB3:
	# emit "<" operands:  (k: 150168184 t: 120), r4 (k: 4 t: 4), r1 (k: 4 t: 4)
	mov4 r6, r4 ;
	sub4 r6, r1 ;
	# xor
	mov4 r7, r4 ;
	mov4 r9, r4 ;
	or4 r7, r1 ;
	and4 r9, r1 ;
	sub4 r7, r9 ;
	# xor
	mov4 r8, r6 ;
	mov4 r10, r6 ;
	or4 r8, r4 ;
	and4 r10, r4 ;
	sub4 r8, r10 ;
	and4 r7, r8 ;
	# xor
	mov4 r8, r6 ;
	mov4 r11, r6 ;
	or4 r8, r7 ;
	and4 r11, r7 ;
	sub4 r8, r11 ;
	sr4 r8, 31 ;
	if4 (r8) goto .BB2 ;
	# emit "++" operands: r3 (k: 4 t: 4)
	add4 r3, 1 ;
.BB4:
	# emit "<" operands:  (k: 150167760 t: 120), r3 (k: 4 t: 4), 1000 (k: 3 t: 4)
	mov4 r12, r3 ;
	sub4 r12, 1000 ;
	# xor
	mov4 r13, r3 ;
	mov4 r15, r3 ;
	or4 r13, 1000 ;
	and4 r15, 1000 ;
	sub4 r13, r15 ;
	# xor
	mov4 r14, r12 ;
	mov4 r16, r12 ;
	or4 r14, r3 ;
	and4 r16, r3 ;
	sub4 r14, r16 ;
	and4 r13, r14 ;
	# xor
	mov4 r14, r12 ;
	mov4 r17, r12 ;
	or4 r14, r13 ;
	and4 r17, r13 ;
	sub4 r14, r17 ;
	sr4 r14, 31 ;
	if4 (r14) goto .BB1 ;
	# emit "++" operands: r2 (k: 4 t: 4)
	add4 r2, 1 ;
.BB5:
	# emit "<" operands:  (k: 150167616 t: 8), r2 (k: 4 t: 4), 10000 (k: 3 t: 4)
	mov4 r18, r2 ;
	sub4 r18, 10000 ;
	# xor
	mov4 r19, r2 ;
	mov4 r21, r2 ;
	or4 r19, 10000 ;
	and4 r21, 10000 ;
	sub4 r19, r21 ;
	# xor
	mov4 r20, r18 ;
	mov4 r22, r18 ;
	or4 r20, r2 ;
	and4 r22, r2 ;
	sub4 r20, r22 ;
	and4 r19, r20 ;
	# xor
	mov4 r20, r18 ;
	mov4 r23, r18 ;
	or4 r20, r19 ;
	and4 r23, r19 ;
	sub4 r20, r23 ;
	sr4 r20, 31 ;
	if4 (r20) goto .BB0 ;
	# emit "&" operands: t8 (k: 5 t: 14), testpair.istr0 (k: 7 t: 18)
	call r24, testpair.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r25, prints, (r24) ;
	# emit "call", print32 (k: 9 t: 19)
	call r26, print32, (r5) ;
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26)>

main {
	# emit "call" operands: r4 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r4, 200 ;
	# emit "call" operands: r7 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r7, 4 ;
	# emit "=" operands: r5 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "jmp" operands:  (k: 150176264 t: -32)
	goto .BB7
.BB6:
	# emit "<<" operands: t2 (k: 5 t: 4), r5 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t3 (k: 5 t: 14), r4 (k: 4 t: 14), t2 (k: 5 t: 4)
	mov4 r8, r4 ;
	add4 r8, r5 * 4 ;
	# emit "call" operands: t5 (k: 5 t: 14), malloc (k: 9 t: 19)
	alloc r9, 4 ;
	# emit "*=" operands: t3 (k: 5 t: 14), t5 (k: 5 t: 14)
	mov4 [r8], r9 ;
	# emit "++" operands: r5 (k: 4 t: 4)
	add4 r5, 1 ;
.BB7:
	# emit "<" operands:  (k: 150175608 t: -104), r5 (k: 4 t: 4), 50 (k: 3 t: 4)
	mov4 r10, r5 ;
	sub4 r10, 50 ;
	# xor
	mov4 r11, r5 ;
	mov4 r13, r5 ;
	or4 r11, 50 ;
	and4 r13, 50 ;
	sub4 r11, r13 ;
	# xor
	mov4 r12, r10 ;
	mov4 r14, r10 ;
	or4 r12, r5 ;
	and4 r14, r5 ;
	sub4 r12, r14 ;
	and4 r11, r12 ;
	# xor
	mov4 r12, r10 ;
	mov4 r15, r10 ;
	or4 r12, r11 ;
	and4 r15, r11 ;
	sub4 r12, r15 ;
	sr4 r12, 31 ;
	if4 (r12) goto .BB6 ;
	# emit "call" operands: r3 (k: 4 t: 14), Initialize (k: 9 t: 19)
	call r3, Initialize, () ;
	# emit "=" operands: r5 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "=" operands: r6 (k: 4 t: 4), 25 (k: 3 t: 4)
	mov4 r6, 25 ;
	# emit "jmp" operands:  (k: 150178056 t: 56)
	goto .BB9
.BB8:
	# emit "+" operands: t10 (k: 5 t: 4), r6 (k: 4 t: 4), 50 (k: 3 t: 4)
	mov4 r16, r6 ;
	add4 r16, 50 ;
	# emit "<<" operands: t11 (k: 5 t: 4), r6 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t12 (k: 5 t: 14), r4 (k: 4 t: 14), t11 (k: 5 t: 4)
	mov4 r17, r4 ;
	add4 r17, r6 * 4 ;
	# emit "*" operands: t13 (k: 5 t: 14), t12 (k: 5 t: 14)
	mov4 r18, [r17] ;
	# emit "call" operands: r3 (k: 4 t: 14), Insert (k: 9 t: 19)
	call r3, Insert, (r16, r3, r18) ;
	# emit "++" operands: r5 (k: 4 t: 4)
	add4 r5, 1 ;
	# emit "+" operands: t17 (k: 5 t: 4), r6 (k: 4 t: 4), 71 (k: 3 t: 4)
	mov4 r19, r6 ;
	add4 r19, 71 ;
	# emit "%" operands: t18 (k: 5 t: 4), t17 (k: 5 t: 4), 50 (k: 3 t: 4)
	mov4 r21, r19 ;
	div4 r21, 50 ;
	mul4 r21, 50 ;
	mov4 r20, r19 ;
	sub4 r20, r21 ;
	# emit "=" operands: r6 (k: 4 t: 4), t18 (k: 5 t: 4)
	mov4 r6, r20 ;
.BB9:
	# emit "<" operands:  (k: 150176480 t: -104), r5 (k: 4 t: 4), 50 (k: 3 t: 4)
	mov4 r22, r5 ;
	sub4 r22, 50 ;
	# xor
	mov4 r23, r5 ;
	mov4 r25, r5 ;
	or4 r23, 50 ;
	and4 r25, 50 ;
	sub4 r23, r25 ;
	# xor
	mov4 r24, r22 ;
	mov4 r26, r22 ;
	or4 r24, r5 ;
	and4 r26, r5 ;
	sub4 r24, r26 ;
	and4 r23, r24 ;
	# xor
	mov4 r24, r22 ;
	mov4 r27, r22 ;
	or4 r24, r23 ;
	and4 r27, r23 ;
	sub4 r24, r27 ;
	sr4 r24, 31 ;
	if4 (r24) goto .BB8 ;
	# emit "&" operands: t19 (k: 5 t: 14), testpair.istr1 (k: 7 t: 18)
	call r28, testpair.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r29, prints, (r28) ;
	# emit "=" operands: r5 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "=" operands: r6 (k: 4 t: 4), 25 (k: 3 t: 4)
	mov4 r6, 25 ;
	# emit "jmp" operands:  (k: 150180392 t: 0)
	goto .BB11
.BB10:
	# emit "<<" operands: t21 (k: 5 t: 4), r6 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t22 (k: 5 t: 14), r4 (k: 4 t: 14), t21 (k: 5 t: 4)
	mov4 r30, r4 ;
	add4 r30, r6 * 4 ;
	# emit "*" operands: t23 (k: 5 t: 14), t22 (k: 5 t: 14)
	mov4 r31, [r30] ;
	# emit "*" operands: t24 (k: 5 t: 14), t23 (k: 5 t: 14)
	mov4 r32, [r31] ;
	# emit "call" operands: r3 (k: 4 t: 14), DecreaseKey (k: 9 t: 19)
	mov4 r33, 50 ;
	call r3, DecreaseKey, (r32, r33, r3) ;
	# emit "++" operands: r5 (k: 4 t: 4)
	add4 r5, 1 ;
	# emit "+" operands: t28 (k: 5 t: 4), r6 (k: 4 t: 4), 51 (k: 3 t: 4)
	mov4 r34, r6 ;
	add4 r34, 51 ;
	# emit "%" operands: t29 (k: 5 t: 4), t28 (k: 5 t: 4), 50 (k: 3 t: 4)
	mov4 r36, r34 ;
	div4 r36, 50 ;
	mul4 r36, 50 ;
	mov4 r35, r34 ;
	sub4 r35, r36 ;
	# emit "=" operands: r6 (k: 4 t: 4), t29 (k: 5 t: 4)
	mov4 r6, r35 ;
.BB11:
	# emit "<" operands:  (k: 150178360 t: -72), r5 (k: 4 t: 4), 50 (k: 3 t: 4)
	mov4 r37, r5 ;
	sub4 r37, 50 ;
	# xor
	mov4 r38, r5 ;
	mov4 r40, r5 ;
	or4 r38, 50 ;
	and4 r40, 50 ;
	sub4 r38, r40 ;
	# xor
	mov4 r39, r37 ;
	mov4 r41, r37 ;
	or4 r39, r5 ;
	and4 r41, r5 ;
	sub4 r39, r41 ;
	and4 r38, r39 ;
	# xor
	mov4 r39, r37 ;
	mov4 r42, r37 ;
	or4 r39, r38 ;
	and4 r42, r38 ;
	sub4 r39, r42 ;
	sr4 r39, 31 ;
	if4 (r39) goto .BB10 ;
	# emit "=" operands: r6 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r6, 0 ;
	# emit "jmp" operands:  (k: 150182672 t: 56)
	goto .BB13
.BB12:
	# emit "call" operands: r3 (k: 4 t: 14), DeleteMin (k: 9 t: 19)
	call r3, DeleteMin, (r7, r3) ;
	# emit "*" operands: t31 (k: 5 t: 4), r7 (k: 4 t: 14)
	mov4 r43, [r7] ;
	# emit "=" operands: t32 (k: 5 t: 4), r6 (k: 4 t: 4)
	mov4 r44, r6 ;
	# emit "++" operands: r6 (k: 4 t: 4)
	add4 r6, 1 ;
	# emit "==" operands:  (k: 150182672 t: 56), t31 (k: 5 t: 4), t32 (k: 5 t: 4)
	eq4 r45, r43, r44 ;
	if4 (r45) goto .BB13 ;
	# emit "&" operands: t34 (k: 5 t: 14), testpair.istr2 (k: 7 t: 18)
	call r46, testpair.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r47, prints, (r46) ;
	# emit "call", print32 (k: 9 t: 19)
	call r48, print32, (r6) ;
	# emit "&" operands: t37 (k: 5 t: 14), testpair.istr3 (k: 7 t: 18)
	call r49, testpair.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r50, prints, (r49) ;
.BB13:
	# emit "call" operands: t39 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r51, IsEmpty, (r3) ;
	# emit "" operands:  (k: 150180608 t: -16), t39 (k: 5 t: 4)
	mov4 r52, r51 ;
	sub4 r52, 1 ;
	# ~x
	mov4 r53, r51 ;
	mul4 r53, -1 ;
	add4 r53, -1 ;
	and4 r52, r53 ;
	sr4 r52, 31 ;
	if4 (r52) goto .BB12 ;
	# emit "&" operands: t40 (k: 5 t: 14), testpair.istr4 (k: 7 t: 18)
	call r54, testpair.istr4, () ;
	# emit "call", prints (k: 9 t: 19)
	call r55, prints, (r54) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55)>

