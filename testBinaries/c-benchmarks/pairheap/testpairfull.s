# Code auto-generated by MinxCC

testpair.istr0 {
	mov4 r1, 17 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 68 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 103 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testpair.istr1 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 68 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 103 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testpair.istr2 {
	mov4 r1, 21 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 68 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 77 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 44 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testpair.istr3 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

testpair.istr4 {
	mov4 r1, 9 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 68 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 46 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 46 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 46 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




sleep {
	# emit "=" operands: r2 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r2, 0 ;
	# emit "jmp" operands:  (k: 150167832 t: -88)
	goto .BB5
.BB0:
	# emit "=" operands: r3 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r3, 0 ;
	# emit "jmp" operands:  (k: 150168256 t: 24)
	goto .BB4
.BB1:
	# emit "=" operands: r4 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r4, 0 ;
	# emit "jmp" operands:  (k: 150168552 t: -64)
	goto .BB3
.BB2:
	# emit "++" operands: r5 (k: 4 t: 4)
	add4 r5, 1 ;
	# emit "++" operands: r4 (k: 4 t: 4)
	add4 r4, 1 ;
.BB3:
	# emit "<" operands:  (k: 150168184 t: 120), r4 (k: 4 t: 4), r1 (k: 4 t: 4)
	mov4 r6, r4 ;
	sub4 r6, r1 ;
	# xor
	mov4 r7, r4 ;
	mov4 r9, r4 ;
	or4 r7, r1 ;
	and4 r9, r1 ;
	sub4 r7, r9 ;
	# xor
	mov4 r8, r6 ;
	mov4 r10, r6 ;
	or4 r8, r4 ;
	and4 r10, r4 ;
	sub4 r8, r10 ;
	and4 r7, r8 ;
	# xor
	mov4 r8, r6 ;
	mov4 r11, r6 ;
	or4 r8, r7 ;
	and4 r11, r7 ;
	sub4 r8, r11 ;
	sr4 r8, 31 ;
	if4 (r8) goto .BB2 ;
	# emit "++" operands: r3 (k: 4 t: 4)
	add4 r3, 1 ;
.BB4:
	# emit "<" operands:  (k: 150167760 t: 120), r3 (k: 4 t: 4), 1000 (k: 3 t: 4)
	mov4 r12, r3 ;
	sub4 r12, 1000 ;
	# xor
	mov4 r13, r3 ;
	mov4 r15, r3 ;
	or4 r13, 1000 ;
	and4 r15, 1000 ;
	sub4 r13, r15 ;
	# xor
	mov4 r14, r12 ;
	mov4 r16, r12 ;
	or4 r14, r3 ;
	and4 r16, r3 ;
	sub4 r14, r16 ;
	and4 r13, r14 ;
	# xor
	mov4 r14, r12 ;
	mov4 r17, r12 ;
	or4 r14, r13 ;
	and4 r17, r13 ;
	sub4 r14, r17 ;
	sr4 r14, 31 ;
	if4 (r14) goto .BB1 ;
	# emit "++" operands: r2 (k: 4 t: 4)
	add4 r2, 1 ;
.BB5:
	# emit "<" operands:  (k: 150167616 t: 8), r2 (k: 4 t: 4), 10000 (k: 3 t: 4)
	mov4 r18, r2 ;
	sub4 r18, 10000 ;
	# xor
	mov4 r19, r2 ;
	mov4 r21, r2 ;
	or4 r19, 10000 ;
	and4 r21, 10000 ;
	sub4 r19, r21 ;
	# xor
	mov4 r20, r18 ;
	mov4 r22, r18 ;
	or4 r20, r2 ;
	and4 r22, r2 ;
	sub4 r20, r22 ;
	and4 r19, r20 ;
	# xor
	mov4 r20, r18 ;
	mov4 r23, r18 ;
	or4 r20, r19 ;
	and4 r23, r19 ;
	sub4 r20, r23 ;
	sr4 r20, 31 ;
	if4 (r20) goto .BB0 ;
	# emit "&" operands: t8 (k: 5 t: 14), testpair.istr0 (k: 7 t: 18)
	call r24, testpair.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r25, prints, (r24) ;
	# emit "call", print32 (k: 9 t: 19)
	call r26, print32, (r5) ;
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26)>

main {
	# emit "call" operands: r4 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r4, 200 ;
	# emit "call" operands: r7 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r7, 4 ;
	# emit "=" operands: r5 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "jmp" operands:  (k: 150176264 t: -32)
	goto .BB7
.BB6:
	# emit "<<" operands: t2 (k: 5 t: 4), r5 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t3 (k: 5 t: 14), r4 (k: 4 t: 14), t2 (k: 5 t: 4)
	mov4 r8, r4 ;
	add4 r8, r5 * 4 ;
	# emit "call" operands: t5 (k: 5 t: 14), malloc (k: 9 t: 19)
	alloc r9, 4 ;
	# emit "*=" operands: t3 (k: 5 t: 14), t5 (k: 5 t: 14)
	mov4 [r8], r9 ;
	# emit "++" operands: r5 (k: 4 t: 4)
	add4 r5, 1 ;
.BB7:
	# emit "<" operands:  (k: 150175608 t: -104), r5 (k: 4 t: 4), 50 (k: 3 t: 4)
	mov4 r10, r5 ;
	sub4 r10, 50 ;
	# xor
	mov4 r11, r5 ;
	mov4 r13, r5 ;
	or4 r11, 50 ;
	and4 r13, 50 ;
	sub4 r11, r13 ;
	# xor
	mov4 r12, r10 ;
	mov4 r14, r10 ;
	or4 r12, r5 ;
	and4 r14, r5 ;
	sub4 r12, r14 ;
	and4 r11, r12 ;
	# xor
	mov4 r12, r10 ;
	mov4 r15, r10 ;
	or4 r12, r11 ;
	and4 r15, r11 ;
	sub4 r12, r15 ;
	sr4 r12, 31 ;
	if4 (r12) goto .BB6 ;
	# emit "call" operands: r3 (k: 4 t: 14), Initialize (k: 9 t: 19)
	call r3, Initialize, () ;
	# emit "=" operands: r5 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "=" operands: r6 (k: 4 t: 4), 25 (k: 3 t: 4)
	mov4 r6, 25 ;
	# emit "jmp" operands:  (k: 150178056 t: 56)
	goto .BB9
.BB8:
	# emit "+" operands: t10 (k: 5 t: 4), r6 (k: 4 t: 4), 50 (k: 3 t: 4)
	mov4 r16, r6 ;
	add4 r16, 50 ;
	# emit "<<" operands: t11 (k: 5 t: 4), r6 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t12 (k: 5 t: 14), r4 (k: 4 t: 14), t11 (k: 5 t: 4)
	mov4 r17, r4 ;
	add4 r17, r6 * 4 ;
	# emit "*" operands: t13 (k: 5 t: 14), t12 (k: 5 t: 14)
	mov4 r18, [r17] ;
	# emit "call" operands: r3 (k: 4 t: 14), Insert (k: 9 t: 19)
	call r3, Insert, (r16, r3, r18) ;
	# emit "++" operands: r5 (k: 4 t: 4)
	add4 r5, 1 ;
	# emit "+" operands: t17 (k: 5 t: 4), r6 (k: 4 t: 4), 71 (k: 3 t: 4)
	mov4 r19, r6 ;
	add4 r19, 71 ;
	# emit "%" operands: t18 (k: 5 t: 4), t17 (k: 5 t: 4), 50 (k: 3 t: 4)
	mov4 r21, r19 ;
	div4 r21, 50 ;
	mul4 r21, 50 ;
	mov4 r20, r19 ;
	sub4 r20, r21 ;
	# emit "=" operands: r6 (k: 4 t: 4), t18 (k: 5 t: 4)
	mov4 r6, r20 ;
.BB9:
	# emit "<" operands:  (k: 150176480 t: -104), r5 (k: 4 t: 4), 50 (k: 3 t: 4)
	mov4 r22, r5 ;
	sub4 r22, 50 ;
	# xor
	mov4 r23, r5 ;
	mov4 r25, r5 ;
	or4 r23, 50 ;
	and4 r25, 50 ;
	sub4 r23, r25 ;
	# xor
	mov4 r24, r22 ;
	mov4 r26, r22 ;
	or4 r24, r5 ;
	and4 r26, r5 ;
	sub4 r24, r26 ;
	and4 r23, r24 ;
	# xor
	mov4 r24, r22 ;
	mov4 r27, r22 ;
	or4 r24, r23 ;
	and4 r27, r23 ;
	sub4 r24, r27 ;
	sr4 r24, 31 ;
	if4 (r24) goto .BB8 ;
	# emit "&" operands: t19 (k: 5 t: 14), testpair.istr1 (k: 7 t: 18)
	call r28, testpair.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r29, prints, (r28) ;
	# emit "=" operands: r5 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "=" operands: r6 (k: 4 t: 4), 25 (k: 3 t: 4)
	mov4 r6, 25 ;
	# emit "jmp" operands:  (k: 150180392 t: 0)
	goto .BB11
.BB10:
	# emit "<<" operands: t21 (k: 5 t: 4), r6 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t22 (k: 5 t: 14), r4 (k: 4 t: 14), t21 (k: 5 t: 4)
	mov4 r30, r4 ;
	add4 r30, r6 * 4 ;
	# emit "*" operands: t23 (k: 5 t: 14), t22 (k: 5 t: 14)
	mov4 r31, [r30] ;
	# emit "*" operands: t24 (k: 5 t: 14), t23 (k: 5 t: 14)
	mov4 r32, [r31] ;
	# emit "call" operands: r3 (k: 4 t: 14), DecreaseKey (k: 9 t: 19)
	mov4 r33, 50 ;
	call r3, DecreaseKey, (r32, r33, r3) ;
	# emit "++" operands: r5 (k: 4 t: 4)
	add4 r5, 1 ;
	# emit "+" operands: t28 (k: 5 t: 4), r6 (k: 4 t: 4), 51 (k: 3 t: 4)
	mov4 r34, r6 ;
	add4 r34, 51 ;
	# emit "%" operands: t29 (k: 5 t: 4), t28 (k: 5 t: 4), 50 (k: 3 t: 4)
	mov4 r36, r34 ;
	div4 r36, 50 ;
	mul4 r36, 50 ;
	mov4 r35, r34 ;
	sub4 r35, r36 ;
	# emit "=" operands: r6 (k: 4 t: 4), t29 (k: 5 t: 4)
	mov4 r6, r35 ;
.BB11:
	# emit "<" operands:  (k: 150178360 t: -72), r5 (k: 4 t: 4), 50 (k: 3 t: 4)
	mov4 r37, r5 ;
	sub4 r37, 50 ;
	# xor
	mov4 r38, r5 ;
	mov4 r40, r5 ;
	or4 r38, 50 ;
	and4 r40, 50 ;
	sub4 r38, r40 ;
	# xor
	mov4 r39, r37 ;
	mov4 r41, r37 ;
	or4 r39, r5 ;
	and4 r41, r5 ;
	sub4 r39, r41 ;
	and4 r38, r39 ;
	# xor
	mov4 r39, r37 ;
	mov4 r42, r37 ;
	or4 r39, r38 ;
	and4 r42, r38 ;
	sub4 r39, r42 ;
	sr4 r39, 31 ;
	if4 (r39) goto .BB10 ;
	# emit "=" operands: r6 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r6, 0 ;
	# emit "jmp" operands:  (k: 150182672 t: 56)
	goto .BB13
.BB12:
	# emit "call" operands: r3 (k: 4 t: 14), DeleteMin (k: 9 t: 19)
	call r3, DeleteMin, (r7, r3) ;
	# emit "*" operands: t31 (k: 5 t: 4), r7 (k: 4 t: 14)
	mov4 r43, [r7] ;
	# emit "=" operands: t32 (k: 5 t: 4), r6 (k: 4 t: 4)
	mov4 r44, r6 ;
	# emit "++" operands: r6 (k: 4 t: 4)
	add4 r6, 1 ;
	# emit "==" operands:  (k: 150182672 t: 56), t31 (k: 5 t: 4), t32 (k: 5 t: 4)
	eq4 r45, r43, r44 ;
	if4 (r45) goto .BB13 ;
	# emit "&" operands: t34 (k: 5 t: 14), testpair.istr2 (k: 7 t: 18)
	call r46, testpair.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r47, prints, (r46) ;
	# emit "call", print32 (k: 9 t: 19)
	call r48, print32, (r6) ;
	# emit "&" operands: t37 (k: 5 t: 14), testpair.istr3 (k: 7 t: 18)
	call r49, testpair.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r50, prints, (r49) ;
.BB13:
	# emit "call" operands: t39 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r51, IsEmpty, (r3) ;
	# emit "" operands:  (k: 150180608 t: -16), t39 (k: 5 t: 4)
	mov4 r52, r51 ;
	sub4 r52, 1 ;
	# ~x
	mov4 r53, r51 ;
	mul4 r53, -1 ;
	add4 r53, -1 ;
	and4 r52, r53 ;
	sr4 r52, 31 ;
	if4 (r52) goto .BB12 ;
	# emit "&" operands: t40 (k: 5 t: 14), testpair.istr4 (k: 7 t: 18)
	call r54, testpair.istr4, () ;
	# emit "call", prints (k: 9 t: 19)
	call r55, prints, (r54) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55)>

# Code auto-generated by MinxCC

pairheap.istr0 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

pairheap.istr1 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

pairheap.istr2 {
	mov4 r1, 39 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 68 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 75 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 100 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 119 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 104 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 103 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 118 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 68 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

pairheap.istr3 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

pairheap.istr4 {
	mov4 r1, 23 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 80 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 110 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 103 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 104 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

pairheap.istr5 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

pairheap.istr6 {
	mov4 r1, 24 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 80 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 114 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 81 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

pairheap.istr7 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




Initialize {
	# emit "ret" operands: 0 (k: 3 t: 14)
	mov4 r0, 0 ;
	ret
} <(), r0, ()>

MakeEmpty {
	# emit "==", r1 (k: 4 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r1) goto .BB30 ;
	mov4 r2, 1 ;
	goto .BB31
.BB30:
	mov4 r2, 0 ;
.BB31:
	if4 (r2) goto .BB0 ;
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r3, [r1 + 4] ;
	# emit "call", MakeEmpty (k: 9 t: 19)
	call r4, MakeEmpty, (r3) ;
	# emit "+" operands: t3 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t4 (k: 5 t: 14), t3 (k: 5 t: 14)
	mov4 r5, [r1 + 8] ;
	# emit "call", MakeEmpty (k: 9 t: 19)
	call r6, MakeEmpty, (r5) ;
.BB0:
	# emit "ret" operands: 0 (k: 3 t: 14)
	mov4 r0, 0 ;
	ret
} <(r1), r0, (r2, r3, r4, r5, r6)>

Insert {
	# emit "call" operands: r4 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r4, 16 ;
	# emit "!=" operands:  (k: 158459512 t: -96), r4 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r4) goto .BB1 ;
	# emit "&" operands: t1 (k: 5 t: 14), pairheap.istr0 (k: 7 t: 18)
	call r5, pairheap.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r6, prints, (r5) ;
	# emit "&" operands: t3 (k: 5 t: 14), pairheap.istr1 (k: 7 t: 18)
	call r7, pairheap.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r8, prints, (r7) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r10, 1 ;
	call r9, mincexit, (r10) ;
.BB1:
	# emit "*=" operands: r4 (k: 4 t: 14), r1 (k: 4 t: 4)
	mov4 [r4], r1 ;
	# emit "+" operands: t8 (k: 5 t: 14), r4 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "+" operands: t10 (k: 5 t: 14), r4 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*=" operands: t10 (k: 5 t: 14), 0 (k: 3 t: 14)
	mov4 r11, 0 ;
	mov4 [r4 + 8], r11 ;
	# emit "*" operands: t12 (k: 5 t: 14), t10 (k: 5 t: 14)
	mov4 r12, [r4 + 8] ;
	# emit "*=" operands: t8 (k: 5 t: 14), t12 (k: 5 t: 14)
	mov4 [r4 + 4], r12 ;
	# emit "+" operands: t14 (k: 5 t: 14), r4 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*=" operands: t14 (k: 5 t: 14), 0 (k: 3 t: 14)
	mov4 r13, 0 ;
	mov4 [r4 + 12], r13 ;
	# emit "*=" operands: r3 (k: 4 t: 14), r4 (k: 4 t: 14)
	mov4 [r3], r4 ;
	# emit "!=" operands:  (k: 158462912 t: -24), r2 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r2) goto .BB2 ;
	# emit "ret" operands: r4 (k: 4 t: 14)
	mov4 r0, r4 ;
	# emit "jmp"
	goto .BB3
.BB2:
	# emit "call" operands: t19 (k: 5 t: 14), CompareAndLink (k: 9 t: 19)
	call r14, CompareAndLink, (r2, r4) ;
	# emit "ret" operands: t19 (k: 5 t: 14)
	mov4 r0, r14 ;
.BB3:
	ret
} <(r1, r2, r3), r0, (r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14)>

DecreaseKey {
	# emit ">=" operands:  (k: 158463792 t: -64), r2 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r4, r2 ;
	sub4 r4, 0 ;
	# ~x
	mul4 r4, -1 ;
	add4 r4, -1 ;
	# xor
	mov4 r5, 0 ;
	mov4 r6, 0 ;
	or4 r5, r2 ;
	and4 r6, r2 ;
	sub4 r5, r6 ;
	or4 r5, r4 ;
	# ~x
	mov4 r4, r2 ;
	mul4 r4, -1 ;
	add4 r4, -1 ;
	or4 r4, 0 ;
	and4 r4, r5 ;
	sr4 r4, 31 ;
	if4 (r4) goto .BB4 ;
	# emit "&" operands: t0 (k: 5 t: 14), pairheap.istr2 (k: 7 t: 18)
	call r7, pairheap.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r8, prints, (r7) ;
	# emit "&" operands: t2 (k: 5 t: 14), pairheap.istr3 (k: 7 t: 18)
	call r9, pairheap.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r10, prints, (r9) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r12, 1 ;
	call r11, mincexit, (r12) ;
.BB4:
	# emit "*" operands: t5 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r13, [r1] ;
	# emit "-" operands: t6 (k: 5 t: 4), t5 (k: 5 t: 4), r2 (k: 4 t: 4)
	mov4 r14, r13 ;
	sub4 r14, r2 ;
	# emit "*=" operands: r1 (k: 4 t: 14), t6 (k: 5 t: 4)
	mov4 [r1], r14 ;
	# emit "!=" operands:  (k: 158465216 t: 120), r1 (k: 4 t: 14), r3 (k: 4 t: 14)
	eq4 r15, r1, r3 ;
	# outputjz
	if4 (r15) goto .BB32 ;
	mov4 r16, 1 ;
	goto .BB33
.BB32:
	mov4 r16, 0 ;
.BB33:
	if4 (r16) goto .BB5 ;
	# emit "ret" operands: r3 (k: 4 t: 14)
	mov4 r0, r3 ;
	# emit "jmp"
	goto .BB9
.BB5:
	# emit "+" operands: t8 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t9 (k: 5 t: 14), t8 (k: 5 t: 14)
	mov4 r17, [r1 + 8] ;
	# emit "==" operands:  (k: 158469752 t: 16), t9 (k: 5 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r17) goto .BB34 ;
	mov4 r18, 1 ;
	goto .BB35
.BB34:
	mov4 r18, 0 ;
.BB35:
	if4 (r18) goto .BB6 ;
	# emit "+" operands: t10 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t11 (k: 5 t: 14), t10 (k: 5 t: 14)
	mov4 r19, [r1 + 8] ;
	# emit "+" operands: t12 (k: 5 t: 14), t11 (k: 5 t: 14), 12 (k: 3 t: 4)
	# emit "+" operands: t14 (k: 5 t: 14), r1 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t15 (k: 5 t: 14), t14 (k: 5 t: 14)
	mov4 r20, [r1 + 12] ;
	# emit "*=" operands: t12 (k: 5 t: 14), t15 (k: 5 t: 14)
	mov4 [r19 + 12], r20 ;
.BB6:
	# emit "+" operands: t17 (k: 5 t: 14), r1 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t18 (k: 5 t: 14), t17 (k: 5 t: 14)
	mov4 r21, [r1 + 12] ;
	# emit "+" operands: t19 (k: 5 t: 14), t18 (k: 5 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t20 (k: 5 t: 14), t19 (k: 5 t: 14)
	mov4 r22, [r21 + 4] ;
	# emit "!=" operands:  (k: 158471184 t: -56), t20 (k: 5 t: 14), r1 (k: 4 t: 14)
	eq4 r23, r22, r1 ;
	# outputjz
	if4 (r23) goto .BB36 ;
	mov4 r24, 1 ;
	goto .BB37
.BB36:
	mov4 r24, 0 ;
.BB37:
	if4 (r24) goto .BB7 ;
	# emit "+" operands: t21 (k: 5 t: 14), r1 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t22 (k: 5 t: 14), t21 (k: 5 t: 14)
	mov4 r25, [r1 + 12] ;
	# emit "+" operands: t23 (k: 5 t: 14), t22 (k: 5 t: 14), 4 (k: 3 t: 4)
	# emit "+" operands: t25 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t26 (k: 5 t: 14), t25 (k: 5 t: 14)
	mov4 r26, [r1 + 8] ;
	# emit "*=" operands: t23 (k: 5 t: 14), t26 (k: 5 t: 14)
	mov4 [r25 + 4], r26 ;
	# emit "jmp" operands:  (k: 158471256 t: -96)
	goto .BB8
.BB7:
	# emit "+" operands: t28 (k: 5 t: 14), r1 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t29 (k: 5 t: 14), t28 (k: 5 t: 14)
	mov4 r27, [r1 + 12] ;
	# emit "+" operands: t30 (k: 5 t: 14), t29 (k: 5 t: 14), 8 (k: 3 t: 4)
	# emit "+" operands: t32 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t33 (k: 5 t: 14), t32 (k: 5 t: 14)
	mov4 r28, [r1 + 8] ;
	# emit "*=" operands: t30 (k: 5 t: 14), t33 (k: 5 t: 14)
	mov4 [r27 + 8], r28 ;
.BB8:
	# emit "+" operands: t35 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*=" operands: t35 (k: 5 t: 14), 0 (k: 3 t: 14)
	mov4 r29, 0 ;
	mov4 [r1 + 8], r29 ;
	# emit "call" operands: t38 (k: 5 t: 14), CompareAndLink (k: 9 t: 19)
	call r30, CompareAndLink, (r3, r1) ;
	# emit "ret" operands: t38 (k: 5 t: 14)
	mov4 r0, r30 ;
.BB9:
	ret
} <(r1, r2, r3), r0, (r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30)>

DeleteMin {
	# emit "=" operands: r3 (k: 4 t: 14), 0 (k: 3 t: 14)
	mov4 r3, 0 ;
	# emit "call" operands: t0 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r4, IsEmpty, (r2) ;
	# emit "" operands:  (k: 158475248 t: -88), t0 (k: 5 t: 4)
	mov4 r5, r4 ;
	sub4 r5, 1 ;
	# ~x
	mov4 r6, r4 ;
	mul4 r6, -1 ;
	add4 r6, -1 ;
	and4 r5, r6 ;
	sr4 r5, 31 ;
	if4 (r5) goto .BB10 ;
	# emit "&" operands: t1 (k: 5 t: 14), pairheap.istr4 (k: 7 t: 18)
	call r7, pairheap.istr4, () ;
	# emit "call", prints (k: 9 t: 19)
	call r8, prints, (r7) ;
	# emit "&" operands: t3 (k: 5 t: 14), pairheap.istr5 (k: 7 t: 18)
	call r9, pairheap.istr5, () ;
	# emit "call", prints (k: 9 t: 19)
	call r10, prints, (r9) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r12, 1 ;
	call r11, mincexit, (r12) ;
	# emit "jmp"
	goto .BB11
.BB10:
	# emit "*" operands: t7 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r13, [r2] ;
	# emit "*=" operands: r1 (k: 4 t: 14), t7 (k: 5 t: 4)
	mov4 [r1], r13 ;
	# emit "+" operands: t9 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t10 (k: 5 t: 14), t9 (k: 5 t: 14)
	mov4 r14, [r2 + 4] ;
	# emit "==", t10 (k: 5 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r14) goto .BB38 ;
	mov4 r15, 1 ;
	goto .BB39
.BB38:
	mov4 r15, 0 ;
.BB39:
	if4 (r15) goto .BB11 ;
	# emit "+" operands: t11 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t12 (k: 5 t: 14), t11 (k: 5 t: 14)
	mov4 r16, [r2 + 4] ;
	# emit "call" operands: r3 (k: 4 t: 14), CombineSiblings (k: 9 t: 19)
	call r3, CombineSiblings, (r16) ;
.BB11:
	# emit "ret" operands: r3 (k: 4 t: 14)
	mov4 r0, r3 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16)>

CompareAndLink {
	# emit "!=" operands:  (k: 158478752 t: 96), r2 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r2) goto .BB12 ;
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	# emit "jmp"
	goto .BB17
.BB12:
	# emit "*" operands: t0 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r3, [r1] ;
	# emit "*" operands: t1 (k: 5 t: 4), r2 (k: 4 t: 14)
	mov4 r4, [r2] ;
	# emit ">" operands:  (k: 158483824 t: -80), t0 (k: 5 t: 4), t1 (k: 5 t: 4)
	mov4 r5, r4 ;
	sub4 r5, r3 ;
	# xor
	mov4 r6, r4 ;
	mov4 r8, r4 ;
	or4 r6, r3 ;
	and4 r8, r3 ;
	sub4 r6, r8 ;
	# xor
	mov4 r7, r5 ;
	mov4 r9, r5 ;
	or4 r7, r4 ;
	and4 r9, r4 ;
	sub4 r7, r9 ;
	and4 r6, r7 ;
	# xor
	mov4 r7, r5 ;
	mov4 r10, r5 ;
	or4 r7, r6 ;
	and4 r10, r6 ;
	sub4 r7, r10 ;
	sr4 r7, 31 ;
	if4 (r7) goto .BB15 ;
	# emit "+" operands: t2 (k: 5 t: 14), r2 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*=" operands: t2 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 [r2 + 12], r1 ;
	# emit "+" operands: t5 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "+" operands: t7 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t8 (k: 5 t: 14), t7 (k: 5 t: 14)
	mov4 r11, [r2 + 8] ;
	# emit "*=" operands: t5 (k: 5 t: 14), t8 (k: 5 t: 14)
	mov4 [r1 + 8], r11 ;
	# emit "*" operands: t10 (k: 5 t: 14), t5 (k: 5 t: 14)
	mov4 r12, [r1 + 8] ;
	# emit "==" operands:  (k: 158480608 t: -72), t10 (k: 5 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r12) goto .BB40 ;
	mov4 r13, 1 ;
	goto .BB41
.BB40:
	mov4 r13, 0 ;
.BB41:
	if4 (r13) goto .BB13 ;
	# emit "+" operands: t11 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t12 (k: 5 t: 14), t11 (k: 5 t: 14)
	mov4 r14, [r1 + 8] ;
	# emit "+" operands: t13 (k: 5 t: 14), t12 (k: 5 t: 14), 12 (k: 3 t: 4)
	# emit "*=" operands: t13 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 [r14 + 12], r1 ;
.BB13:
	# emit "+" operands: t16 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "+" operands: t18 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t19 (k: 5 t: 14), t18 (k: 5 t: 14)
	mov4 r15, [r1 + 4] ;
	# emit "*=" operands: t16 (k: 5 t: 14), t19 (k: 5 t: 14)
	mov4 [r2 + 8], r15 ;
	# emit "*" operands: t21 (k: 5 t: 14), t16 (k: 5 t: 14)
	mov4 r16, [r2 + 8] ;
	# emit "==" operands:  (k: 158482360 t: -16), t21 (k: 5 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r16) goto .BB42 ;
	mov4 r17, 1 ;
	goto .BB43
.BB42:
	mov4 r17, 0 ;
.BB43:
	if4 (r17) goto .BB14 ;
	# emit "+" operands: t22 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t23 (k: 5 t: 14), t22 (k: 5 t: 14)
	mov4 r18, [r2 + 8] ;
	# emit "+" operands: t24 (k: 5 t: 14), t23 (k: 5 t: 14), 12 (k: 3 t: 4)
	# emit "*=" operands: t24 (k: 5 t: 14), r2 (k: 4 t: 14)
	mov4 [r18 + 12], r2 ;
.BB14:
	# emit "+" operands: t27 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*=" operands: t27 (k: 5 t: 14), r2 (k: 4 t: 14)
	mov4 [r1 + 4], r2 ;
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	# emit "jmp"
	goto .BB17
.BB15:
	# emit "+" operands: t30 (k: 5 t: 14), r2 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "+" operands: t32 (k: 5 t: 14), r1 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t33 (k: 5 t: 14), t32 (k: 5 t: 14)
	mov4 r19, [r1 + 12] ;
	# emit "*=" operands: t30 (k: 5 t: 14), t33 (k: 5 t: 14)
	mov4 [r2 + 12], r19 ;
	# emit "*=" operands: t32 (k: 5 t: 14), r2 (k: 4 t: 14)
	mov4 [r1 + 12], r2 ;
	# emit "+" operands: t37 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "+" operands: t39 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t40 (k: 5 t: 14), t39 (k: 5 t: 14)
	mov4 r20, [r2 + 4] ;
	# emit "*=" operands: t37 (k: 5 t: 14), t40 (k: 5 t: 14)
	mov4 [r1 + 8], r20 ;
	# emit "*" operands: t42 (k: 5 t: 14), t37 (k: 5 t: 14)
	mov4 r21, [r1 + 8] ;
	# emit "==" operands:  (k: 158485680 t: -16), t42 (k: 5 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r21) goto .BB44 ;
	mov4 r22, 1 ;
	goto .BB45
.BB44:
	mov4 r22, 0 ;
.BB45:
	if4 (r22) goto .BB16 ;
	# emit "+" operands: t43 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t44 (k: 5 t: 14), t43 (k: 5 t: 14)
	mov4 r23, [r1 + 8] ;
	# emit "+" operands: t45 (k: 5 t: 14), t44 (k: 5 t: 14), 12 (k: 3 t: 4)
	# emit "*=" operands: t45 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 [r23 + 12], r1 ;
.BB16:
	# emit "+" operands: t48 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*=" operands: t48 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 [r2 + 4], r1 ;
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
.BB17:
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23)>

CombineSiblingsHelper {
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t1 (k: 5 t: 14), t0 (k: 5 t: 14)
	mov4 r6, [r1 + 8] ;
	# emit "!=" operands:  (k: 158487896 t: 32), t1 (k: 5 t: 14), 0 (k: 3 t: 14)
	if4 (r6) goto .BB18 ;
	# emit "ret" operands: r1 (k: 4 t: 14)
	mov4 r0, r1 ;
	# emit "jmp"
	goto .BB25
.BB18:
	# emit "=" operands: r5 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "jmp" operands:  (k: 158488464 t: 104)
	goto .BB20
.BB19:
	# emit "<<" operands: t2 (k: 5 t: 4), r5 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t3 (k: 5 t: 14), r2 (k: 4 t: 14), t2 (k: 5 t: 4)
	mov4 r7, r2 ;
	add4 r7, r5 * 4 ;
	# emit "*=" operands: t3 (k: 5 t: 14), r1 (k: 4 t: 14)
	mov4 [r7], r1 ;
	# emit "+" operands: t6 (k: 5 t: 14), r1 (k: 4 t: 14), 12 (k: 3 t: 4)
	# emit "*" operands: t7 (k: 5 t: 14), t6 (k: 5 t: 14)
	mov4 r8, [r1 + 12] ;
	# emit "+" operands: t8 (k: 5 t: 14), t7 (k: 5 t: 14), 8 (k: 3 t: 4)
	# emit "*=" operands: t8 (k: 5 t: 14), 0 (k: 3 t: 14)
	mov4 r9, 0 ;
	mov4 [r8 + 8], r9 ;
	# emit "+" operands: t11 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t12 (k: 5 t: 14), t11 (k: 5 t: 14)
	mov4 r10, [r1 + 8] ;
	# emit "=" operands: r1 (k: 4 t: 14), t12 (k: 5 t: 14)
	mov4 r1, r10 ;
	# emit "++" operands: r5 (k: 4 t: 4)
	add4 r5, 1 ;
.BB20:
	# emit "!=" operands:  (k: 158487824 t: 32), r1 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r1) goto .BB19 ;
	# emit "<<" operands: t15 (k: 5 t: 4), r5 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t16 (k: 5 t: 14), r2 (k: 4 t: 14), t15 (k: 5 t: 4)
	mov4 r11, r2 ;
	add4 r11, r5 * 4 ;
	# emit "*=" operands: t16 (k: 5 t: 14), 0 (k: 3 t: 14)
	mov4 r12, 0 ;
	mov4 [r11], r12 ;
	# emit "=" operands: r3 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r3, 0 ;
	# emit "jmp" operands:  (k: 158491416 t: -16)
	goto .BB22
.BB21:
	# emit "<<" operands: t19 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t20 (k: 5 t: 14), r2 (k: 4 t: 14), t19 (k: 5 t: 4)
	mov4 r13, r2 ;
	add4 r13, r3 * 4 ;
	# emit "*" operands: t22 (k: 5 t: 14), t20 (k: 5 t: 14)
	mov4 r14, [r13] ;
	# emit "+" operands: t23 (k: 5 t: 4), r3 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r15, r3 ;
	add4 r15, 1 ;
	# emit "<<" operands: t24 (k: 5 t: 4), t23 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t25 (k: 5 t: 14), r2 (k: 4 t: 14), t24 (k: 5 t: 4)
	mov4 r16, r2 ;
	add4 r16, r15 * 4 ;
	# emit "*" operands: t26 (k: 5 t: 14), t25 (k: 5 t: 14)
	mov4 r17, [r16] ;
	# emit "call" operands: t27 (k: 5 t: 14), CompareAndLink (k: 9 t: 19)
	call r18, CompareAndLink, (r14, r17) ;
	# emit "*=" operands: t20 (k: 5 t: 14), t27 (k: 5 t: 14)
	mov4 [r13], r18 ;
	# emit "+" operands: t29 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	mov4 r19, r3 ;
	add4 r19, 2 ;
	# emit "=" operands: r3 (k: 4 t: 4), t29 (k: 5 t: 4)
	mov4 r3, r19 ;
.BB22:
	# emit "+" operands: t30 (k: 5 t: 4), r3 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r20, r3 ;
	add4 r20, 1 ;
	# emit "<" operands:  (k: 158488680 t: -88), t30 (k: 5 t: 4), r5 (k: 4 t: 4)
	mov4 r21, r20 ;
	sub4 r21, r5 ;
	# xor
	mov4 r22, r20 ;
	mov4 r24, r20 ;
	or4 r22, r5 ;
	and4 r24, r5 ;
	sub4 r22, r24 ;
	# xor
	mov4 r23, r21 ;
	mov4 r25, r21 ;
	or4 r23, r20 ;
	and4 r25, r20 ;
	sub4 r23, r25 ;
	and4 r22, r23 ;
	# xor
	mov4 r23, r21 ;
	mov4 r26, r21 ;
	or4 r23, r22 ;
	and4 r26, r22 ;
	sub4 r23, r26 ;
	sr4 r23, 31 ;
	if4 (r23) goto .BB21 ;
	# emit "+" operands: t31 (k: 5 t: 4), r3 (k: 4 t: 4), -2 (k: 3 t: 4)
	mov4 r27, r3 ;
	add4 r27, -2 ;
	# emit "=" operands: r4 (k: 4 t: 4), t31 (k: 5 t: 4)
	mov4 r4, r27 ;
	# emit "+" operands: t32 (k: 5 t: 4), r5 (k: 4 t: 4), -3 (k: 3 t: 4)
	mov4 r28, r5 ;
	add4 r28, -3 ;
	# emit "!=" operands:  (k: 158495696 t: -88), r4 (k: 4 t: 4), t32 (k: 5 t: 4)
	eq4 r29, r4, r28 ;
	# outputjz
	if4 (r29) goto .BB46 ;
	mov4 r30, 1 ;
	goto .BB47
.BB46:
	mov4 r30, 0 ;
.BB47:
	if4 (r30) goto .BB24 ;
	# emit "<<" operands: t33 (k: 5 t: 4), r4 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t34 (k: 5 t: 14), r2 (k: 4 t: 14), t33 (k: 5 t: 4)
	mov4 r31, r2 ;
	add4 r31, r4 * 4 ;
	# emit "*" operands: t36 (k: 5 t: 14), t34 (k: 5 t: 14)
	mov4 r32, [r31] ;
	# emit "+" operands: t37 (k: 5 t: 4), r4 (k: 4 t: 4), 2 (k: 3 t: 4)
	mov4 r33, r4 ;
	add4 r33, 2 ;
	# emit "<<" operands: t38 (k: 5 t: 4), t37 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t39 (k: 5 t: 14), r2 (k: 4 t: 14), t38 (k: 5 t: 4)
	mov4 r34, r2 ;
	add4 r34, r33 * 4 ;
	# emit "*" operands: t40 (k: 5 t: 14), t39 (k: 5 t: 14)
	mov4 r35, [r34] ;
	# emit "call" operands: t41 (k: 5 t: 14), CompareAndLink (k: 9 t: 19)
	call r36, CompareAndLink, (r32, r35) ;
	# emit "*=" operands: t34 (k: 5 t: 14), t41 (k: 5 t: 14)
	mov4 [r31], r36 ;
	# emit "jmp" operands:  (k: 158495696 t: -88)
	goto .BB24
.BB23:
	# emit "+" operands: t43 (k: 5 t: 4), r4 (k: 4 t: 4), -2 (k: 3 t: 4)
	mov4 r37, r4 ;
	add4 r37, -2 ;
	# emit "<<" operands: t44 (k: 5 t: 4), t43 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t45 (k: 5 t: 14), r2 (k: 4 t: 14), t44 (k: 5 t: 4)
	mov4 r38, r2 ;
	add4 r38, r37 * 4 ;
	# emit "*" operands: t47 (k: 5 t: 14), t45 (k: 5 t: 14)
	mov4 r39, [r38] ;
	# emit "<<" operands: t48 (k: 5 t: 4), r4 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t49 (k: 5 t: 14), r2 (k: 4 t: 14), t48 (k: 5 t: 4)
	mov4 r40, r2 ;
	add4 r40, r4 * 4 ;
	# emit "*" operands: t50 (k: 5 t: 14), t49 (k: 5 t: 14)
	mov4 r41, [r40] ;
	# emit "call" operands: t51 (k: 5 t: 14), CompareAndLink (k: 9 t: 19)
	call r42, CompareAndLink, (r39, r41) ;
	# emit "*=" operands: t45 (k: 5 t: 14), t51 (k: 5 t: 14)
	mov4 [r38], r42 ;
	# emit "+" operands: t53 (k: 5 t: 4), r4 (k: 4 t: 4), -2 (k: 3 t: 4)
	mov4 r43, r4 ;
	add4 r43, -2 ;
	# emit "=" operands: r4 (k: 4 t: 4), t53 (k: 5 t: 4)
	mov4 r4, r43 ;
.BB24:
	# emit ">=" operands:  (k: 158493872 t: 96), r4 (k: 4 t: 4), 2 (k: 3 t: 4)
	mov4 r44, r4 ;
	sub4 r44, 2 ;
	# ~x
	mul4 r44, -1 ;
	add4 r44, -1 ;
	# xor
	mov4 r45, 2 ;
	mov4 r46, 2 ;
	or4 r45, r4 ;
	and4 r46, r4 ;
	sub4 r45, r46 ;
	or4 r45, r44 ;
	# ~x
	mov4 r44, r4 ;
	mul4 r44, -1 ;
	add4 r44, -1 ;
	or4 r44, 2 ;
	and4 r44, r45 ;
	sr4 r44, 31 ;
	if4 (r44) goto .BB23 ;
	# emit "*" operands: t54 (k: 5 t: 14), r2 (k: 4 t: 14)
	mov4 r47, [r2] ;
	# emit "ret" operands: t54 (k: 5 t: 14)
	mov4 r0, r47 ;
.BB25:
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47)>

CombineSiblings {
	# emit "call" operands: r2 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r2, 4000 ;
	# emit "call" operands: t1 (k: 5 t: 14), CombineSiblingsHelper (k: 9 t: 19)
	call r3, CombineSiblingsHelper, (r1, r2) ;
	# emit "ret" operands: t1 (k: 5 t: 14)
	mov4 r0, r3 ;
	ret
} <(r1), r0, (r2, r3)>

FindMin {
	# emit "call" operands: t0 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r2, IsEmpty, (r1) ;
	# emit "!" operands:  (k: 158499464 t: -8), t0 (k: 5 t: 4)
	if4 (r2) goto .BB26 ;
	# emit "*" operands: t1 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r3, [r1] ;
	# emit "ret" operands: t1 (k: 5 t: 4)
	mov4 r0, r3 ;
	# emit "jmp"
	goto .BB27
.BB26:
	# emit "&" operands: t2 (k: 5 t: 14), pairheap.istr6 (k: 7 t: 18)
	call r4, pairheap.istr6, () ;
	# emit "call", prints (k: 9 t: 19)
	call r5, prints, (r4) ;
	# emit "&" operands: t4 (k: 5 t: 14), pairheap.istr7 (k: 7 t: 18)
	call r6, pairheap.istr7, () ;
	# emit "call", prints (k: 9 t: 19)
	call r7, prints, (r6) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r9, 1 ;
	call r8, mincexit, (r9) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
.BB27:
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9)>

IsEmpty {
	# emit "==" operands:  (k: 158501472 t: -48), r1 (k: 4 t: 14), 0 (k: 3 t: 14)
	# outputjz
	if4 (r1) goto .BB48 ;
	mov4 r2, 1 ;
	goto .BB49
.BB48:
	mov4 r2, 0 ;
.BB49:
	if4 (r2) goto .BB28 ;
	# emit "=" operands: t0 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r3, 0 ;
	# emit "jmp"
	goto .BB29
.BB28:
	# emit "=" operands: t0 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r3, 1 ;
.BB29:
	# emit "ret" operands: t0 (k: 5 t: 4)
	mov4 r0, r3 ;
	ret
} <(r1), r0, (r2, r3)>

IsFull {
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
	ret
} <(r1), r0, ()>

Destroy {
	# emit "call", MakeEmpty (k: 9 t: 19)
	call r2, MakeEmpty, (r1) ;
	ret
} <(r1), r0, (r2)>

