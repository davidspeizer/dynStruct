# Code auto-generated by MinxCC

stackar.istr0 {
	mov4 r1, 24 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 83 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 107 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 122 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 105 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

stackar.istr1 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

stackar.istr2 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

stackar.istr3 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

stackar.istr4 {
	mov4 r1, 16 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 79 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 111 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 102 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 101 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 33 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

stackar.istr5 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

stackar.istr6 {
	mov4 r1, 11 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 70 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 117 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 108 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 107 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

stackar.istr7 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

stackar.istr8 {
	mov4 r1, 12 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 107 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

stackar.istr9 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

stackar.istr10 {
	mov4 r1, 12 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 107 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

stackar.istr11 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

stackar.istr12 {
	mov4 r1, 12 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 69 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 109 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 112 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 121 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 32 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 115 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 116 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 97 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 99 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 107 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

stackar.istr13 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




IsEmpty {
	# emit "+" operands: t1 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t2 (k: 5 t: 4), t1 (k: 5 t: 14)
	mov4 r2, [r1 + 4] ;
	# emit "==" operands:  (k: 167079256 t: -56), t2 (k: 5 t: 4), -1 (k: 3 t: 4)
	mov4 r4, -1 ;
	eq4 r3, r2, r4 ;
	if4 (r3) goto .BB0 ;
	# emit "=" operands: t0 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	# emit "jmp"
	goto .BB1
.BB0:
	# emit "=" operands: t0 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r5, 1 ;
.BB1:
	# emit "ret" operands: t0 (k: 5 t: 4)
	mov4 r0, r5 ;
	ret
} <(r1), r0, (r2, r3, r4, r5)>

IsFull {
	# emit "+" operands: t1 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t2 (k: 5 t: 4), t1 (k: 5 t: 14)
	mov4 r2, [r1 + 4] ;
	# emit "*" operands: t3 (k: 5 t: 4), r1 (k: 4 t: 14)
	mov4 r3, [r1] ;
	# emit "+" operands: t4 (k: 5 t: 4), t3 (k: 5 t: 4), -1 (k: 3 t: 4)
	mov4 r4, r3 ;
	add4 r4, -1 ;
	# emit "==" operands:  (k: 167080736 t: -112), t2 (k: 5 t: 4), t4 (k: 5 t: 4)
	eq4 r5, r2, r4 ;
	if4 (r5) goto .BB2 ;
	# emit "=" operands: t0 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r6, 0 ;
	# emit "jmp"
	goto .BB3
.BB2:
	# emit "=" operands: t0 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r6, 1 ;
.BB3:
	# emit "ret" operands: t0 (k: 5 t: 4)
	mov4 r0, r6 ;
	ret
} <(r1), r0, (r2, r3, r4, r5, r6)>

CreateStack {
	# emit ">=" operands:  (k: 167082072 t: 104), r1 (k: 4 t: 4), 5 (k: 3 t: 4)
	mov4 r3, r1 ;
	sub4 r3, 5 ;
	# ~x
	mul4 r3, -1 ;
	add4 r3, -1 ;
	# xor
	mov4 r4, 5 ;
	mov4 r5, 5 ;
	or4 r4, r1 ;
	and4 r5, r1 ;
	sub4 r4, r5 ;
	or4 r4, r3 ;
	# ~x
	mov4 r3, r1 ;
	mul4 r3, -1 ;
	add4 r3, -1 ;
	or4 r3, 5 ;
	and4 r3, r4 ;
	sr4 r3, 31 ;
	if4 (r3) goto .BB4 ;
	# emit "&" operands: t0 (k: 5 t: 14), stackar.istr0 (k: 7 t: 18)
	call r6, stackar.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r7, prints, (r6) ;
	# emit "&" operands: t2 (k: 5 t: 14), stackar.istr1 (k: 7 t: 18)
	call r8, stackar.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r9, prints, (r8) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r11, 1 ;
	call r10, mincexit, (r11) ;
.BB4:
	# emit "call" operands: r2 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r2, 12 ;
	# emit "!=" operands:  (k: 167083368 t: -48), r2 (k: 4 t: 14), 0 (k: 3 t: 14)
	if4 (r2) goto .BB5 ;
	# emit "&" operands: t6 (k: 5 t: 14), stackar.istr2 (k: 7 t: 18)
	call r12, stackar.istr2, () ;
	# emit "call", prints (k: 9 t: 19)
	call r13, prints, (r12) ;
	# emit "&" operands: t8 (k: 5 t: 14), stackar.istr3 (k: 7 t: 18)
	call r14, stackar.istr3, () ;
	# emit "call", prints (k: 9 t: 19)
	call r15, prints, (r14) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r17, 1 ;
	call r16, mincexit, (r17) ;
.BB5:
	# emit "+" operands: t11 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t13 (k: 5 t: 5), 4 (k: 3 t: 4), r1 (k: 4 t: 4)
	# emit "call" operands: t14 (k: 5 t: 14), malloc (k: 9 t: 19)
	alloc r18, r1 * 4;
	# emit "*=" operands: t11 (k: 5 t: 14), t14 (k: 5 t: 14)
	mov4 [r2 + 8], r18 ;
	# emit "*" operands: t16 (k: 5 t: 14), t11 (k: 5 t: 14)
	mov4 r19, [r2 + 8] ;
	# emit "!=", t16 (k: 5 t: 14), 0 (k: 3 t: 14)
	if4 (r19) goto .BB6 ;
	# emit "&" operands: t17 (k: 5 t: 14), stackar.istr4 (k: 7 t: 18)
	call r20, stackar.istr4, () ;
	# emit "call", prints (k: 9 t: 19)
	call r21, prints, (r20) ;
	# emit "&" operands: t19 (k: 5 t: 14), stackar.istr5 (k: 7 t: 18)
	call r22, stackar.istr5, () ;
	# emit "call", prints (k: 9 t: 19)
	call r23, prints, (r22) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r25, 1 ;
	call r24, mincexit, (r25) ;
.BB6:
	# emit "*=" operands: r2 (k: 4 t: 14), r1 (k: 4 t: 4)
	mov4 [r2], r1 ;
	# emit "call", MakeEmpty (k: 9 t: 19)
	call r26, MakeEmpty, (r2) ;
	# emit "ret" operands: r2 (k: 4 t: 14)
	mov4 r0, r2 ;
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26)>

MakeEmpty {
	# emit "+" operands: t0 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*=" operands: t0 (k: 5 t: 14), -1 (k: 3 t: 4)
	mov4 r2, -1 ;
	mov4 [r1 + 4], r2 ;
	ret
} <(r1), r0, (r2)>

DisposeStack {
	ret
} <(r1), r0, ()>

Push {
	# emit "call" operands: t0 (k: 5 t: 4), IsFull (k: 9 t: 19)
	call r3, IsFull, (r2) ;
	# emit "" operands:  (k: 167092392 t: 96), t0 (k: 5 t: 4)
	mov4 r4, r3 ;
	sub4 r4, 1 ;
	# ~x
	mov4 r5, r3 ;
	mul4 r5, -1 ;
	add4 r5, -1 ;
	and4 r4, r5 ;
	sr4 r4, 31 ;
	if4 (r4) goto .BB7 ;
	# emit "&" operands: t1 (k: 5 t: 14), stackar.istr6 (k: 7 t: 18)
	call r6, stackar.istr6, () ;
	# emit "call", prints (k: 9 t: 19)
	call r7, prints, (r6) ;
	# emit "&" operands: t3 (k: 5 t: 14), stackar.istr7 (k: 7 t: 18)
	call r8, stackar.istr7, () ;
	# emit "call", prints (k: 9 t: 19)
	call r9, prints, (r8) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r11, 1 ;
	call r10, mincexit, (r11) ;
	# emit "jmp"
	goto .BB8
.BB7:
	# emit "+" operands: t6 (k: 5 t: 14), r2 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t7 (k: 5 t: 4), t6 (k: 5 t: 14)
	mov4 r12, [r2 + 4] ;
	# emit "+" operands: t8 (k: 5 t: 4), t7 (k: 5 t: 4), 1 (k: 3 t: 4)
	mov4 r13, r12 ;
	add4 r13, 1 ;
	# emit "*=" operands: t6 (k: 5 t: 14), t8 (k: 5 t: 4)
	mov4 [r2 + 4], r13 ;
	# emit "*" operands: t9 (k: 5 t: 4), t6 (k: 5 t: 14)
	mov4 r14, [r2 + 4] ;
	# emit "<<" operands: t10 (k: 5 t: 4), t9 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t11 (k: 5 t: 14), r2 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t12 (k: 5 t: 14), t11 (k: 5 t: 14)
	mov4 r15, [r2 + 8] ;
	# emit "+" operands: t13 (k: 5 t: 14), t12 (k: 5 t: 14), t10 (k: 5 t: 4)
	mov4 r16, r15 ;
	add4 r16, r14 * 4 ;
	# emit "*=" operands: t13 (k: 5 t: 14), r1 (k: 4 t: 4)
	mov4 [r16], r1 ;
.BB8:
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16)>

Top {
	# emit "call" operands: t0 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r2, IsEmpty, (r1) ;
	# emit "!" operands:  (k: 167095400 t: -40), t0 (k: 5 t: 4)
	if4 (r2) goto .BB9 ;
	# emit "+" operands: t1 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t2 (k: 5 t: 4), t1 (k: 5 t: 14)
	mov4 r3, [r1 + 4] ;
	# emit "<<" operands: t3 (k: 5 t: 4), t2 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t4 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t5 (k: 5 t: 14), t4 (k: 5 t: 14)
	mov4 r4, [r1 + 8] ;
	# emit "+" operands: t6 (k: 5 t: 14), t5 (k: 5 t: 14), t3 (k: 5 t: 4)
	mov4 r5, r4 ;
	add4 r5, r3 * 4 ;
	# emit "*" operands: t7 (k: 5 t: 4), t6 (k: 5 t: 14)
	mov4 r6, [r5] ;
	# emit "ret" operands: t7 (k: 5 t: 4)
	mov4 r0, r6 ;
	# emit "jmp"
	goto .BB10
.BB9:
	# emit "&" operands: t8 (k: 5 t: 14), stackar.istr8 (k: 7 t: 18)
	call r7, stackar.istr8, () ;
	# emit "call", prints (k: 9 t: 19)
	call r8, prints, (r7) ;
	# emit "&" operands: t10 (k: 5 t: 14), stackar.istr9 (k: 7 t: 18)
	call r9, stackar.istr9, () ;
	# emit "call", prints (k: 9 t: 19)
	call r10, prints, (r9) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r12, 1 ;
	call r11, mincexit, (r12) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
.BB10:
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12)>

Pop {
	# emit "call" operands: t0 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r2, IsEmpty, (r1) ;
	# emit "" operands:  (k: 167098064 t: -120), t0 (k: 5 t: 4)
	mov4 r3, r2 ;
	sub4 r3, 1 ;
	# ~x
	mov4 r4, r2 ;
	mul4 r4, -1 ;
	add4 r4, -1 ;
	and4 r3, r4 ;
	sr4 r3, 31 ;
	if4 (r3) goto .BB11 ;
	# emit "&" operands: t1 (k: 5 t: 14), stackar.istr10 (k: 7 t: 18)
	call r5, stackar.istr10, () ;
	# emit "call", prints (k: 9 t: 19)
	call r6, prints, (r5) ;
	# emit "&" operands: t3 (k: 5 t: 14), stackar.istr11 (k: 7 t: 18)
	call r7, stackar.istr11, () ;
	# emit "call", prints (k: 9 t: 19)
	call r8, prints, (r7) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r10, 1 ;
	call r9, mincexit, (r10) ;
	# emit "jmp"
	goto .BB12
.BB11:
	# emit "+" operands: t6 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t7 (k: 5 t: 4), t6 (k: 5 t: 14)
	mov4 r11, [r1 + 4] ;
	# emit "+" operands: t8 (k: 5 t: 4), t7 (k: 5 t: 4), -1 (k: 3 t: 4)
	mov4 r12, r11 ;
	add4 r12, -1 ;
	# emit "*=" operands: t6 (k: 5 t: 14), t8 (k: 5 t: 4)
	mov4 [r1 + 4], r12 ;
.BB12:
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12)>

TopAndPop {
	# emit "call" operands: t0 (k: 5 t: 4), IsEmpty (k: 9 t: 19)
	call r2, IsEmpty, (r1) ;
	# emit "!" operands:  (k: 167100208 t: -96), t0 (k: 5 t: 4)
	if4 (r2) goto .BB13 ;
	# emit "+" operands: t1 (k: 5 t: 14), r1 (k: 4 t: 14), 4 (k: 3 t: 4)
	# emit "*" operands: t2 (k: 5 t: 4), t1 (k: 5 t: 14)
	mov4 r3, [r1 + 4] ;
	# emit "+" operands: t3 (k: 5 t: 4), t2 (k: 5 t: 4), -1 (k: 3 t: 4)
	mov4 r4, r3 ;
	add4 r4, -1 ;
	# emit "*=" operands: t1 (k: 5 t: 14), t3 (k: 5 t: 4)
	mov4 [r1 + 4], r4 ;
	# emit "<<" operands: t5 (k: 5 t: 4), t2 (k: 5 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t6 (k: 5 t: 14), r1 (k: 4 t: 14), 8 (k: 3 t: 4)
	# emit "*" operands: t7 (k: 5 t: 14), t6 (k: 5 t: 14)
	mov4 r5, [r1 + 8] ;
	# emit "+" operands: t8 (k: 5 t: 14), t7 (k: 5 t: 14), t5 (k: 5 t: 4)
	mov4 r6, r5 ;
	add4 r6, r3 * 4 ;
	# emit "*" operands: t9 (k: 5 t: 4), t8 (k: 5 t: 14)
	mov4 r7, [r6] ;
	# emit "ret" operands: t9 (k: 5 t: 4)
	mov4 r0, r7 ;
	# emit "jmp"
	goto .BB14
.BB13:
	# emit "&" operands: t10 (k: 5 t: 14), stackar.istr12 (k: 7 t: 18)
	call r8, stackar.istr12, () ;
	# emit "call", prints (k: 9 t: 19)
	call r9, prints, (r8) ;
	# emit "&" operands: t12 (k: 5 t: 14), stackar.istr13 (k: 7 t: 18)
	call r10, stackar.istr13, () ;
	# emit "call", prints (k: 9 t: 19)
	call r11, prints, (r10) ;
	# emit "call", mincexit (k: 9 t: 19)
	mov4 r13, 1 ;
	call r12, mincexit, (r13) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
.BB14:
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13)>

