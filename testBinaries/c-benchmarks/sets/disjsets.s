# Code auto-generated by MinxCC

disjsets.istr0 {
	mov4 r1, 3 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 42 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 42 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 

disjsets.istr1 {
	mov4 r1, 2 ;
	alloc r0, r1 * 1;
	mov4 r2, r0 ;
	mov1 r3, 10 ;
	mov1 [r2], r3 ;
	add4 r2, 1 ;
	mov1 r3, 0 ;
	mov1 [r2], r3 ;
	ret
} <(), r0, (r1, r2, r3)> 




Initialize {
	# emit "=" operands: r2 (k: 4 t: 4), 128 (k: 3 t: 4)
	mov4 r2, 128 ;
	# emit "jmp"
	goto .BB1
.BB0:
	# emit "<<" operands: t0 (k: 5 t: 4), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t1 (k: 5 t: 14), r1 (k: 4 t: 14), t0 (k: 5 t: 4)
	mov4 r3, r1 ;
	add4 r3, r2 * 4 ;
	# emit "*=" operands: t1 (k: 5 t: 14), 0 (k: 3 t: 4)
	mov4 r4, 0 ;
	mov4 [r3], r4 ;
	# emit "+" operands: t5 (k: 5 t: 4), r2 (k: 4 t: 4), -1 (k: 3 t: 4)
	mov4 r5, r2 ;
	add4 r5, -1 ;
	# emit "=" operands: r2 (k: 4 t: 4), t5 (k: 5 t: 4)
	mov4 r2, r5 ;
.BB1:
	# emit ">" operands:  (k: 161744576 t: 40), r2 (k: 4 t: 4), 0 (k: 3 t: 4)
	mov4 r6, 0 ;
	sub4 r6, r2 ;
	# xor
	mov4 r7, 0 ;
	mov4 r9, 0 ;
	or4 r7, r2 ;
	and4 r9, r2 ;
	sub4 r7, r9 ;
	# xor
	mov4 r8, r6 ;
	mov4 r10, r6 ;
	or4 r8, 0 ;
	and4 r10, 0 ;
	sub4 r8, r10 ;
	and4 r7, r8 ;
	# xor
	mov4 r8, r6 ;
	mov4 r11, r6 ;
	or4 r8, r7 ;
	and4 r11, r7 ;
	sub4 r8, r11 ;
	sr4 r8, 31 ;
	if4 (r8) goto .BB0 ;
	ret
} <(r1), r0, (r2, r3, r4, r5, r6, r7, r8, r9, r10, r11)>

SetUnion {
	# emit "<<" operands: t0 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t1 (k: 5 t: 14), r1 (k: 4 t: 14), t0 (k: 5 t: 4)
	mov4 r4, r1 ;
	add4 r4, r3 * 4 ;
	# emit "*" operands: t2 (k: 5 t: 4), t1 (k: 5 t: 14)
	mov4 r5, [r4] ;
	# emit "<<" operands: t3 (k: 5 t: 4), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t4 (k: 5 t: 14), r1 (k: 4 t: 14), t3 (k: 5 t: 4)
	mov4 r6, r1 ;
	add4 r6, r2 * 4 ;
	# emit "*" operands: t5 (k: 5 t: 4), t4 (k: 5 t: 14)
	mov4 r7, [r6] ;
	# emit ">=" operands:  (k: 161746816 t: 24), t2 (k: 5 t: 4), t5 (k: 5 t: 4)
	mov4 r8, r5 ;
	sub4 r8, r7 ;
	# ~x
	mul4 r8, -1 ;
	add4 r8, -1 ;
	# xor
	mov4 r9, r7 ;
	mov4 r10, r7 ;
	or4 r9, r5 ;
	and4 r10, r5 ;
	sub4 r9, r10 ;
	or4 r9, r8 ;
	# ~x
	mov4 r8, r5 ;
	mul4 r8, -1 ;
	add4 r8, -1 ;
	or4 r8, r7 ;
	and4 r8, r9 ;
	sr4 r8, 31 ;
	if4 (r8) goto .BB2 ;
	# emit "<<" operands: t6 (k: 5 t: 4), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t7 (k: 5 t: 14), r1 (k: 4 t: 14), t6 (k: 5 t: 4)
	mov4 r11, r1 ;
	add4 r11, r2 * 4 ;
	# emit "*=" operands: t7 (k: 5 t: 14), r3 (k: 4 t: 4)
	mov4 [r11], r3 ;
	# emit "jmp"
	goto .BB4
.BB2:
	# emit "<<" operands: t10 (k: 5 t: 4), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t11 (k: 5 t: 14), r1 (k: 4 t: 14), t10 (k: 5 t: 4)
	mov4 r12, r1 ;
	add4 r12, r2 * 4 ;
	# emit "*" operands: t12 (k: 5 t: 4), t11 (k: 5 t: 14)
	mov4 r13, [r12] ;
	# emit "<<" operands: t13 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t14 (k: 5 t: 14), r1 (k: 4 t: 14), t13 (k: 5 t: 4)
	mov4 r14, r1 ;
	add4 r14, r3 * 4 ;
	# emit "*" operands: t15 (k: 5 t: 4), t14 (k: 5 t: 14)
	mov4 r15, [r14] ;
	# emit "!=" operands:  (k: 161748504 t: 56), t12 (k: 5 t: 4), t15 (k: 5 t: 4)
	eq4 r16, r13, r15 ;
	# outputjz
	if4 (r16) goto .BB13 ;
	mov4 r17, 1 ;
	goto .BB14
.BB13:
	mov4 r17, 0 ;
.BB14:
	if4 (r17) goto .BB3 ;
	# emit "<<" operands: t16 (k: 5 t: 4), r2 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t17 (k: 5 t: 14), r1 (k: 4 t: 14), t16 (k: 5 t: 4)
	mov4 r18, r1 ;
	add4 r18, r2 * 4 ;
	# emit "*" operands: t18 (k: 5 t: 4), t17 (k: 5 t: 14)
	mov4 r19, [r18] ;
	# emit "+" operands: t19 (k: 5 t: 4), t18 (k: 5 t: 4), -1 (k: 3 t: 4)
	mov4 r20, r19 ;
	add4 r20, -1 ;
	# emit "*=" operands: t17 (k: 5 t: 14), t19 (k: 5 t: 4)
	mov4 [r18], r20 ;
.BB3:
	# emit "<<" operands: t21 (k: 5 t: 4), r3 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t22 (k: 5 t: 14), r1 (k: 4 t: 14), t21 (k: 5 t: 4)
	mov4 r21, r1 ;
	add4 r21, r3 * 4 ;
	# emit "*=" operands: t22 (k: 5 t: 14), r2 (k: 4 t: 4)
	mov4 [r21], r2 ;
.BB4:
	ret
} <(r1, r2, r3), r0, (r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21)>

Find {
	# emit "<<" operands: t0 (k: 5 t: 4), r1 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t1 (k: 5 t: 14), r2 (k: 4 t: 14), t0 (k: 5 t: 4)
	mov4 r3, r2 ;
	add4 r3, r1 * 4 ;
	# emit "*" operands: t2 (k: 5 t: 4), t1 (k: 5 t: 14)
	mov4 r4, [r3] ;
	# emit ">" operands:  (k: 161751888 t: 16), t2 (k: 5 t: 4), 0 (k: 3 t: 4)
	mov4 r5, 0 ;
	sub4 r5, r4 ;
	# xor
	mov4 r6, 0 ;
	mov4 r8, 0 ;
	or4 r6, r4 ;
	and4 r8, r4 ;
	sub4 r6, r8 ;
	# xor
	mov4 r7, r5 ;
	mov4 r9, r5 ;
	or4 r7, 0 ;
	and4 r9, 0 ;
	sub4 r7, r9 ;
	and4 r6, r7 ;
	# xor
	mov4 r7, r5 ;
	mov4 r10, r5 ;
	or4 r7, r6 ;
	and4 r10, r6 ;
	sub4 r7, r10 ;
	sr4 r7, 31 ;
	if4 (r7) goto .BB5 ;
	# emit "ret" operands: r1 (k: 4 t: 4)
	mov4 r0, r1 ;
	# emit "jmp"
	goto .BB6
.BB5:
	# emit "<<" operands: t3 (k: 5 t: 4), r1 (k: 4 t: 4), 2 (k: 3 t: 4)
	# emit "+" operands: t4 (k: 5 t: 14), r2 (k: 4 t: 14), t3 (k: 5 t: 4)
	mov4 r11, r2 ;
	add4 r11, r1 * 4 ;
	# emit "*" operands: t6 (k: 5 t: 4), t4 (k: 5 t: 14)
	mov4 r12, [r11] ;
	# emit "call" operands: t7 (k: 5 t: 4), Find (k: 9 t: 19)
	call r13, Find, (r12, r2) ;
	# emit "*=" operands: t4 (k: 5 t: 14), t7 (k: 5 t: 4)
	mov4 [r11], r13 ;
	# emit "*" operands: t8 (k: 5 t: 4), t4 (k: 5 t: 14)
	mov4 r14, [r11] ;
	# emit "ret" operands: t8 (k: 5 t: 4)
	mov4 r0, r14 ;
.BB6:
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14)>

main {
	# emit "call" operands: r3 (k: 4 t: 14), malloc (k: 9 t: 19)
	alloc r3, 516 ;
	# emit "call", Initialize (k: 9 t: 19)
	call r9, Initialize, (r3) ;
	# emit "=" operands: r6 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r6, 1 ;
	# emit "=" operands: r5 (k: 4 t: 4), r6 (k: 4 t: 4)
	mov4 r5, r6 ;
	# emit "jmp" operands:  (k: 161754224 t: 72)
	goto .BB10
.BB7:
	# emit "=" operands: r5 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r5, 1 ;
	# emit "jmp" operands:  (k: 161754080 t: 112)
	goto .BB9
.BB8:
	# emit "call" operands: r7 (k: 4 t: 4), Find (k: 9 t: 19)
	call r7, Find, (r5, r3) ;
	# emit "+" operands: t2 (k: 5 t: 4), r5 (k: 4 t: 4), r6 (k: 4 t: 4)
	mov4 r10, r5 ;
	add4 r10, r6 ;
	# emit "call" operands: r8 (k: 4 t: 4), Find (k: 9 t: 19)
	call r8, Find, (r10, r3) ;
	# emit "call", SetUnion (k: 9 t: 19)
	call r11, SetUnion, (r3, r7, r8) ;
	# emit "*" operands: t4 (k: 5 t: 4), 2 (k: 3 t: 4), r6 (k: 4 t: 4)
	mov4 r12, 2 ;
	mov4 r13, r12 ;
	mul4 r13, r6 ;
	# emit "+" operands: t5 (k: 5 t: 4), r5 (k: 4 t: 4), t4 (k: 5 t: 4)
	mov4 r14, r5 ;
	add4 r14, r13 ;
	# emit "=" operands: r5 (k: 4 t: 4), t5 (k: 5 t: 4)
	mov4 r5, r14 ;
.BB9:
	# emit "<" operands:  (k: 161753784 t: 40), r5 (k: 4 t: 4), 128 (k: 3 t: 4)
	mov4 r15, r5 ;
	sub4 r15, 128 ;
	# xor
	mov4 r16, r5 ;
	mov4 r18, r5 ;
	or4 r16, 128 ;
	and4 r18, 128 ;
	sub4 r16, r18 ;
	# xor
	mov4 r17, r15 ;
	mov4 r19, r15 ;
	or4 r17, r5 ;
	and4 r19, r5 ;
	sub4 r17, r19 ;
	and4 r16, r17 ;
	# xor
	mov4 r17, r15 ;
	mov4 r20, r15 ;
	or4 r17, r16 ;
	and4 r20, r16 ;
	sub4 r17, r20 ;
	sr4 r17, 31 ;
	if4 (r17) goto .BB8 ;
	# emit "<<" operands: t6 (k: 5 t: 4), r6 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r21, r6 ;
	sl4 r21, 1 ;
	# emit "=" operands: r6 (k: 4 t: 4), t6 (k: 5 t: 4)
	mov4 r6, r21 ;
.BB10:
	# emit "<=" operands:  (k: 161753248 t: 40), r6 (k: 4 t: 4), 8 (k: 3 t: 4)
	mov4 r22, 8 ;
	sub4 r22, r6 ;
	# ~x
	mul4 r22, -1 ;
	add4 r22, -1 ;
	# xor
	mov4 r23, r6 ;
	mov4 r24, r6 ;
	or4 r23, 8 ;
	and4 r24, 8 ;
	sub4 r23, r24 ;
	or4 r23, r22 ;
	# ~x
	mov4 r22, 8 ;
	mul4 r22, -1 ;
	add4 r22, -1 ;
	or4 r22, r6 ;
	and4 r22, r23 ;
	sr4 r22, 31 ;
	if4 (r22) goto .BB7 ;
	# emit "=" operands: r4 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r4, 1 ;
	# emit "=" operands: r4 (k: 4 t: 4), 1 (k: 3 t: 4)
	mov4 r4, 1 ;
	# emit "jmp" operands:  (k: 161755712 t: 24)
	goto .BB12
.BB11:
	# emit "call" operands: r7 (k: 4 t: 4), Find (k: 9 t: 19)
	call r7, Find, (r4, r3) ;
	# emit "call", print32 (k: 9 t: 19)
	call r25, print32, (r7) ;
	# emit "&" operands: t9 (k: 5 t: 14), disjsets.istr0 (k: 7 t: 18)
	call r26, disjsets.istr0, () ;
	# emit "call", prints (k: 9 t: 19)
	call r27, prints, (r26) ;
	# emit "++" operands: r4 (k: 4 t: 4)
	add4 r4, 1 ;
.BB12:
	# emit "<=" operands:  (k: 161753928 t: -48), r4 (k: 4 t: 4), 128 (k: 3 t: 4)
	mov4 r28, 128 ;
	sub4 r28, r4 ;
	# ~x
	mul4 r28, -1 ;
	add4 r28, -1 ;
	# xor
	mov4 r29, r4 ;
	mov4 r30, r4 ;
	or4 r29, 128 ;
	and4 r30, 128 ;
	sub4 r29, r30 ;
	or4 r29, r28 ;
	# ~x
	mov4 r28, 128 ;
	mul4 r28, -1 ;
	add4 r28, -1 ;
	or4 r28, r4 ;
	and4 r28, r29 ;
	sr4 r28, 31 ;
	if4 (r28) goto .BB11 ;
	# emit "&" operands: t13 (k: 5 t: 14), disjsets.istr1 (k: 7 t: 18)
	call r31, disjsets.istr1, () ;
	# emit "call", prints (k: 9 t: 19)
	call r32, prints, (r31) ;
	# emit "ret" operands: 0 (k: 3 t: 4)
	mov4 r0, 0 ;
	ret
} <(r1, r2), r0, (r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32)>

